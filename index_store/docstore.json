{"docstore/metadata": {"9d61c6f2-8604-4b41-ac0f-ee2ef6df8592": {"doc_hash": "6653af918adfb4756a9e8afa08098b8eb605cc012df47f99e61b6a278df773b2"}, "ce251b4c-9df7-44c9-bb5a-374e063d508f": {"doc_hash": "0f89c927cf6aad6b9b46ae3d70c7ee642923928e917f4d39df0ee5c1beb30add"}, "e363273c-3e87-473b-9543-1aa7d22404a3": {"doc_hash": "022e1565ca8013909e7339b26eb2e1e6242796212d395ee51fc9b45d5d35405a"}, "24f0a26d-8aef-4ccd-9072-731a413c8c1e": {"doc_hash": "b675bb01bfb7631b1ac9949d845c24431dd696e911a8d473796477c69c07738e"}, "0449a3ab-6989-4e9b-bac3-04ff9d7f20dc": {"doc_hash": "89b2cbd818aff0396fe1cc3dd0569229d599524daa97cfb9e57f3af76b4708ff"}, "4391ba2a-7344-4a90-848d-24c5f9fdf94f": {"doc_hash": "eb54c79cdbe5109bafe3b9d14d91b2ac87363fff4369ffad97177eb426b07244"}, "e8266447-b777-4cf4-ab77-9db8de52e865": {"doc_hash": "26dcafc4ea459bc6c1737b9d4ae7971d30de43cab9cbd419aa91339f4a9b4637"}, "2ddcf355-d117-458f-bbfa-42c3408c9900": {"doc_hash": "29e102eaebfa1f7acbc8de1ed92a062d0ed583c60c5041af94055ca87183b4ea"}, "45630aed-a817-4c93-8016-4ecf4c219311": {"doc_hash": "8e28594b54db5fa3e55d7fb11947a23ba6e9862772ff1aaa44f26f546c977cd1"}, "d973e909-34db-44d2-a76c-b68aa8f072e4": {"doc_hash": "752043bd9a18e40fd28e3fc47de7ae2242388320717a1aa00e3cca9ebd3e28e8"}, "966c39b3-6255-4d7c-8529-5bd5234b5f7a": {"doc_hash": "110dfd18e51477b1a427fc13f1bca624395a2b8772e88033f441da9a87c552ee"}, "ae172c38-cd30-4d87-9362-7013e9102bcc": {"doc_hash": "6ea3a3e8e05ea4c1379cf86e3bf37b7e0cd1c9286d164535c656a56b4c8fa8c9"}, "877c10a8-d1bd-4f76-9342-d3347f1bdf49": {"doc_hash": "950e6965b8af67d02da0bcc53aa64e562c622d6db0d2cba59f317d1804d5a9f4"}, "1090ab77-5150-4f66-bfd6-598a862fc82c": {"doc_hash": "7fa67dd1fd194826c78c23726e04905aba467dcae86633e806bf5a5592d3a82f"}, "97f38d65-7ad4-4b7c-babc-590f860d3600": {"doc_hash": "a3859effb01996010f329c54cdbc91775b1fa048cdf0cd522c00e02dd85e6d0e"}, "fecbe22f-2e0c-4881-a059-98d97d0055ac": {"doc_hash": "3f3b5f99c9bc4a0d5d5cfc6017463e2c4ba45961cf64b11af42fa22d2906aae5"}, "9e47fe1e-a426-4948-a421-7b16fa109d5d": {"doc_hash": "1f10a326592494414b0392a3a65320c947ed1f3647331ca9949c5e55946cb68e"}, "6d5f5988-6a1e-4904-b423-83fb43da8140": {"doc_hash": "e9bc1ef31e59628f9867f4b17a3a03cb955b598217c75f6794b4d667b3a315bb"}, "55533469-873e-4d87-82f7-dd42ac7a5525": {"doc_hash": "f06b07ae1fdcc4bce59c24bf68f9ae02469cc4a5c111b6149a67da0ccfe795f0"}, "a292dd57-dc04-4fd5-b0fc-9bedcbb0ab69": {"doc_hash": "1e081dd1eb7458818b642c6bdb455eb9fb42abbaf9bd47db2868906e6ef49c48"}, "9232b0c6-73cd-42f2-b657-4ebc385b9be1": {"doc_hash": "23c5804239ee25aa139b1b0bfacbb7e571f394ffeb9295c949f3a57cf2184e6d"}, "7a98d8c6-98e4-41dd-8ddc-a65c23b3b72f": {"doc_hash": "43ed4bb0b5ab9dab970b55a38a0677312b7dd42bfa4a38a8a7802aca8dc03a5c"}, "85634b0b-cd30-4b69-9f76-f6fbe503a9d7": {"doc_hash": "0a754d8766935535426634a61782de8a8b8e72ec2b20064535a7818062e9917b"}, "1479dae3-51d9-4e87-a0ff-a24abd10eea6": {"doc_hash": "773627a59952d3d1c3caf72d8abc8a11cc458b0b26091b4003690452b2307bcd"}, "a20b9deb-8930-4b39-9d98-3a9e4f1515e6": {"doc_hash": "6792910216a77f20639f0fde4ca1fbef4b27860057c6ccfd578d28ff5ef8d53d"}, "ca1003df-6230-496f-8ebd-88bd9aa2bd28": {"doc_hash": "79eba33d7f69d70afa6a536005b845fb4a9ad00961be2bf28bd37e9da935f087"}, "2e9297ae-dbf3-406c-8e73-d302bd7908ec": {"doc_hash": "4adc578868ee792a14c024dfe5be9bff45d4f776f760ec05bd79e782b400c203"}, "c8919d45-2ba5-42f4-a033-0a9e434f7f96": {"doc_hash": "897b6f55bcc9e338d86d9208abc09d58f6701c92926cecb14056a3abde71ca8f"}, "270973d9-3e62-4bfc-8fc9-c085f71278a0": {"doc_hash": "c84c6126c27c3f14a23043e1063764340eb3880f94cf9a33eb5b2a57658217d0"}, "4acccff3-2abd-40cd-9ec2-42f61846c412": {"doc_hash": "d2b67fd72badf92611fb707bf620fd0b65c478ed91ebd3a9a4f730c80eeac788"}, "8544df16-80ce-4271-ae4d-7bd7e8c46103": {"doc_hash": "8cc0188a8f4b13e6c445679e7a9fbfca93dec5e14d33a7ea5822dc0f2fc001ba"}, "2c21dbe4-13e4-4805-9e38-812931e1aa36": {"doc_hash": "48c439a4a7a42a7fabcaec48f211890210ce2428b1e12acbb4c2b2274253a0d5"}, "c90accd1-f915-4121-90a2-1d81660b90bc": {"doc_hash": "50222d0f9e0afa8e46da9c57e53f3439bb7a8f5d1cc5c34b4fda5dca4a4844f6"}, "91c33dfd-512f-4248-9030-94a40fc90fcc": {"doc_hash": "8904e748e9f3a6205323a2420896d3edf4e563d726b96f0d847f870500dbcb2f"}, "893687c5-580c-49ad-90bb-0ff3d9c4fd8c": {"doc_hash": "4f5e277494f36ac30436ed275c4e5bde0c6bb34dad2ac2124cfba0004503f9ec"}, "1c87bf89-b4f3-4c3f-b455-c865f90f8239": {"doc_hash": "478e77c2656257ec12c111fe78d274840047beb242db656d93139660a7a9ba38"}, "e1425a2d-2cdc-4544-8a21-ca69d7eb1cd5": {"doc_hash": "f4a52fa03ab5374756a29f93fea50a7ea683e8fb9ab72e5bd6b5ee805d4a6947"}, "dcf158e7-a7bb-41bd-8f04-3cded112e909": {"doc_hash": "4d93819cedc1c3e3f5d60809b6cdeb761e5069d236c5abcb36a6e7d9da9ef2db"}, "e9a04748-e20d-4777-85b7-56b8c6b1a2ba": {"doc_hash": "2cf4fe83d9e5f4f33834a15597d8fdd5de7a8c25fd5fa7af23503c5c53fece24"}, "9e86f5ca-c655-4ecc-ac4f-e27e411d2cb1": {"doc_hash": "f0156bf2c5cb876eeed1a8b3134b2e7effff53bffa91ccced324a0162106baea"}, "4ac4e317-614b-4bcf-91a4-acaa179ebe49": {"doc_hash": "b9467889cc74db697f2adf12621d1f4f13aac7fa6ffb5340d208e7cf5d80aa91"}, "cdee0d00-5589-471c-a3c4-84e51f986f99": {"doc_hash": "4efeb0fd79277b47fb17f2175577e5ffd11a8c12c69d506bebae8ff35c719702"}, "118fe40f-44f2-43ec-84c3-8be09c1bcf0f": {"doc_hash": "34513c94056cf41c7d9a1f6659e23e64ad898c80e257a755eea275549762b963"}, "bf5854cd-492b-4572-a601-899c3ac244c9": {"doc_hash": "7aedef574de199367b51d2a0e775f85eb4735fa3b1171722a21f080df1f4f9f3"}, "425d2916-e313-4f69-89bd-7aa20bf0cb9c": {"doc_hash": "c933ccfe5a60d9a14db41c316e0264b83b9cf2ccb039b2068c33ac52465c7e7d"}, "dbdb6873-5000-4135-a110-26db79227446": {"doc_hash": "89d8eca94fd1f0c767eca15bb30b5e59ba85519fac228f1b2bef369263d63d33"}, "a05793ba-216a-4e4c-8536-56644448f3cb": {"doc_hash": "55d00439ae5a343548980e4fc7c70f7a13f137079d51a03cfc9e5a290e0dc706"}, "ccfc5e28-57a6-4d83-8047-0f26408f3690": {"doc_hash": "2e908bcee1b7b6ff9a6d30aa44da2c5a9a79408ad5177547598079d5d070884c"}, "a464ed99-9f5b-4b1e-8647-cddd1967eb90": {"doc_hash": "cad820aeec27904577a42028dfaf640363247157a94f018ba29b0184a7a7efbb"}, "b1a47164-ab27-4155-9168-3c808525a41a": {"doc_hash": "3aaa298d82b6e629d2299a7182208ee9939f3b41983cf90923393c364dbff737"}, "2a53e4fa-419d-43fc-afcc-491ed6df5601": {"doc_hash": "3d2bf5552694680c262ad192beb6b2c5eda6262539ce79d1afd6a5268ee534a3"}, "dc93fe18-0c66-4c5d-8e38-92bf914b6146": {"doc_hash": "b2f46ca713ba49f2b1543499459885c97223969289eb497e9b2f7d06d1035eb1"}, "ff7c64ea-384e-4884-bd37-67573fc9ee79": {"doc_hash": "11bf88d175c338695e20ea9a65b3b6554c037bebdd5aba7b960e74b40fc02eb3"}, "f7dc4cce-2b53-4c6e-94eb-e8ec1eb00931": {"doc_hash": "89bcdda5a8f2ad539364a1df0194892807e10e51ea090f9cdc114e483fa39ee7"}, "8d6fd736-f3be-45cf-9d39-d54a9d9c039b": {"doc_hash": "87840f38ab6df3d0f10687b8819b33ec55100f9daecd7ade0bc81bd25abe94c0"}, "d72dfa1a-3556-4c28-84bd-4772d4928d98": {"doc_hash": "e77b219dfea11eb4a231fb5b8d61cb3d408feb73c38be6b40f12aab2dce74282"}, "a6166d8c-523c-4f09-829d-a1fd54992cf1": {"doc_hash": "b66a426e8b8705dd9731e8f96e621c1c8de8f8443c674e15a36069f1f4c30da7"}, "5fe39b1f-7a9e-4b65-b7ba-806017e296f6": {"doc_hash": "5ac33ec289421494fe90a87b0779bc4c450a0fa7883c77b6849c2048fa0e5d4a"}, "68545007-09d2-4a6a-91da-b9046b763d45": {"doc_hash": "713c33c6f5076059057a2e1f5dd58ea436e8747ff9917ec25b77eb30fd41899a"}, "acb8cdac-f58c-4b23-b37e-f744a5a28c1f": {"doc_hash": "dfa09258e2591411f6499b50855f7bd4bc601f3cc3b36398883ab0475b301faa"}, "943b4b0e-fb80-4b4c-849b-0d0ed6d08e19": {"doc_hash": "b46a44530e1bbddfbca28aae21aa0df2520c3d9398fef8b33bd2fe53f14c5af6"}, "164c62df-9828-405f-ba2c-1b4bbf3113ae": {"doc_hash": "4ee5e17c2cc138231b0aa879beb6db6d5c8db2165d70e73c70f502c695729a3b"}, "64a2015c-a7e4-48b4-9b8f-df022c47a765": {"doc_hash": "d84d81e6cec1a6873e04a9a86cf01bb410078a855a1421301b7903c9e0281243"}, "138c20ad-d539-4462-9922-aa62a7380ae1": {"doc_hash": "d8395b36defa420c3cd15e1d1215f899f755f70bd126159f2188d8c375da1043"}, "4a7cbe19-8e11-4eed-b807-b1bc8101b988": {"doc_hash": "2e39728c3e63e446d4efeaae917dbbb58706322064058a0ce7e5c695d8a8db2c"}, "b5e3b1ec-55f6-4c97-a2c0-3c4fd1f79804": {"doc_hash": "57fd265e2da969defa1037d87182770274c256fc881a83baedb0143eb12d3c1e"}, "fd9ec442-0bf5-4f1d-a0e0-85efb1a826e9": {"doc_hash": "4114557fa05f0764b23524926e30550d03494d35dfbb03bc628024bc9ffdcb80"}, "ad28a3d1-5ca4-41f6-b039-c3530f17a35d": {"doc_hash": "0ed865792a6c98a491f37505a8b35e18262e9e438b5687a393d031a8cf98964b"}, "94dae536-6c09-4f7b-92a8-0ee077f40832": {"doc_hash": "11fe64c18b3c9df84432acebbdf29b19023ec839c4b3f74c6f65dcef788af141"}, "4b112aff-f61a-4d51-a586-9c392b92a8da": {"doc_hash": "f4e5173d1adc808c0d9ef5114d59ff58f7ff21b2368d532cb8ac61e57ac5b1d5"}, "90c14fcd-f49a-40eb-890d-34325027c9a0": {"doc_hash": "ee9a5bdc65115c8392f224d8c5d6673ca2be33869472a0252ccb7298c4074c9a"}, "ceeb0b26-2145-46b5-97d2-4400bef60d5d": {"doc_hash": "5d9f931ce47efcb914da184de96d52c97027233dc1e175be17b40911af433b3a"}, "1d510e54-9c2c-4e3e-a851-e7bd101b69b3": {"doc_hash": "03e7e5e43517d05d26bdbd9c12ec051aab18842c871686d90c6a1476c5850344"}, "ee544ce3-f80b-4517-82be-65a850d8985c": {"doc_hash": "851056e320999d570af0781d17d867b4a49d55a6fe3585c78692aa945433f631"}, "ca7926e5-8b75-4ef7-9787-af053acae655": {"doc_hash": "a865b0cdd0b06b9f2a22292827d58de050947aa72935f2603265e4935130ea07"}, "2a043ad3-11bd-4796-b770-9d1ccb82132b": {"doc_hash": "69832432812c9b65206d4ff7dbe15ec7c847ff38543320ac29fe9f1112ed1a17"}, "b53e9f65-4a5b-4c44-975e-a41dd3265708": {"doc_hash": "c9909f61c5fdf645b5627b1518440877263f80742a3fee7c3558d99d30bd0606"}, "d6597ce1-5a67-4a51-b2be-b5a6391985d7": {"doc_hash": "7fb1621c9a12931e01d7021abfd83547426e26aa6133607e743d5aee6c7efdf2"}, "bce5b62c-27ef-43f3-9dba-e943026af709": {"doc_hash": "64d1b1e86ad2c50782f6edbaebd6bf7a6252d5310dee33bccbc88fe05614a9c4"}, "3495ed92-9cf2-459a-bc2a-3db01a857182": {"doc_hash": "85875f9cc1fd4ca637f303e07759223ac3102d61c0795f09c4a0e1c71272eb18"}, "09263dc7-5ba0-475e-9c61-1e8f9a9c9254": {"doc_hash": "312182ace0ed779ad46b0c8f670182bea7efa001779c960702a69abbd5c03dd3"}, "b786c870-3c46-4460-a525-cc11b549529b": {"doc_hash": "89e2aafac62afa185a0170771ed025a6a8bc32c8df4a73d659a3b036123e95dc"}, "bb9edd9d-fb6d-4f41-9e37-aceed259062a": {"doc_hash": "60970278477bee45510f2d22c9f31ac3ea06de95a0bbf46a62073c5f267cdb55"}, "0d3548e4-19ff-4b85-bc27-769c0b36bbcb": {"doc_hash": "a8dee650d2630f7aee584570613ee706fd591b8b5eeb9ace74e14b3f0669b329"}, "f6054698-1ad2-47ac-aeac-2ad85681647f": {"doc_hash": "d49c56f4d25d66d3e307abd99b88e60d5625ed1e6f6c6dcda242e9358dbf3fb5"}, "09557c22-6cf2-4523-a70a-c2fa72f2021b": {"doc_hash": "13d51d540bdc2f539a9e04b3d25b3fd454c4967fbb2e4114392428dc7f724ab0"}, "87449457-f950-473e-ac17-529aec93ebd2": {"doc_hash": "07439448c6f1f61b44959ee75cafece999ce40fc81052910c84d69cd15e6ee9e"}, "e82fa91e-e5e7-4f88-a148-14c5a0a21954": {"doc_hash": "8742a1552e09bd7f32e7e2316c956f447914399259272ec766bb8eedb51abe05"}, "e1f6fb0e-ab72-44d5-8845-96e792f3ab75": {"doc_hash": "05653ccaaae7f7e9f0ffb35332d6d2c5912e538b42075b4c072d20a51fa99e34"}, "693daa0d-a887-4a47-861e-c94ce92ee5e1": {"doc_hash": "0ac0f6f84f504fbe878083a53addd7e6709564d661b34f394a48d0d510e0a07b"}, "0d564e61-8af5-4b60-900c-6781dd7929a4": {"doc_hash": "c66f5c92764817ecde20a04543b5fd4c97c2f2ec1c63cf6f66c316d97ebe8f91"}, "8892c222-0ede-4923-a847-0a5187b1144f": {"doc_hash": "7d60d3a8bcb83418066e5131443e63378eeda43218fd39b769fe833b82452ffd", "ref_doc_id": "9d61c6f2-8604-4b41-ac0f-ee2ef6df8592"}, "4640516e-fc93-439f-91f3-3d610bb01c29": {"doc_hash": "6e8a3c04441c08e507a6056a9e2abada76ebed4b1a5d2616659dd924cfe4d67f", "ref_doc_id": "ce251b4c-9df7-44c9-bb5a-374e063d508f"}, "3923c634-5ce3-40eb-9243-e97835f47535": {"doc_hash": "23b54a810cd47a1ed61dfea5268aed9fdc8a26f5eaa20a7248e60e455cfbc2f4", "ref_doc_id": "e363273c-3e87-473b-9543-1aa7d22404a3"}, "55a0df7b-368f-4565-b2db-00e2918329b0": {"doc_hash": "73673629dbc9d3b7afef0d611c09353e1cd37aa4ed3b7e1dc30ddb03be162192", "ref_doc_id": "24f0a26d-8aef-4ccd-9072-731a413c8c1e"}, "aa04c992-6a59-4a6e-aea9-d38bcd2c3e02": {"doc_hash": "f0d1c21516d58b7b9e01249429bbc7d43fb5fe9845eae127c755f53f5530dd9c", "ref_doc_id": "0449a3ab-6989-4e9b-bac3-04ff9d7f20dc"}, "cc35a92f-238b-442b-8caa-b0c3c27eeeaf": {"doc_hash": "c02db8708c31ef5d199ae1a7bedba98b61baff0a4d6434e4f8dffc9cddac0f3f", "ref_doc_id": "4391ba2a-7344-4a90-848d-24c5f9fdf94f"}, "9b267661-08b9-4fc2-97f8-e5f66ff21a6b": {"doc_hash": "4d24632fe0d3595cc596377e8afe9bfa1d69daa3749de44c1e4b20a74b682da3", "ref_doc_id": "e8266447-b777-4cf4-ab77-9db8de52e865"}, "0fb4eec6-d85d-468a-82ae-6c70da3c12e0": {"doc_hash": "643112d8411403b18c4328f637c253acffe42f2362d7e1a3a1e1495128dfa6ea", "ref_doc_id": "2ddcf355-d117-458f-bbfa-42c3408c9900"}, "e123e9bf-8026-481d-b6eb-6acf94e4b6e5": {"doc_hash": "0ba8ecf1caf5625e73260ff8fa927dab8c5dbb546fc7f68e26df7ebdb641c55d", "ref_doc_id": "45630aed-a817-4c93-8016-4ecf4c219311"}, "8bf0f6f6-28f4-491f-aea2-d93a1d69bd67": {"doc_hash": "d8895375976e08844afb58dc60d247aa5944743e037f6e4ea6ea444000590196", "ref_doc_id": "d973e909-34db-44d2-a76c-b68aa8f072e4"}, "2af4299b-af4b-4b6d-9ab7-5c701c63f8dd": {"doc_hash": "f363040bb55b0f6809d807a9b7520401b283ba85d56105db899a1060539d2b03", "ref_doc_id": "966c39b3-6255-4d7c-8529-5bd5234b5f7a"}, "0c381873-e3b9-491b-8683-9c8864728916": {"doc_hash": "1fbbf45802e08cda0a1423387e9837c7970ecf0198f0b28b893aea5c4c957d2b", "ref_doc_id": "ae172c38-cd30-4d87-9362-7013e9102bcc"}, "204274a2-335f-4644-9f7e-c996d2e0bf0f": {"doc_hash": "299170a225940575f9b5613c55b046259029bc170e8f95ec31084f6577c51b63", "ref_doc_id": "877c10a8-d1bd-4f76-9342-d3347f1bdf49"}, "4e34d45f-6aad-4c1b-9317-d0ba6c05f3c2": {"doc_hash": "942deb914cded2ca68c29d8b3bcf119c27ce332295378b86892c1566b9f97028", "ref_doc_id": "1090ab77-5150-4f66-bfd6-598a862fc82c"}, "81e53a90-7a64-40a7-af17-ba681498800b": {"doc_hash": "f259a0b188db563aa3ccc98165a76319678e15f527a2ecab17ced771c3da5ea7", "ref_doc_id": "97f38d65-7ad4-4b7c-babc-590f860d3600"}, "c059563f-1aa8-4a88-9e30-fc3d02536765": {"doc_hash": "e144568231cfbc87f5fa1921f756fddc4759f35bb006d247845b23dd607825f5", "ref_doc_id": "fecbe22f-2e0c-4881-a059-98d97d0055ac"}, "0492a0df-8138-4a3d-a928-32f085e80c6f": {"doc_hash": "c500b74684b5f86a512ac649469c815298e1abd6bfe9906b564d34e4b2cec219", "ref_doc_id": "9e47fe1e-a426-4948-a421-7b16fa109d5d"}, "826d7af2-c959-4f9e-a9af-2d9a065d6172": {"doc_hash": "d2c2de2d3cbfc579f7fd77596b340c6b8682a8c456ee854029d0eb246c5cb390", "ref_doc_id": "6d5f5988-6a1e-4904-b423-83fb43da8140"}, "45e64969-21fc-4387-9d22-57df1a341392": {"doc_hash": "21aff8fcdd63eb8371e1d2ca96316ac0e2b1bf95afccbd4d896d91368b56a486", "ref_doc_id": "55533469-873e-4d87-82f7-dd42ac7a5525"}, "3e83ab50-7284-4ddf-8f09-2f54955da6e8": {"doc_hash": "9eda8d288b3846e400c30a863f431ccdc05c4a555f4814ffd35b4a0c4911520e", "ref_doc_id": "a292dd57-dc04-4fd5-b0fc-9bedcbb0ab69"}, "d820f5aa-8ffb-4fcb-a8d7-4c0fced9e176": {"doc_hash": "77b470b46e0efbc9663f04b56b7a518b0738fde481f6395f4f3d69b186a197e9", "ref_doc_id": "9232b0c6-73cd-42f2-b657-4ebc385b9be1"}, "03cd0d72-d93f-4f18-8613-10c7c964d673": {"doc_hash": "976c87fbe45f098607324f1c2c06ce9283313cc91e3d248d307d9a5c06e52045", "ref_doc_id": "7a98d8c6-98e4-41dd-8ddc-a65c23b3b72f"}, "002785a6-78d8-4aac-bea0-450359a1fffe": {"doc_hash": "a023d8c47702340038653dbec1bb7a2ab67379647cf2335f92bab5bb7c2f93bd", "ref_doc_id": "85634b0b-cd30-4b69-9f76-f6fbe503a9d7"}, "8ad7f3eb-9e9a-44b7-aa75-02b65930d4df": {"doc_hash": "529f5c472ae579accf2d35f3b2699c78d51e174dd362edcf380ecdd7e48e46c6", "ref_doc_id": "1479dae3-51d9-4e87-a0ff-a24abd10eea6"}, "2f54c930-e030-40de-8c33-5161831ef28a": {"doc_hash": "6dcf9aa1d8a9a695e258e3f28446a9185729c9a30523ccf1a0f754951a8c3812", "ref_doc_id": "a20b9deb-8930-4b39-9d98-3a9e4f1515e6"}, "4cb42c95-ede5-48ef-9abb-6203c22b3621": {"doc_hash": "ec0f3886876d19868c0c2f8d82f0a1c120045f54b0ca113036b71364f7533a11", "ref_doc_id": "ca1003df-6230-496f-8ebd-88bd9aa2bd28"}, "7a305b30-07e9-4aa2-b9ed-2dd30339c0eb": {"doc_hash": "8554c2d853a4813c2893bdf4b5a9147baa178a409c81d4594a72d5cf2b965ab9", "ref_doc_id": "2e9297ae-dbf3-406c-8e73-d302bd7908ec"}, "555b0d04-7dfd-4afd-92f4-91c24668286e": {"doc_hash": "fc41dbaf8cc5459480ed9654acf35373e126994824d75e30a314ed8706f3185e", "ref_doc_id": "c8919d45-2ba5-42f4-a033-0a9e434f7f96"}, "fad95b83-3427-4071-b424-637a3bdd7ba0": {"doc_hash": "dcc76a75568acafc976448919bd447746e9dafcf7ac66fb02dfab2c3139ddea1", "ref_doc_id": "270973d9-3e62-4bfc-8fc9-c085f71278a0"}, "695ea630-8da4-43a5-8fdb-b1413e183f95": {"doc_hash": "5d01f6a75bfa080684fe528a357acd8a34983ff0cb93e0dd606e47adbb0b188e", "ref_doc_id": "4acccff3-2abd-40cd-9ec2-42f61846c412"}, "640ad04b-581e-4a6d-ade6-8b9a5ca7f3f1": {"doc_hash": "f0ad3aba672f9dc386c15c50fb48588e45b0d78e93a442d3737f57479f10e5fa", "ref_doc_id": "8544df16-80ce-4271-ae4d-7bd7e8c46103"}, "0ce9ccad-5bb5-4c51-8c42-33bd5f1959da": {"doc_hash": "d03f03ced4d30d2afbcd391230901236f05ccc758d86c804c2eda77791dd7fe4", "ref_doc_id": "2c21dbe4-13e4-4805-9e38-812931e1aa36"}, "55905983-f154-4a88-b1cb-c935fae12565": {"doc_hash": "305b60c1169a1feb63f47cf4d00218a0b9045c51a5399a351e126920aaa819a3", "ref_doc_id": "c90accd1-f915-4121-90a2-1d81660b90bc"}, "bce3c9bd-5f52-4125-9c36-7a883ed24bce": {"doc_hash": "ce7f4c038da6ec739101a506e3327eb13ea56b4c9cebc07cc0ee6a05db85f030", "ref_doc_id": "91c33dfd-512f-4248-9030-94a40fc90fcc"}, "bd942ac1-c8d3-4079-b067-bc458726fd4d": {"doc_hash": "4d9eba9f587c7ad21d782977759dc7c509051c1263c05c089bb895a724cd73e4", "ref_doc_id": "893687c5-580c-49ad-90bb-0ff3d9c4fd8c"}, "ccfcbfee-6997-4e2b-988a-25ec13c783de": {"doc_hash": "20029688c18e3207e5927d3d7514c5bce817ad9650bfe37cecc170be9b59c492", "ref_doc_id": "1c87bf89-b4f3-4c3f-b455-c865f90f8239"}, "7255651e-02e5-4cb0-b51e-9c010b975b21": {"doc_hash": "ec47b21db3de57d2e5963f02c9c6b8bda7be73d97b57385fb416488b3b15ac46", "ref_doc_id": "e1425a2d-2cdc-4544-8a21-ca69d7eb1cd5"}, "31c9ba57-da88-44ae-95b0-d2557dfeb0c0": {"doc_hash": "cb2903531756654d1334962ed9f9cf087b5bf312004bf4220af5bc522c450689", "ref_doc_id": "dcf158e7-a7bb-41bd-8f04-3cded112e909"}, "c33b5ee5-a06a-4e42-9752-15499a34af95": {"doc_hash": "8d5173eccebd22f82f663e0268139929f6383c9d2ca5bd5fba988637d02dc277", "ref_doc_id": "e9a04748-e20d-4777-85b7-56b8c6b1a2ba"}, "8d34ab33-0bfa-4001-bc87-50794772e57e": {"doc_hash": "6965048d8d45f46d9a4b58e517a9af854da396674d2ac657300f0973d974c702", "ref_doc_id": "9e86f5ca-c655-4ecc-ac4f-e27e411d2cb1"}, "42687f89-9d6d-45ea-936d-f3ff8310053c": {"doc_hash": "f14b186b6fb06766f656a4c980d982915b9544a584a96c373b3e62393c30e007", "ref_doc_id": "4ac4e317-614b-4bcf-91a4-acaa179ebe49"}, "26e893e5-93c7-42c7-8113-56cbda90f287": {"doc_hash": "a4ca0f0fb8dafef47413ad9807d1d8fe024b1c653ac095e20d85fae4fbd579b0", "ref_doc_id": "cdee0d00-5589-471c-a3c4-84e51f986f99"}, "d68e1e14-655e-403e-98b0-3b1568dce68b": {"doc_hash": "549044e2577db5ecbca2a1d217c8925727ecc929f14fe8ead48cd8d9555a4507", "ref_doc_id": "118fe40f-44f2-43ec-84c3-8be09c1bcf0f"}, "0c211020-a7f3-43a7-b6ad-5d2f7876f15a": {"doc_hash": "82a938dfcfbcf9d8671aaf826ab359bd4639759c96d972f10f78104489728e3e", "ref_doc_id": "bf5854cd-492b-4572-a601-899c3ac244c9"}, "26b9d5f2-6fa5-4a23-8d36-185c55877b1c": {"doc_hash": "9ca5c8158c65aac05aca4d64e1422964b163026e77962bdd47cee8c9fc9e115c", "ref_doc_id": "425d2916-e313-4f69-89bd-7aa20bf0cb9c"}, "41f7fe7e-454a-4c76-b461-c23d941c73ed": {"doc_hash": "33dc6c0852b9c5ca31efe3cee525ded3396e4e0ce9b2a58bbc97eddef298a1c4", "ref_doc_id": "dbdb6873-5000-4135-a110-26db79227446"}, "5dea4450-2f46-408e-909d-83d0aabfc8a3": {"doc_hash": "e06cbcf3610ea535d8afe62486a25e413671359c0dac5df37954cefe14d6fa2a", "ref_doc_id": "a05793ba-216a-4e4c-8536-56644448f3cb"}, "6017467d-d056-45a3-8587-0e0a0ce9d8cd": {"doc_hash": "cb8871563dcefd390aff2fe1d4f45997206f00588c0d7c292812a00ec4e1373f", "ref_doc_id": "ccfc5e28-57a6-4d83-8047-0f26408f3690"}, "ede1a952-ed6e-40f2-a79a-bdbcff39a9b4": {"doc_hash": "07ed3ef29af0669358f0c20908ef1243874b5ecc358258b2c85448689070c383", "ref_doc_id": "a464ed99-9f5b-4b1e-8647-cddd1967eb90"}, "7826f417-112b-4bca-9649-c05730c957ee": {"doc_hash": "c5db0becef6ce42597863c6748c10ec396e52d18b174dca5b35cc9005f4b7006", "ref_doc_id": "b1a47164-ab27-4155-9168-3c808525a41a"}, "e3400e93-51c7-450a-b301-4a41ab533dcd": {"doc_hash": "55a33ace2eed2de8b216c89ed641811b9bef6f990241f73e15703c2e997c7be2", "ref_doc_id": "2a53e4fa-419d-43fc-afcc-491ed6df5601"}, "b483e8c8-eec1-4288-a735-80c5347b3f9d": {"doc_hash": "8523c8e6a20be51d775d5caf81932405040cc4db03035e7131b9e7dbfa209ca4", "ref_doc_id": "dc93fe18-0c66-4c5d-8e38-92bf914b6146"}, "56276afa-bb1c-4ebb-9f33-900d442d2afa": {"doc_hash": "82087203eba71f515e453d8598b3b980cf0de299a1f31250547b016f636649a5", "ref_doc_id": "ff7c64ea-384e-4884-bd37-67573fc9ee79"}, "faaa9fd6-80f3-461c-8d65-d2ad28129872": {"doc_hash": "02883f453baab585135dcc98a43e1de7c7a7352fdfd01337561ac9fe7fc1d2e7", "ref_doc_id": "f7dc4cce-2b53-4c6e-94eb-e8ec1eb00931"}, "92ad7149-5706-41bf-8f79-f983b733d9d1": {"doc_hash": "0e98828914ada343488eba930f80b3e5f8214da2537b3bbf89fa16e57ba42cf3", "ref_doc_id": "8d6fd736-f3be-45cf-9d39-d54a9d9c039b"}, "7d1bc1de-7088-4fb1-9c57-2c3f40815862": {"doc_hash": "98150e2c2310f9542a9e592d2dec374922c221c0c83c613c1c51e27f7e1d85cb", "ref_doc_id": "d72dfa1a-3556-4c28-84bd-4772d4928d98"}, "679c7592-d7cd-4744-8dc6-ac1a34709358": {"doc_hash": "e7eb1fe0e1896d9bd6e6a7f64a6293ccc6cfca0e0bc418c712ba1bd2b89a93cd", "ref_doc_id": "a6166d8c-523c-4f09-829d-a1fd54992cf1"}, "e8bf6555-cd7d-496c-bbc9-12f7a9c8062e": {"doc_hash": "a6b28939d71dff275da82ca4ba3b0ef388d4ee7cd695377217b473ee2166e79e", "ref_doc_id": "5fe39b1f-7a9e-4b65-b7ba-806017e296f6"}, "0e1aed08-dbc0-41e1-a573-9d36609f50be": {"doc_hash": "98bab6b963688fadf054b848190dbf4a174ca1987be53db6d2db41d4632ef67d", "ref_doc_id": "68545007-09d2-4a6a-91da-b9046b763d45"}, "1a55ccf5-fdfb-4745-86f9-255a103f086d": {"doc_hash": "1a383318e11394e43b2d3e318bc3c779f7ffd747c2c5aa87c0ebc1a2b2287529", "ref_doc_id": "acb8cdac-f58c-4b23-b37e-f744a5a28c1f"}, "153392bc-1210-4817-be3b-7b9befe14aab": {"doc_hash": "5d21f6a0e9880aa6bff19af3bb756bd79c6ddb955c25f89bf8a88fc0926adba8", "ref_doc_id": "943b4b0e-fb80-4b4c-849b-0d0ed6d08e19"}, "a6fa435f-91b5-4af7-83ec-b29d399eda17": {"doc_hash": "409c2859470c5ea7dc3ac4dc6edbd09268774a18f52238a066e196698b6904f5", "ref_doc_id": "164c62df-9828-405f-ba2c-1b4bbf3113ae"}, "5cea8cc6-15b8-4f14-8ab0-fe95346b4d92": {"doc_hash": "a5eb679ea90bc95b2f0b51521e2383768af79b945b327b153b155d8959aed956", "ref_doc_id": "64a2015c-a7e4-48b4-9b8f-df022c47a765"}, "290b91a4-682b-4224-8691-2c3c4f6fc20c": {"doc_hash": "f798eb8fc9008bcd032b92acbee0e43234a340db450c052d032d8a9725d6c99b", "ref_doc_id": "138c20ad-d539-4462-9922-aa62a7380ae1"}, "80e7459d-f7fc-4e37-aae3-5b19f1ece2da": {"doc_hash": "3c74c7d054557e7868ef0a826409532b9fd55cb6936492543bf88bc65f85d268", "ref_doc_id": "4a7cbe19-8e11-4eed-b807-b1bc8101b988"}, "beb4acf9-29c7-4ef3-bbbe-38385e1f7167": {"doc_hash": "7488fd8a4496ae23a77981ca10e2d3fd4256c2060ce2ac0b491948691b9f70d9", "ref_doc_id": "b5e3b1ec-55f6-4c97-a2c0-3c4fd1f79804"}, "280b632a-ae3a-4f78-abef-d93d56c00cc2": {"doc_hash": "4cf2fc0ff1f650a8ae4af5673c8a18040654fb4a343b5b08918499b158d48e5a", "ref_doc_id": "fd9ec442-0bf5-4f1d-a0e0-85efb1a826e9"}, "a0043f41-92dc-410b-a815-5c937da7597e": {"doc_hash": "72e8dae2a92a0879fd6d8d978f22c4267e0d7f06395bb74605916aac5a9a6e38", "ref_doc_id": "ad28a3d1-5ca4-41f6-b039-c3530f17a35d"}, "a6d1afff-cb9c-4423-ab25-627a925067b8": {"doc_hash": "737a1612a0e53698178df075bd174da5b308521913161b85e989dc2dd757b0c2", "ref_doc_id": "94dae536-6c09-4f7b-92a8-0ee077f40832"}, "ff32a069-2bd7-45b9-b624-9e9eabb9bb9f": {"doc_hash": "6e05979cfc50cbca4f3e6004128e7d4af215098ab46e1dddc2ca3318bf3d7a9b", "ref_doc_id": "4b112aff-f61a-4d51-a586-9c392b92a8da"}, "761b56cc-f4f0-4613-9abb-cf877c814a16": {"doc_hash": "a79e9142adb7e4ebaccea02bb68c8ec04f4d8c88729c614b55b2a9e897e8b922", "ref_doc_id": "90c14fcd-f49a-40eb-890d-34325027c9a0"}, "049855c8-0ea6-4fba-a9e6-74b0db6a56ed": {"doc_hash": "7e636becfeff17fb9cb094dae7810b208a3cd56b6bf43125365b2c0d0c7c15c1", "ref_doc_id": "ceeb0b26-2145-46b5-97d2-4400bef60d5d"}, "84adf935-24f6-4e10-82b0-7d8dbcd4f0c4": {"doc_hash": "9c4ea8245574b8a480c11acd18c4005417577dba2e593f386226ffd7d9341f5e", "ref_doc_id": "1d510e54-9c2c-4e3e-a851-e7bd101b69b3"}, "d1baa26a-cba7-4b47-a3ab-6a255c9afc6d": {"doc_hash": "00c2daf87b7d70d1bd7bb84df743c9712bb7962b2ff0c053afc9a317dc505c92", "ref_doc_id": "ee544ce3-f80b-4517-82be-65a850d8985c"}, "3de89c52-ece8-44bd-9083-166ce1d845a6": {"doc_hash": "4a2ef78f1eed57cc813616dcd7a5d9bfebb85c7dd290479cf05ca139279adbe9", "ref_doc_id": "ca7926e5-8b75-4ef7-9787-af053acae655"}, "4149fdb7-cc71-423c-93d1-2a7f36e3f9f8": {"doc_hash": "47a2fda835da2c71245d484ed08041fbcb3619d040baa98e9755a951ad17c5dd", "ref_doc_id": "2a043ad3-11bd-4796-b770-9d1ccb82132b"}, "fc6005ce-a204-42d3-a672-52205c2503bb": {"doc_hash": "fa793e7e1ef8e37b5e9eb6199c20d12254fc53140b7c7b33cf9aac5a7388a407", "ref_doc_id": "b53e9f65-4a5b-4c44-975e-a41dd3265708"}, "95c1e54c-5403-4e2e-a561-9b69d647d3ec": {"doc_hash": "fb1301182024efe103b5035aee39c6febe507c29449fdbf799aef5e30551d35e", "ref_doc_id": "d6597ce1-5a67-4a51-b2be-b5a6391985d7"}, "10f3a8b3-0c70-47bc-968d-8e10b10c3626": {"doc_hash": "995380da6d6208924d7578b0754570d20766b96b1ee143f5f34ee747f93f4088", "ref_doc_id": "bce5b62c-27ef-43f3-9dba-e943026af709"}, "9d20f52f-ef1f-4c41-ad78-8026a05e34bb": {"doc_hash": "b48fedaaa8dd221c8fad092b5240263471fd35b6e994441ca2be365a401ec3cf", "ref_doc_id": "3495ed92-9cf2-459a-bc2a-3db01a857182"}, "e5126055-ec88-4a7e-b3a7-9e919a483100": {"doc_hash": "5d9bc19da44721e8e5667f04e965a647eaf8bf5153f49d384bef7109faf3cf47", "ref_doc_id": "09263dc7-5ba0-475e-9c61-1e8f9a9c9254"}, "1b0fd20e-5724-4427-b677-dd9f43e06532": {"doc_hash": "d22f59278182b41ec42c9fab8700aadc802c5b8dc399353cbaf0619d69a7a2f8", "ref_doc_id": "b786c870-3c46-4460-a525-cc11b549529b"}, "f79e526a-cfd9-4758-9a20-b36455c6822a": {"doc_hash": "3805e18b18ac0046c2baf490300649d7498e985e4b5c53c0b9b8fdbd82e0f421", "ref_doc_id": "bb9edd9d-fb6d-4f41-9e37-aceed259062a"}, "9babfb0a-7d1a-47da-81c2-f0d18ee99915": {"doc_hash": "6e3b268deb228caf8a9eed6d6861a72f9e2fdcf8765c3232adc782115cc2099d", "ref_doc_id": "0d3548e4-19ff-4b85-bc27-769c0b36bbcb"}, "b79d263a-4cff-4f78-81da-74fefa41874a": {"doc_hash": "0c8a2e94e9ee51e8dda5e649368695367e146fc5177e4524be16c008d7290a6c", "ref_doc_id": "f6054698-1ad2-47ac-aeac-2ad85681647f"}, "22bff443-9e44-4ee2-a0a6-c03e47daa047": {"doc_hash": "09a199528a82faf9f8bcdc843878e61c2ecd9b33732b147437f12c60a9d5ce5f", "ref_doc_id": "09557c22-6cf2-4523-a70a-c2fa72f2021b"}, "91ff2c12-f59b-496f-a927-c9176e750838": {"doc_hash": "8fbd82e5e5be733b7e1f550ef90bcfc78532d59da4edf32386c9bd4bd18cb48c", "ref_doc_id": "87449457-f950-473e-ac17-529aec93ebd2"}, "d17e1ae1-4ecf-4ac9-8963-e8054bb874d2": {"doc_hash": "a5a48af71fbfb48238f12fdf321f8bbf19b699a3cc9dd36e27aa19919562880a", "ref_doc_id": "e82fa91e-e5e7-4f88-a148-14c5a0a21954"}, "969a4d17-7fbe-475f-9e58-c2c6b497074c": {"doc_hash": "a295c85a3fdc5555d5fb80d6df512d340391d9bca7117d6805d6abbeda0b3ce8", "ref_doc_id": "e1f6fb0e-ab72-44d5-8845-96e792f3ab75"}, "5d88f41b-c16e-4f6b-879f-6c18eb4c3daf": {"doc_hash": "474171fa7722366c4bf539e1424a79457bcaeeee6a5ab5e1c620f5bae41d66e1", "ref_doc_id": "693daa0d-a887-4a47-861e-c94ce92ee5e1"}, "e63fd2a1-f085-4c26-a679-27ebae1ee705": {"doc_hash": "1cfa1da16369ec93399bcf44aa5d0c176d103e650eefb786b732512fe33f6cca", "ref_doc_id": "0d564e61-8af5-4b60-900c-6781dd7929a4"}}, "docstore/data": {"8892c222-0ede-4923-a847-0a5187b1144f": {"__data__": {"id_": "8892c222-0ede-4923-a847-0a5187b1144f", "embedding": null, "metadata": {"page_label": "1", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d61c6f2-8604-4b41-ac0f-ee2ef6df8592", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "6653af918adfb4756a9e8afa08098b8eb605cc012df47f99e61b6a278df773b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Ethereum White Paper   \nA NEXT GENERATION SMART CONTRACT & DECENTRALIZED APPLICATION PLATFORM \nBy Vitalik Buterin \n \nWhen Satoshi Nakamoto first set the Bitcoin blockchain into motion in January 2009, he was                \nsimultaneously introducing two radical and untested concepts. The first is the \"bitcoin\", a decentralized              \npeer-to-peer online currency that maintains a value without any backing, intrinsic value or central issuer. So                \nfar, the \"bitcoin\" as a currency unit has taken up the bulk of the publicattention, bothintermsofthepolitical                      \naspects of a currency without a central bank and its extreme upward and downward volatility in price.                 \nHowever, there is also another, equally important, parttoSatoshi'sgrandexperiment: theconceptofaproofof                  \nwork-basedblockchaintoallowforpublicagreementontheorderoftransactions. Bitcoinasanapplicationcan                 \nbe described as a first-to-file system: if one entityhas50BTC, andsimultaneouslysendsthesame50BTCto                    \nAand to B, only the transaction that getsconfirmedfirstwill process. Thereisnointrinsicwayofdetermining                    \nfromtwo transactions which came earlier, and for decades this stymied the development of decentralized               \ndigital currency. Satoshi's blockchain was the first credible decentralized solution. And now, attention is              \nrapidly startingtoshifttowardthissecondpartofBitcoin'stechnology, andhowtheblockchainconceptcanbe                  \nused for more than just money. \nCommonly cited applications include using on-blockchain digital assets to represent customcurrenciesand             \nfinancial instruments (\"colored coins\"), the ownership of an underlying physical device (\"smart property\"),             \nnon-fungible assets such as domain names (\"Namecoin\") as well as more advanced applications such as               \ndecentralized exchange, financial derivatives, peer-to-peer gambling and on-blockchain identity and          \nreputation systems. Another important area of inquiry is \"smart contracts\" - systems which automatically              \nmovedigital assetsaccordingtoarbitrarypre-specifiedrules. Forexample, onemighthaveatreasurycontract                \nof the form\"Acan withdrawup to Xcurrency units per day, Bcan withdrawuptoYperday, AandBtogether                         \ncan withdraw anything, and A can shut off B's ability to withdraw\". The logical extension of this is                  \ndecentralized autonomous organizations (DAOs) - long-termsmart contracts that contain the assets and             \nencode the bylaws of an entire organization. What Ethereumintends toprovideisablockchainwithabuilt-in                  \nfully fledged Turing-complete programminglanguagethatcanbeusedtocreate\"contracts\"thatcanbeused                \nto encode arbitrary state transition functions, allowinguserstocreateanyofthesystemsdescribedabove, as                 \nwell as many others that we have not yet imagined, simply by writing up the logic in a few lines of code. \n \n \nPage 1 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 3128, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4640516e-fc93-439f-91f3-3d610bb01c29": {"__data__": {"id_": "4640516e-fc93-439f-91f3-3d610bb01c29", "embedding": null, "metadata": {"page_label": "2", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce251b4c-9df7-44c9-bb5a-374e063d508f", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "0f89c927cf6aad6b9b46ae3d70c7ee642923928e917f4d39df0ee5c1beb30add", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Table of contents \n  \n\u25cf History \n\u25cb Bitcoin As A State Transition System \n\u25cb Mining \n\u25cb Merkle Trees \n\u25cb Alternative Blockchain Applications \n\u25cb Scripting \n\u25cf Ethereum \n\u25cb Ethereum Accounts \n\u25cb Messages and Transactions \n\u25cb Ethereum State Transition Function \n\u25cb Code Execution \n\u25cb Blockchain and Mining \n\u25cf Applications \n\u25cb Token Systems \n\u25cb Financial derivatives \n\u25cb Identity and Reputation Systems \n\u25cb Decentralized File Storage \n\u25cb Decentralized Autonomous Organizations \n\u25cb Further Applications \n\u25cf Miscellanea And Concerns \n\u25cb Modified GHOST Implementation \n\u25cb Fees \n\u25cb Computation And Turing-Completeness \n\u25cb Currency And Issuance \n\u25cb Mining Centralization \n\u25cb Scalability \n\u25cf Putting It All Together: Decentralized Applications \n\u25cf Conclusion \n\u25cf References and Further Reading \n \n \nPage 2 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 786, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3923c634-5ce3-40eb-9243-e97835f47535": {"__data__": {"id_": "3923c634-5ce3-40eb-9243-e97835f47535", "embedding": null, "metadata": {"page_label": "3", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e363273c-3e87-473b-9543-1aa7d22404a3", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "022e1565ca8013909e7339b26eb2e1e6242796212d395ee51fc9b45d5d35405a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 3 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 26, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55a0df7b-368f-4565-b2db-00e2918329b0": {"__data__": {"id_": "55a0df7b-368f-4565-b2db-00e2918329b0", "embedding": null, "metadata": {"page_label": "4", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "24f0a26d-8aef-4ccd-9072-731a413c8c1e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "b675bb01bfb7631b1ac9949d845c24431dd696e911a8d473796477c69c07738e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "History \nThe concept of decentralizeddigital currency, aswell asalternativeapplicationslikepropertyregistries,              \nhas been around for decades. The anonymous e-cash protocols of the1980sandthe1990s, mostly                \nreliant onacryptographicprimitiveknownasChaumianblinding, providedacurrencywithahighdegree                \nof privacy, but the protocols largely failed to gain traction because of their reliance on a centralized                 \nintermediary. In 1998, Wei Dai's b-money became the first proposal to introduce the idea of creating                \nmoney through solving computational puzzles as well as decentralized consensus, but theproposal             \nwas scant on details as to howdecentralized consensus couldactually beimplemented. In2005, Hal                \nFinney introduced a concept of \"reusable proofs of work\", a systemwhich uses ideas fromb-money                \ntogether with Adam Back's computationally difficult Hashcash puzzles to create a concept for a              \ncryptocurrency, but once again fell short of the ideal by relying on trusted computing as a backend. \nBecause currency is a first-to-file application, where the order of transactions is often of critical               \nimportance, decentralizedcurrenciesrequireasolutiontodecentralizedconsensus.Themainroadblock            \nthat all pre-Bitcoin currency protocols facedisthefact that, whiletherehadbeenplenty of researchon                  \ncreating secure Byzantine-fault-tolerant multiparty consensus systems for many years, all of the            \nprotocolsdescribedweresolvingonlyhalfoftheproblem.Theprotocolsassumedthatall participantsin                \nthe systemwere known, and produced security margins of the form\"if N parties participate, then the                 \nsystemcantolerateuptoN/4maliciousactors\".Theproblemis, however, thatinananonymoussetting                 \nsuch security margins are vulnerable to sybil attacks, where a single attacker creates thousands of               \nsimulated nodes on a server or botnet and uses these nodes to unilaterally secure a majority share. \nThe innovation provided by Satoshi is the idea of combining a very simple decentralized consensus               \nprotocol, based on nodes combining transactions into a \"block\" every ten minutes creating an              \never-growing blockchain, with proof of work as a mechanismthrough which nodes gain the right to                \nparticipate in the system. While nodes with a large amount of computational power do have               \nproportionately greater influence, coming up with more computational power than the entire network             \ncombined is much harder than simulating a million nodes. Despite the Bitcoin blockchain model's              \ncrudenessandsimplicity, it hasproventobegoodenough, andwouldover thenext fiveyearsbecome                  \nthe bedrock of over two hundred currencies and protocols around the world. \n \n \nPage 4 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2980, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa04c992-6a59-4a6e-aea9-d38bcd2c3e02": {"__data__": {"id_": "aa04c992-6a59-4a6e-aea9-d38bcd2c3e02", "embedding": null, "metadata": {"page_label": "5", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0449a3ab-6989-4e9b-bac3-04ff9d7f20dc", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "89b2cbd818aff0396fe1cc3dd0569229d599524daa97cfb9e57f3af76b4708ff", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Bitcoin As A State Transition System \n \nFroma technical standpoint, the Bitcoin ledger can be thoughtofasastatetransitionsystem, wherethereis                   \na \"state\" consisting of the ownership statusofall existingbitcoinsanda\"statetransitionfunction\"thattakes                  \na state and a transaction and outputs a new state which is the result. In a standard banking system, for                    \nexample, the state is a balance sheet, a transaction is a request to move $X fromA to B, and the state                      \ntransition function reduces the value in A's account by$XandincreasesthevalueinB'saccountby$X. IfA's                     \naccount has less than $X in the first place, the state transition function returns an error. Hence, one can                   \nformally define: \nA P P L Y ( S , T X ) \u00a0 \u00ad > \u00a0 S ' \u00a0 o r \u00a0 E R R O R  \n \nIn the banking system defined above: \nA P P L Y ( { A l i c e : $ 5 0 , B o b : $ 5 0 } , \" s e n d $ 2 0 f r o m A l i c e t o B o b \" ) = { A l i c e : $ 3 0 ,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\nB o b : \u00a0 $ 7 0 \u00a0 }  \n \nBut: \nA P P L Y ( { \u00a0 A l i c e : \u00a0 $ 5 0 , \u00a0 B o b : \u00a0 $ 5 0 \u00a0 } , \" s e n d \u00a0 $ 7 0 \u00a0 f r o m \u00a0 A l i c e \u00a0 t o \u00a0 B o b \" ) \u00a0 = \u00a0 E R R O R \u00a0\n\u00a0\nThe \"state\" in Bitcoin is the collection of all coins (technically, \"unspent transaction outputs\" or UTXO) that                 \nhave been minted and not yet spent, with each UTXO having a denomination and an owner (defined by a                   \n20-byte address which is essentially a cryptographic public key[1]). Atransactioncontainsoneormoreinputs,                \nwith each input containing a reference to an existing UTXOand a cryptographic signature produced by the                 \nprivate key associated with the owner's address, and oneormoreoutputs, witheachoutputcontaininganew                  \nUTXO to be added to the state. \n \n \nPage 5 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1883, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cc35a92f-238b-442b-8caa-b0c3c27eeeaf": {"__data__": {"id_": "cc35a92f-238b-442b-8caa-b0c3c27eeeaf", "embedding": null, "metadata": {"page_label": "6", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4391ba2a-7344-4a90-848d-24c5f9fdf94f", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "eb54c79cdbe5109bafe3b9d14d91b2ac87363fff4369ffad97177eb426b07244", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The state transition function A P P L Y ( S , T X ) \u00a0 \u00ad > \u00a0 S ' \u00a0 can be defined roughly as follows: \n1. For each input in TX: \ni. If the referenced UTXO is not in S, return an error. \nii. If the provided signature does not match the owner of the UTXO, return an error. \n2. If the sumof the denominations ofall inputUTXOislessthanthesumofthedenominationsof                   \nall output UTXO,  return an error. \n3. Return S with all input UTXO removed and all output UTXO added. \nThe first half of the first step prevents transaction senders fromspending coins that do notexist, thesecond                   \nhalf of the first step prevents transaction senders fromspending other people's coins, and the second step                 \nenforces conservation of value. In ordertousethisforpayment, theprotocol isasfollows. SupposeAlicewants                   \nto send 11.7 BTCto Bob. First, Alicewill lookforasetofavailableUTXOthatsheownsthattotalsuptoatleast                         \n11.7 BTC. Realistically, Alice will not be able to get exactly 11.7 BTC; say that the smallest she can get is                     \n6+4+2=12. She thencreatesatransactionwiththosethreeinputsandtwooutputs. Thefirstoutputwill be11.7                   \nBTCwith Bob's address as its owner, and the second output will be the remaining0.3BTC\"change\", withthe                    \nowner being Alice herself. \n \nMining \nIf we had access to a trustworthy centralized service, this systemwould be trivial to implement; it                 \ncould simply be coded exactly as described. However, with Bitcoin we are trying to build a                \ndecentralized currency system, so we will need to combine the state transition system with a               \nconsensus systemin order to ensure that everyone agrees on the order of transactions. Bitcoin's               \ndecentralized consensus process requires nodes in the network to continuously attempt to produce             \npackages of transactions called \"blocks\". Thenetworkisintendedtoproduceroughlyoneblockevery               \nten minutes, with each block containing a timestamp, a nonce, a reference to (ie. hash of) the                 \n \nPage 6 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2185, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9b267661-08b9-4fc2-97f8-e5f66ff21a6b": {"__data__": {"id_": "9b267661-08b9-4fc2-97f8-e5f66ff21a6b", "embedding": null, "metadata": {"page_label": "7", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8266447-b777-4cf4-ab77-9db8de52e865", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "26dcafc4ea459bc6c1737b9d4ae7971d30de43cab9cbd419aa91339f4a9b4637", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "previous block and a list of all of the transactions that have taken place since the previous block.                  \nOver time, this creates a persistent, ever-growing, \"blockchain\" that constantly updates to represent             \nthe latest state of the Bitcoin ledger. \n \nThe algorithm for checking if a block is valid, expressed in this paradigm, is as follows: \n1. Check if the previous block referenced by the block exists and is valid \n2. Check that the timestamp of the block is greater than that of thepreviousblock[2] andlessthan2                   \nhours into the future. \n3. Check that the proof of work on the block is valid. \n4. Let S[0] be the state at the end of the previous block. \n5. Suppose TX is the block's transaction list with n transactions. For all i in 0...n-1, setS[i+1] =                 \nAPPLY(S[i],TX[i]) If any application returns an error, exit and return false. \n6. Return true, and register S[n] as the state at the end of this block \n \nEssentially, each transaction in the block must provide a state transition that is valid. Note that thestateis                   \nnot encoded in the block in any way; it ispurelyanabstractiontoberememberedbythevalidatingnodeand                     \ncan only be (securely) computed for any block by starting fromthe genesis state and sequentially applying                 \neverytransactionineveryblock. Additionally, notethattheorderinwhichtheminerincludestransactionsinto                 \nthe block matters; if there are two transactions Aand Bin a block such that Bspends a UTXOcreatedbyA,                       \nthen the block will be valid if A comes before B but not otherwise. \nThe interesting part of the block validation algorithmistheconceptof\"proofofwork\": theconditionisthatthe                    \nSHA256 hash of every block, treated as a 256-bit number, must be less than a dynamically adjustedtarget,                  \nwhich as of the time of this writing is approximately 2190. The purpose of this is to make block creation                    \ncomputationally \"hard\", thereby preventing sybil attackers fromremaking the entireblockchainintheirfavor.              \nBecause SHA256 is designedtobeacompletelyunpredictablepseudorandomfunction, theonlywaytocreate                \na valid blockissimplytrial anderror, repeatedlyincrementingthenonceandseeingifthenewhashmatches.                   \nAt the current target of 2192, this means an average of 264 tries; in general, thetargetisrecalibratedbythe                     \nnetwork every 2016 blocks so that on average a newblockisproducedbysomenodeinthenetworkeveryten                     \nminutes. In order to compensate miners for this computational work, the miner of every block is entitled to                  \ninclude a transaction giving themselves 25 BTCout of nowhere. Additionally, ifanytransactionhasahigher                 \ntotal denomination in its inputs than in its outputs, the difference also goes to the miner as a \"transaction                   \nfee\". Incidentally, this is also the only mechanismby which BTCare issued; the genesis state contained no                  \ncoins at all. \n \n \nPage 7 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3162, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0fb4eec6-d85d-468a-82ae-6c70da3c12e0": {"__data__": {"id_": "0fb4eec6-d85d-468a-82ae-6c70da3c12e0", "embedding": null, "metadata": {"page_label": "8", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ddcf355-d117-458f-bbfa-42c3408c9900", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "29e102eaebfa1f7acbc8de1ed92a062d0ed583c60c5041af94055ca87183b4ea", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In order to better understand the purpose of mining, let usexaminewhathappensintheeventofamalicious                    \nattacker. Since Bitcoin's underlying cryptographyisknowntobesecure, theattackerwill targettheonepartof                  \nthe Bitcoin systemthat is not protected by cryptography directly: the order of transactions. The attacker's                \nstrategy is simple: \n1. Send 100 BTC to a merchant in exchange for some product (preferably a rapid-delivery digital               \ngood) \n2. Wait for the delivery of the product \n3. Produce another transaction sending the same 100 BTC to himself \n4. Try to convince the network that his transaction to himself was the one that came first. \nOnce step (1) has taken place, after a few minutes some miner will include the transaction in a block, say                    \nblocknumber270000. Afteraboutonehour, fivemoreblockswill havebeenaddedtothechainafterthatblock,                    \nwith each of those blocks indirectly pointing to the transaction and thus \"confirming\" it. At this point, the                  \nmerchant will acceptthepaymentasfinalizedanddelivertheproduct; sinceweareassumingthisisadigital                   \ngood, delivery is instant. Now, the attacker creates anothertransactionsendingthe100BTCtohimself. Ifthe                  \nattacker simply releases it into the wild, the transaction will not be processed; miners will attempt to run                  \nAPPLY(S,TX) and notice that TXconsumes a UTXOwhich is no longer in the state. So instead, the attacker                   \ncreates a \"fork\" of the blockchain, starting by mining another version of block 270000 pointing to the same                  \nblock 269999 as a parent but with the new transaction in place of the old one. Because the block data is                     \ndifferent, this requires redoing theproofofwork. Furthermore, theattacker'snewversionofblock270000hasa                  \ndifferent hash, so the original blocks 270001 to 270005 do not \"point\" to it; thus, the original chain and the                    \nattacker's new chain are completely separate. The rule is that in a fork the longest blockchain (ie. the one                   \nbacked by the largest quantity of proof of work) is taken to be thetruth, andsolegitimateminerswill workon                      \nthe 270005 chain while the attacker alone is working on the 270000 chain. Inorderfortheattackertomake                    \nhis blockchain the longest, he would need to have more computational power than the rest of the network                  \ncombined in order to catch up (hence, \"51% attack\"). \n \n \n \n \n \n \nPage 8 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2658, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e123e9bf-8026-481d-b6eb-6acf94e4b6e5": {"__data__": {"id_": "e123e9bf-8026-481d-b6eb-6acf94e4b6e5", "embedding": null, "metadata": {"page_label": "9", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45630aed-a817-4c93-8016-4ecf4c219311", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "8e28594b54db5fa3e55d7fb11947a23ba6e9862772ff1aaa44f26f546c977cd1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Merkle Trees \nLeft: it suffices to present only a small number of nodes in a Merkle tree to give a proof of the validity of a branch. \nRight: any attempt to change any part of the Merkle tree will eventually lead to an inconsistency somewhere up the                    \nchain. \n \n \nAn important scalabilityfeatureofBitcoinisthattheblockisstoredinamulti-level datastructure. The\"hash\"                   \nof a block is actually only the hash of the block header, a roughly 200-byte piece of data that contains the                     \ntimestamp, nonce, previous block hashandtheroothashofadatastructurecalledtheMerkletreestoringall                   \ntransactions in the block.  \nA Merkle tree is a type of binary tree, composed of a set of nodes with a large number of leaf nodes at the                        \nbottomof the treecontainingtheunderlyingdata, asetofintermediatenodeswhereeachnodeisthehashof                    \nits two children, and finally a single root node, also formedfromthehashofitstwochildren, representingthe                    \n\"top\" of thetree. ThepurposeoftheMerkletreeistoallowthedatainablocktobedeliveredpiecemeal: anode                        \ncan download only the header of a block fromone source, the small part of the tree relevant to themfrom                     \n \nPage 9 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 1324, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8bf0f6f6-28f4-491f-aea2-d93a1d69bd67": {"__data__": {"id_": "8bf0f6f6-28f4-491f-aea2-d93a1d69bd67", "embedding": null, "metadata": {"page_label": "10", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d973e909-34db-44d2-a76c-b68aa8f072e4", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "752043bd9a18e40fd28e3fc47de7ae2242388320717a1aa00e3cca9ebd3e28e8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "another source, and still be assured that all of the data is correct. The reasonwhythisworksisthathashes                     \npropagate upward: if a malicious user attemptstoswapinafaketransactionintothebottomofaMerkletree,                    \nthis change will cause a change in the node above, and then a change in the node above that, finally                    \nchanging the root of the tree and therefore the hash of the block, causing the protocol to register it as a                     \ncompletely different block (almost certainly with an invalid proof of work). \nThe Merkle tree protocol is arguably essential to long-termsustainability. A\"full node\" intheBitcoinnetwork,                 \none that stores and processes the entirety of every block, takes up about 15 GBof disk space in the Bitcoin                     \nnetworkasofApril 2014, andisgrowingbyoveragigabytepermonth. Currently, thisisviableforsomedesktop                     \ncomputers and not phones, andlateroninthefutureonlybusinessesandhobbyistswill beabletoparticipate.                   \nA protocol known as \"simplified payment verification\" (SPV) allows for another class of nodes to exist, called                 \n\"light nodes\", which download the block headers, verify the proof of work on the block headers, and then                  \ndownload only the \"branches\" associated with transactionsthatarerelevanttothem. Thisallowslightnodes                \nto determine with a strong guarantee of security whatthestatusofanyBitcointransaction, andtheircurrent                  \nbalance, is while downloading only a very small portion of the entire blockchain. \nAlternative Blockchain Applications \nThe idea of taking the underlyingblockchainideaandapplyingittootherconceptsalsohasalonghistory. In                    \n2005, Nick Szabo came out with the concept of \"secure property titles with owner authority\", a document                 \ndescribing how\"newadvancesinreplicateddatabasetechnology\"will allowforablockchain-basedsystemfor               \nstoring a registry of who owns what land, creating an elaborate framework including concepts such as                \nhomesteading, adverse possession and Georgian land tax. However, there was unfortunately no effective             \nreplicated database systemavailable at the time, and so the protocol was never implemented in practice.                \nAfter 2009, however, once Bitcoin's decentralized consensus was developed a number of alternative             \napplications rapidly began to emerge: \n\u25cf Namecoin - created in 2010, Namecoin is best described as a decentralized name registration              \ndatabase. In decentralized protocols like Tor, Bitcoin andBitMessage, thereneedstobesomeway               \nof identifying accounts so thatotherpeoplecaninteractwiththem, butinall existingsolutionsthe                 \nonly kind of identifier available is a pseudorandom hash         \nlike1LW79wp5ZBqaHW1jL5TCiBCrhQYtHagUWy. Ideally, one would like to be able to have an           \naccount with a name like \"george\". However, the problem is that if one person can create an                 \naccount named \"george\" then someone else can use the same process to register \"george\" for               \nthemselves as well and impersonate them. The only solution is a first-to-file paradigm, wherethe               \nfirst registrant succeeds andthesecondfails- aproblemperfectlysuitedfortheBitcoinconsensus                \nprotocol. Namecoin is the oldest, and most successful, implementation of a name registration             \nsystem using such an idea. \n\u25cf Colored coins - the purpose of colored coins is toserveasaprotocol toallowpeopletocreatetheir                    \nown digital currencies - or, in the important trivial case of a currency withoneunit, digital tokens,                  \n \nPage 10 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3842, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2af4299b-af4b-4b6d-9ab7-5c701c63f8dd": {"__data__": {"id_": "2af4299b-af4b-4b6d-9ab7-5c701c63f8dd", "embedding": null, "metadata": {"page_label": "11", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "966c39b3-6255-4d7c-8529-5bd5234b5f7a", "node_type": "4", "metadata": {"page_label": "11", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "110dfd18e51477b1a427fc13f1bca624395a2b8772e88033f441da9a87c552ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "on the Bitcoin blockchain. In the colored coins protocol, one \"issues\" a newcurrency by publicly                \nassigning a color to a specific Bitcoin UTXO, and the protocol recursivelydefinesthecolorofother                 \nUTXO to be the same as the color of the inputs that the transaction creating themspent (some                  \nspecial rules apply in the case of mixed-color inputs). This allows users to maintain wallets               \ncontaining only UTXO of a specific color and send them around much like regular bitcoins,               \nbacktracking through the blockchain to determine the color of any UTXO that they receive. \n\u25cf Metacoins - the idea behind a metacoin is to have a protocol that lives on top of Bitcoin, using                   \nBitcoin transactionstostoremetacointransactionsbuthavingadifferentstatetransitionfunction,             \nAPPLY'. Because the metacoin protocol cannot prevent invalid metacoin transactions from           \nappearing in the Bitcoin blockchain, a rule is added that if APPLY'(S,TX) returns an error, the                \nprotocol defaults to APPLY'(S,TX) = S. This provides an easy mechanismfor creating anarbitrary               \ncryptocurrency protocol, potentially with advanced features that cannot be implemented inside of            \nBitcoinitself, butwithaverylowdevelopmentcostsincethecomplexitiesofminingandnetworking                \nare already handled by the Bitcoin protocol. \nThus, in general, there are two approaches toward building a consensus protocol: building an independent               \nnetwork, and building a protocol on top of Bitcoin. The former approach, while reasonably successful in the                 \ncase of applications like Namecoin, is difficult to implement; each individual implementation needs to              \nbootstrap an independent blockchain, as well asbuildingandtestingall ofthenecessarystatetransitionand                 \nnetworking code. Additionally, we predict that the set of applications for decentralized consensustechnology              \nwill followa power lawdistribution where the vast majority of applications would betoosmall towarranttheir                   \nown blockchain, and we note that there exist large classes of decentralized applications, particularly              \ndecentralized autonomous organizations, that need to interact with each other. \nThe Bitcoin-based approach, on the other hand, has the flawthat it does not inherit the simplified payment                  \nverification features of Bitcoin. SPV works for Bitcoin because it can use blockchain depth as a proxy for                  \nvalidity; at some point, once the ancestorsofatransactiongofarenoughback, itissafetosaythattheywere                      \nlegitimately part ofthestate. Blockchain-basedmeta-protocols, ontheotherhand, cannotforcetheblockchain               \nnot to include transactions that are not valid within the context of their own protocols. Hence, a fully secure                   \nSPV meta-protocol implementation would need to backward scan all the way to the beginning of the Bitcoin                 \nblockchain to determine whether ornotcertaintransactionsarevalid. Currently, all \"light\"implementationsof               \nBitcoin-based meta-protocols rely on a trusted server to provide thedata, arguablyahighlysuboptimal result                \nespecially when one of the primary purposes of a cryptocurrency is to eliminate the need for trust. \nScripting \nEven without any extensions, theBitcoinprotocol actuallydoesfacilitateaweakversionofaconceptof\"smart                  \ncontracts\". UTXO in Bitcoin can be owned not just by a public key, but also by a more complicated script                    \nexpressed in a simple stack-based programming language. In this paradigm, a transaction spending that              \nUTXOmust provide data that satisfies the script. Indeed, even the basic public keyownershipmechanismis                 \n \nPage 11 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3973, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0c381873-e3b9-491b-8683-9c8864728916": {"__data__": {"id_": "0c381873-e3b9-491b-8683-9c8864728916", "embedding": null, "metadata": {"page_label": "12", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae172c38-cd30-4d87-9362-7013e9102bcc", "node_type": "4", "metadata": {"page_label": "12", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "6ea3a3e8e05ea4c1379cf86e3bf37b7e0cd1c9286d164535c656a56b4c8fa8c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "implemented via a script: the script takes an elliptic curve signature as input, verifies it against the                 \ntransaction and the address that owns the UTXO, and returns 1 if the verification is successful and 0                  \notherwise. Other, more complicated, scripts exist for various additional use cases. For example, one can               \nconstruct a script that requires signaturesfromtwooutofagiventhreeprivatekeystovalidate(\"multisig\"), a                   \nsetup useful for corporate accounts, secure savings accounts and some merchantescrowsituations. Scripts              \ncan also be usedtopaybountiesforsolutionstocomputational problems, andonecanevenconstructascript                   \nthat says something like \"this Bitcoin UTXOisyoursifyoucanprovideanSPVproofthatyousentaDogecoin                     \ntransaction of this denomination to me\", essentially allowing decentralized cross-cryptocurrency exchange. \nHowever, the scripting language as implemented in Bitcoin has several important limitations: \n\u25cf Lack of Turing-completeness - that is to say, whilethereisalargesubsetofcomputation                \nthat the Bitcoin scripting language supports, it does not nearly support everything. The main              \ncategory that is missing is loops. This is done to avoid infiniteloopsduringtransactionverification;                \ntheoretically it is a surmountable obstacle for script programmers, since any loop can besimulated               \nby simply repeating the underlying code many times withanifstatement, butitdoesleadtoscripts                  \nthat are very space-inefficient. For example, implementing an alternative elliptic curve signature            \nalgorithm would likely require 256 repeated multiplication rounds all individually included in the             \ncode. \n\u25cf Value-blindness - there is no way for a UTXOscript to provide fine-grainedcontrol overthe                \namount that can be withdrawn. For example, one powerful usecaseofanoraclecontractwouldbea                  \nhedging contract, where AandBputin$1000worthofBTCandafter30daysthescriptsends$1000                    \nworth of BTCto Aand the rest to B. This would require an oracle to determine the value of1BTCin                       \nUSD, buteventhenitisamassiveimprovementintermsoftrustandinfrastructurerequirementover                 \nthe fully centralized solutions that are available now. However, because UTXOareall-or-nothing, the              \nonly way to achieve this is through the very inefficient hack of having many UTXO of varying                 \ndenominations (eg. one UTXOof 2k for every k up to 30) and having the oracle pick which UTXOto                    \nsend to A and which to B. \n\u25cf Lack of state - UTXOcaneitherbespentorunspent; thereisnoopportunityformulti-stage                 \ncontracts or scripts which keep any other internal state beyond that. This makes it hard to make                 \nmulti-stageoptionscontracts, decentralizedexchangeoffersortwo-stagecryptographiccommitment          \nprotocols (necessary for secure computational bounties). It also means that UTXOcanonlybeused               \nto build simple, one-off contracts and not more complex \"stateful\" contracts such as decentralized              \norganizations, and makes meta-protocols difficult to implement. Binary state combined with           \nvalue-blindness also mean that another important application, withdrawal limits, is impossible. \n\u25cf Blockchain-blindness - UTXOare blindtoblockchaindatasuchasthenonceandprevious              \nhash. This severely limits applications in gambling, and several other categories, by depriving the              \nscripting language of a potentially valuable source of randomness. \n \nPage 12 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3762, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "204274a2-335f-4644-9f7e-c996d2e0bf0f": {"__data__": {"id_": "204274a2-335f-4644-9f7e-c996d2e0bf0f", "embedding": null, "metadata": {"page_label": "13", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "877c10a8-d1bd-4f76-9342-d3347f1bdf49", "node_type": "4", "metadata": {"page_label": "13", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "950e6965b8af67d02da0bcc53aa64e562c622d6db0d2cba59f317d1804d5a9f4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Thus, we see three approaches to building advanced applications on top of cryptocurrency: building a new                \nblockchain, using scripting on top of Bitcoin, and building a meta-protocol on top of Bitcoin. Building a new                  \nblockchain allows for unlimited freedomin building a feature set, but at the cost of development time and                  \nbootstrapping effort. Using scripting is easy to implement and standardize, but is very limited in its                \ncapabilities, and meta-protocols, while easy, suffer fromfaultsinscalability. WithEthereum, weintendtobuild                \na generalized framework that can provide the advantages of all three paradigms at the same time. \n \nEthereum \nThe intent ofEthereumistomergetogetherandimproveupontheconceptsofscripting, altcoinsandon-chain                  \nmeta-protocols, and allow developers to create arbitrary consensus-based applications that have the            \nscalability, standardization, feature-completeness, ease of development and interoperability offered by these           \ndifferent paradigms all at the same time. Ethereumdoes this by building what is essentially the ultimate                 \nabstract foundational layer: a blockchain with a built-in Turing-complete programming language, allowing            \nanyone to write smart contracts and decentralized applications where they can create their own arbitrary               \nrules for ownership, transaction formats and statetransitionfunctions. Abare-bonesversionofNamecoincan               \nbe written intwolinesofcode, andotherprotocolslikecurrenciesandreputationsystemscanbebuiltinunder                    \ntwenty. Smart contracts, cryptographic \"boxes\" that contain value and only unlockitifcertainconditionsare                \nmet, can also be built on top of our platform, with vastly more power than that offered by Bitcoin scripting                    \nbecause of the added powers of Turing-completeness, value-awareness, blockchain-awareness and state. \nEthereum Accounts \nIn Ethereum, the state is made up of objects called \"accounts\", with each account having a20-byteaddress                  \nand state transitions being directtransfersofvalueandinformationbetweenaccounts. AnEthereumaccount               \ncontains four fields: \n\u25cf The nonce, a counter used to make sure each transaction can only be processed once \n\u25cf The account's current ether balance \n\u25cf The account's contract code, if present \n\u25cf The account's storage (empty by default) \n\"Ether\" is the main internal crypto-fuel of Ethereum, and is used to pay transaction fees. Ingeneral, thereare                   \ntwotypesofaccounts: externallyownedaccounts, controlledbyprivatekeys, andcontractaccounts, controlled               \nby their contract code. An externally owned account has no code, and one can send messages froman                  \nexternally owned account by creating and signing a transaction; in a contract account, every time the                \n \nPage 13 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3016, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4e34d45f-6aad-4c1b-9317-d0ba6c05f3c2": {"__data__": {"id_": "4e34d45f-6aad-4c1b-9317-d0ba6c05f3c2", "embedding": null, "metadata": {"page_label": "14", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1090ab77-5150-4f66-bfd6-598a862fc82c", "node_type": "4", "metadata": {"page_label": "14", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "7fa67dd1fd194826c78c23726e04905aba467dcae86633e806bf5a5592d3a82f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "contract account receives a message its code activates, allowing it to readandwritetointernal storageand                  \nsend other messages or create contracts in turn. \n \nMessages and Transactions \n\"Messages\" in Ethereum are somewhat similar to \u201ctransactions\u201d in Bitcoin, but with three important              \ndifferences. First, an Ethereummessage can be created either by an external entity or a contract, whereasa                  \nBitcoin transaction can only be created externally. Second, there isanexplicitoptionforEthereummessages                \nto contain data. Finally, the recipient of an Ethereummessage, if it is a contract account, has the option to                    \nreturn a response; this means that Ethereum messages also encompass the concept of functions. \nThe term\"transaction\" is used in Ethereumto refer to the signed data package that storesamessagetobe                    \nsent from an externally owned account. Transactions contain the recipient of the message, a signature               \nidentifying the sender, the amount ofetherandthedatatosend, aswell astwovaluescalledSTARTGASand                    \nGASPRICE. In order topreventexponential blowupandinfiniteloopsincode, eachtransactionisrequiredtoset                  \na limit to howmany computational steps of code execution it can spawn, including boththeinitial message                  \nand any additional messages that get spawned during execution. STARTGASis this limit, andGASPRICEis                \nthe fee topaytotheminerpercomputational step. Iftransactionexecution\"runsoutofgas\", all statechanges                    \nrevert - except for the payment of the fees, and if transaction execution halts with some gas remainingthen                   \nthe remaining portion of the fees is refunded to the sender. There is also a separate transaction type, and                   \ncorresponding message type, for creating a contract; the address of a contract is calculated based on the                 \nhash of the account nonce and transaction data. \nAn important consequence of the message mechanismis the \"first class citizen\" property of Ethereum- the                 \nidea that contracts have equivalent powers to external accounts, including the ability to sendmessageand                \ncreate other contracts. This allows contracts to simultaneously serve many different roles: for example, one               \nmight have a member of a decentralized organization (a contract) be an escrowaccount (anothercontract)                \nbetween an paranoid individual employing customquantum-proof Lamport signatures(athirdcontract)and             \na co-signing entity which itself uses an account with five keysforsecurity(afourthcontract). Thestrengthof                   \nthe Ethereumplatformis that the decentralized organization and the escrowcontract do not need to care                 \nabout what kind of account each party to the contract is. \n \nPage 14 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2967, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "81e53a90-7a64-40a7-af17-ba681498800b": {"__data__": {"id_": "81e53a90-7a64-40a7-af17-ba681498800b", "embedding": null, "metadata": {"page_label": "15", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97f38d65-7ad4-4b7c-babc-590f860d3600", "node_type": "4", "metadata": {"page_label": "15", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "a3859effb01996010f329c54cdbc91775b1fa048cdf0cd522c00e02dd85e6d0e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Ethereum State Transition Function \n \nThe Ethereum state transition function, APPLY(S,TX) -> S' can be defined as follows: \n1. Check if the transaction is well-formed (ie. has the right number of values), thesignatureisvalid,                 \nand the nonce matches the nonce in the sender's account. If not, return an error. \n2. Calculate the transaction fee asSTARTGAS*GASPRICE, anddeterminethesendingaddressfrom              \nthe signature. Subtract the fee fromthe sender's account balance and increment the sender's              \nnonce. If there is not enough balance to spend, return an error. \n3. Initialize GAS= STARTGAS, and take off a certain quantity of gas per byte to pay for the bytes in                    \nthe transaction. \n4. Transfer the transaction value fromthe sender's accounttothereceivingaccount. Ifthereceiving               \naccount does not yet exist, create it. If the receiving accountisacontract, runthecontract'scode                  \neither to completion or until the execution runs out of gas. \n5. If the value transfer failed because the sender did not have enough money, orthecodeexecution                 \nran out of gas, revert all state changes except the payment of the fees, and add the fees to the                    \nminer's account. \n6. Otherwise, refund the fees for all remaining gas to the sender, and send the fees paid for gas                  \nconsumed to the miner. \n \nPage 15 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1439, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c059563f-1aa8-4a88-9e30-fc3d02536765": {"__data__": {"id_": "c059563f-1aa8-4a88-9e30-fc3d02536765", "embedding": null, "metadata": {"page_label": "16", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fecbe22f-2e0c-4881-a059-98d97d0055ac", "node_type": "4", "metadata": {"page_label": "16", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "3f3b5f99c9bc4a0d5d5cfc6017463e2c4ba45961cf64b11af42fa22d2906aae5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "For example, suppose that the contract's code is: \nif !contract.storage[msg.data[0]]: \n    contract.storage[msg.data[0]] = msg.data[1] \nNote that in reality the contract code is written in the low-level EVMcode; this example is written inSerpent,                    \nour high-level language, for clarity, and can be compiled down to EVMcode. Suppose that the contract's                 \nstorage starts off empty, and a transaction is sent with 10 ether value, 2000 gas, 0.001 ether gasprice, and                   \ntwo data fields: [ 2, 'CHARLIE' ][3]. The process for the state transition function in this case is as follows: \n1. Check that the transaction is valid and well formed. \n2. Check that the transactionsenderhasatleast2000*0.001=2ether. Ifitis, thensubtract2ether                     \nfrom the sender's account. \n3. Initialize gas = 2000; assuming the transaction is 170 bytes long and the byte-fee is 5, subtract                 \n850 so that there is 1150 gas left. \n4. Subtract 10 more ether from the sender's account, and add it to the contract's account. \n5. Run the code. In this case, this is simple: it checks if the contract's storage at index 2 is used,                    \nnotices that itisnot, andsoitsetsthestorageatindex2tothevalueCHARLIE. Supposethistakes                     \n187 gas, so the remaining amount of gas is 1150 - 187 = 963 \n6. Add 963 * 0.001 = 0.963 ether back to the sender's account, and return the resulting state. \nIf there was no contract at the receiving endofthetransaction, thenthetotal transactionfeewouldsimplybe                    \nequal to the provided GASPRICE multiplied by the length of the transaction in bytes, and the data sent                  \nalongside the transaction would be irrelevant. Additionally, notethatcontract-initiatedmessagescanassign             \na gas limit to the computation that they spawn, and if the sub-computation runs out of gas it gets reverted                    \nonly to the point of the message call. Hence, just like transactions, contracts can secure their limited                 \ncomputational resources by setting strict limits on the sub-computations that they spawn. \n \n \n \n \n\u00a0\n\u00a0\n\u00a0\n \nPage 16 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2205, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0492a0df-8138-4a3d-a928-32f085e80c6f": {"__data__": {"id_": "0492a0df-8138-4a3d-a928-32f085e80c6f", "embedding": null, "metadata": {"page_label": "17", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e47fe1e-a426-4948-a421-7b16fa109d5d", "node_type": "4", "metadata": {"page_label": "17", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "1f10a326592494414b0392a3a65320c947ed1f3647331ca9949c5e55946cb68e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Code Execution \nThe code in Ethereum contracts is written in a low-level, stack-based bytecode language, referred to as                \n\"Ethereum virtual machine code\" or \"EVM code\". The code consists of a series of bytes, where each byte                  \nrepresents an operation. In general, code execution is an infinite loop that consistsofrepeatedlycarryingout                 \nthe operation at the current programcounter (which begins at zero) and then incrementing the program                \ncounter by one, until theendofthecodeisreachedoranerrororSTOPorRETURNinstructionisdetected. The                      \noperations have access to three types of space in which to store data: \n\u25cf The stack, a last-in-first-out container to which 32-byte values can be pushed and popped \n\u25cf Memory, an infinitely expandable byte array \n\u25cf The contract's long-termstorage, a key/value store where keys and values are both 32              \nbytes. Unlike stack and memory, which reset after computation ends, storage persists for the long               \nterm. \nThe code can also access thevalue, senderanddataoftheincomingmessage, aswell asblockheaderdata,                    \nand the code can also return a byte array of data as an output. \nThe formal execution model of EVM code is surprisingly simple. While the Ethereum virtual machine is                \nrunning, its full computational state can be defined by the tuple (block_state, transaction, message, code,               \nmemory, stack, pc, gas), where block_state is the global state containingall accountsandincludesbalances                \nand storage. Every round of execution, the current instruction is found by taking the pc-th byte of code, and                   \neach instruction has its own definition in termsofhowitaffectsthetuple. Forexample, ADDpopstwoitemsoff                     \nthe stack and pushes their sum, reduces gas by 1 and increments pc by 1, and SSTORE pushes thetoptwo                     \nitems off the stack and inserts the second iteminto the contract's storage at the index specified by thefirst                    \nitem, as well as reducing gas by up to 200 and incrementing pc by 1. Although there are many ways to                     \noptimize Ethereumvia just-in-time compilation, a basic implementation of Ethereumcan be done in a few                \nhundred lines of code. \n \nPage 17 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2385, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "826d7af2-c959-4f9e-a9af-2d9a065d6172": {"__data__": {"id_": "826d7af2-c959-4f9e-a9af-2d9a065d6172", "embedding": null, "metadata": {"page_label": "18", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d5f5988-6a1e-4904-b423-83fb43da8140", "node_type": "4", "metadata": {"page_label": "18", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "e9bc1ef31e59628f9867f4b17a3a03cb955b598217c75f6794b4d667b3a315bb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Blockchain and Mining \n \nThe Ethereumblockchain is in many ways similar to the Bitcoin blockchain, although it does have some                 \ndifferences. The main difference between Ethereumand Bitcoin with regard to the blockchain architecture is               \nthat, unlike Bitcoin, Ethereumblocks contain a copy of both the transaction list and the most recent state.                  \nAside fromthat, two other values, the block number and the difficulty, are also stored in the block. Theblock                    \nvalidation algorithm in Ethereum is as follows: \n1. Check if the previous block referenced exists and is valid. \n2. Check that the timestamp of the block is greater than that of the referenced previous block and                 \nless than 15 minutes into the future \n3. Check that the block number, difficulty, transactionroot, unclerootandgaslimit(variouslow-level               \nEthereum-specific concepts) are valid. \n4. Check that the proof of work on the block is valid. \n5. Let S[0] be the STATE_ROOT of the previous block. \n6. Let TX be the block's transaction list, with n transactions. For all in in 0...n-1, setS[i+1] =                 \nAPPLY(S[i],TX[i]). If any applications returns an error, or if the total gas consumed in the block up                 \nuntil this point exceeds the GASLIMIT, return an error. \n7. Let S_FINAL be S[n], but adding the block reward paid to the miner. \n8. Check if S_FINAL is the same as the STATE_ROOT. If it is, the block is valid; otherwise, it is not valid. \n \n \n \n \nPage 18 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1557, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45e64969-21fc-4387-9d22-57df1a341392": {"__data__": {"id_": "45e64969-21fc-4387-9d22-57df1a341392", "embedding": null, "metadata": {"page_label": "19", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55533469-873e-4d87-82f7-dd42ac7a5525", "node_type": "4", "metadata": {"page_label": "19", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "f06b07ae1fdcc4bce59c24bf68f9ae02469cc4a5c111b6149a67da0ccfe795f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The approach may seemhighly inefficient at first glance, because itneedstostoretheentirestatewitheach                   \nblock, but in reality efficiency should be comparable to thatofBitcoin. Thereasonisthatthestateisstoredin                     \nthe tree structure, and after every block only a small part of the tree needs to be changed. Thus, in general,                     \nbetween two adjacent blocks the vast majority of the tree should be the same, andthereforethedatacanbe                    \nstored once and referenced twice using pointers (ie. hashes of subtrees). Aspecial kind of tree known as a                   \n\"Patricia tree\" is used to accomplish this, including a modification to the Merkle tree concept that allows for                  \nnodes to be inserted and deleted, and not just changed, efficiently. Additionally, because all of the state                 \ninformation is part of the last block, thereisnoneedtostoretheentireblockchainhistory- astrategywhich, if                      \nit could be applied to Bitcoin, can be calculated to provide 5-20x savings in space. \nApplications \nIn general, there are three types ofapplicationsontopofEthereum. Thefirstcategoryisfinancial applications,                  \nproviding users with more powerful ways of managing and entering into contracts using their money. This                \nincludes sub-currencies, financial derivatives, hedging contracts, savings wallets, wills, and ultimately even            \nsome classes of full-scale employment contracts. The second category is semi-financial applications, where             \nmoney is involved but there is also a heavy non-monetary side to what is being done; a perfect example is                    \nself-enforcing bounties for solutions to computational problems. Finally, there are applications suchasonline              \nvoting and decentralized governance that are not financial at all. \nToken Systems \nOn-blockchain token systems have many applications ranging fromsub-currenciesrepresentingassetssuch            \nas USDorgoldtocompanystocks, individual tokensrepresentingsmartproperty, secureunforgeablecoupons,               \nand even token systems with no ties to conventional value at all, used as point systems for incentivization.                  \nToken systems are surprisingly easy to implement in Ethereum. The key point to understand is that all a                  \ncurrency, or token systen, fundamentallyisisadatabasewithoneoperation: subtractXunitsfromAandgive                   \nXunits to B, with the proviso that (i) Xhad at least Xunits before the transaction and (2) the transactionis                       \napproved by A. All that it takes to implement a token system is to implement this logic into a contract. \n \n \n \n \n \n \n \nPage 19 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2798, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3e83ab50-7284-4ddf-8f09-2f54955da6e8": {"__data__": {"id_": "3e83ab50-7284-4ddf-8f09-2f54955da6e8", "embedding": null, "metadata": {"page_label": "20", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a292dd57-dc04-4fd5-b0fc-9bedcbb0ab69", "node_type": "4", "metadata": {"page_label": "20", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "1e081dd1eb7458818b642c6bdb455eb9fb42abbaf9bd47db2868906e6ef49c48", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The basic code for implementing a token system in Serpent looks as follows: \nf r o m \u00a0 = \u00a0 m s g . s e n d e r \u00a0\nt o \u00a0 = \u00a0 m s g . d a t a [ 0 ] \u00a0\nv a l u e \u00a0 = \u00a0 m s g . d a t a [ 1 ] \u00a0\n\u00a0\ni f \u00a0 c o n t r a c t . s t o r a g e [ f r o m ] \u00a0 > = \u00a0 v a l u e : \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 c o n t r a c t . s t o r a g e [ f r o m ] \u00a0 = \u00a0 c o n t r a c t . s t o r a g e [ f r o m ] \u00a0 \u00ad \u00a0 v a l u e \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 c o n t r a c t . s t o r a g e [ t o ] \u00a0 = \u00a0 c o n t r a c t . s t o r a g e [ t o ] \u00a0 + \u00a0 v a l u e \u00a0\n\u00a0\nThis is essentially a literal implementationofthe\"bankingsystem\"statetransitionfunctiondescribedfurther               \nabove in this document. Afewextra linesofcodeneedtobeaddedtoprovidefortheinitial stepofdistributing                      \nthe currency units in the first place and a fewother edge cases, and ideally afunctionwouldbeaddedtolet                      \nother contracts query for the balance of an address. Butthat'sall thereistoit. Theoretically, Ethereum-based                  \ntoken systems acting as sub-currencies can potentially include another important feature that on-chain             \nBitcoin-based meta-currencies lack: the ability to pay transaction fees directly in that currency. Thewaythis                \nwould be implemented is that the contract would maintain anetherbalancewithwhichitwouldrefundether                  \nused to pay fees to the sender, and it would refill this balance bycollectingtheinternal currencyunitsthatit                     \ntakes in fees and reselling themin a constant running auction. Users would thus need to \"activate\" their                  \naccounts with ether, butoncetheetheristhereitwouldbereusablebecausethecontractwouldrefunditeach                    \ntime. \nFinancial derivatives and Stable-Value Currencies \nFinancial derivatives are the most common application of a \"smart contract\", and one of the simplest to                 \nimplement in code. The main challenge in implementing financial contracts is that the majority of them                \nrequire reference to an external price ticker; for example, a very desirableapplicationisasmartcontractthat                  \nhedges against the volatility of ether (or another cryptocurrency) with respect to theUSdollar, butdoingthis                  \nrequires the contract to knowwhat the value of ETH/USDis. The simplest way to do this is through a \"data                     \nfeed\" contract maintained by a specific party (eg. NASDAQ) designed so that that party has the ability to                  \nupdate the contract as needed, and providing an interface that allows other contracts tosendamessageto                  \nthat contract and get back a response that provides the price. \nGiven that critical ingredient, the hedging contract would look as follows: \n1. Wait for party A to input 1000 ether. \n2. Wait for party B to input 1000 ether. \n3. Record the USDvalueof1000ether, calculatedbyqueryingthedatafeedcontract, instorage, saythis                  \nis $x. \n4. After 30 days, allow A or B to \"ping\" the contract in order to send $x worth of ether (calculated by                     \nquerying the data feed contract again to get the new price) to A and the rest to B. \n \nPage 20 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3218, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d820f5aa-8ffb-4fcb-a8d7-4c0fced9e176": {"__data__": {"id_": "d820f5aa-8ffb-4fcb-a8d7-4c0fced9e176", "embedding": null, "metadata": {"page_label": "21", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9232b0c6-73cd-42f2-b657-4ebc385b9be1", "node_type": "4", "metadata": {"page_label": "21", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "23c5804239ee25aa139b1b0bfacbb7e571f394ffeb9295c949f3a57cf2184e6d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Such a contract would have significant potential in crypto-commerce. One of the main problems citedabout                \ncryptocurrency is the fact that it's volatile; although many users and merchants may wantthesecurityand                 \nconvenience of dealing with cryptographic assets, they many not wish to face that prospect of losing 23%of                  \nthe value of their funds in a single day. Up until now, the most commonly proposed solution has been                   \nissuer-backed assets; the idea is that an issuer creates a sub-currency in which they havetherighttoissue                   \nand revoke units, and provide one unitofthecurrencytoanyonewhoprovidesthem(offline)withoneunitofa                     \nspecified underlying asset (eg. gold, USD). The issuer then promises to provide one unit of the underlying                 \nasset to anyone who sends back one unit of the crypto-asset. Thismechanismallowsanynon-cryptographic                \nasset to be \"uplifted\" into a cryptographic asset, provided that the issuer can be trusted. \nIn practice, however, issuers are not always trustworthy, and in some cases the banking infrastructureistoo                 \nweak, or too hostile, for such services to exist. Financial derivatives provide an alternative. Here, instead ofa                  \nsingle issuer providing the funds to back up an asset, a decentralizedmarketofspeculators, bettingthatthe                  \nprice of a cryptographic referenceassetwill goup, playsthatrole. Unlikeissuers, speculatorshavenooptionto                   \ndefault on their side of the bargain because the hedging contract holds their funds in escrow. Notethatthis                   \napproach is not fully decentralized, because a trusted source is still needed to provide the price ticker,                 \nalthough arguably even still this is a massive improvementintermsofreducinginfrastructurerequirements               \n(unlike being an issuer, issuing a pricefeedrequiresnolicensesandcanlikelybecategorizedasfreespeech)                   \nand reducing the potential for fraud. \n \n \n \n \n \n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n \nPage 21 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2147, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "03cd0d72-d93f-4f18-8613-10c7c964d673": {"__data__": {"id_": "03cd0d72-d93f-4f18-8613-10c7c964d673", "embedding": null, "metadata": {"page_label": "22", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a98d8c6-98e4-41dd-8ddc-a65c23b3b72f", "node_type": "4", "metadata": {"page_label": "22", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "43ed4bb0b5ab9dab970b55a38a0677312b7dd42bfa4a38a8a7802aca8dc03a5c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Identity and Reputation Systems \nThe earliestalternativecryptocurrencyofall, Namecoin, attemptedtouseaBitcoin-likeblockchaintoprovidea                \nname registration system, where users can register their names in a public database alongside other data.                \nThe major cited use case is for a DNSsystem, mapping domain names like \"bitcoin.org\" (or, in Namecoin's                  \ncase, \"bitcoin.bit\") to an IP address. Other use cases include email authentication and potentially more               \nadvancedreputationsystems. HereisthebasiccontracttoprovideaNamecoin-likenameregistrationsystem               \non Ethereum: \ni f \u00a0 ! c o n t r a c t . s t o r a g e [ t x . d a t a [ 0 ] ] : \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 c o n t r a c t . s t o r a g e [ t x . d a t a [ 0 ] ] \u00a0 = \u00a0 t x . d a t a [ 1 ]  \n \nThe contract is very simple; all it is is a database inside the Ethereumnetworkthatcanbeaddedto, butnot                      \nmodified or removed from. Anyone can register a name with some value, and that registration then sticks                 \nforever. A more sophisticated name registration contract will also have a \"function clause\" allowing other               \ncontracts to query it, as well as a mechanismfor the \"owner\"(ie. thefirstregisterer)ofanametochangethe                      \ndata or transfer ownership. One can even add reputation and web-of-trust functionality on top. \n\u00a0\nDecentralized File Storage \nOver the past few years, there have emerged a number of popular online file storage startups, the most                  \nprominent being Dropbox, seeking to allowusers to upload a backup of their hard drive and have theservice                   \nstore the backup and allowthe user to access it in exchange for a monthly fee. However, atthispointthefile                      \nstorage market is at times relatively inefficient; a cursory look at various existing solutions shows that,                \nparticularly atthe\"uncannyvalley\"20-200GBlevel atwhichneitherfreequotasnorenterprise-level discounts                \nkickin, monthlypricesformainstreamfilestoragecostsaresuchthatyouarepayingformorethanthecostof                     \nthe entire hard drive in a single month. Ethereumcontracts canallowforthedevelopmentofadecentralized                  \nfile storage ecosystem, where individual users can earn small quantities of money by renting out their own                 \nhard drives and unused space can be used to further drive down the costs of file storage. \nThe key underpinning piece of such a device would be what we have termed the \"decentralized Dropbox                 \ncontract\". Thiscontractworksasfollows. First, onesplitsthedesireddataupintoblocks, encryptingeachblock                  \nfor privacy, and builds a Merkle tree outofit. Onethenmakesacontractwiththerulethat, everyNblocks, the                       \ncontract would pick a random index in the Merkle tree (using the previous block hash, accessible from                 \ncontract code, as a source of randomness), and give Xether to the first entity to supply atransactionwitha                     \n \nPage 22 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3122, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "002785a6-78d8-4aac-bea0-450359a1fffe": {"__data__": {"id_": "002785a6-78d8-4aac-bea0-450359a1fffe", "embedding": null, "metadata": {"page_label": "23", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85634b0b-cd30-4b69-9f76-f6fbe503a9d7", "node_type": "4", "metadata": {"page_label": "23", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "0a754d8766935535426634a61782de8a8b8e72ec2b20064535a7818062e9917b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "simplified payment verification-like proof of ownership of the block at that particular indexinthetree. Whena                  \nuser wants to re-download their file, they can use a micropayment channel protocol (eg. pay 1 szabo per 32                   \nkilobytes) to recover the file; the mostfee-efficientapproachisforthepayernottopublishthetransactionuntil                   \nthe end, instead replacing the transaction with a slightly more lucrativeonewiththesamenonceafterevery                  \n32 kilobytes. \nAn important featureoftheprotocol isthat, althoughitmayseemlikeoneistrustingmanyrandomnodesnot                    \nto decide to forget the file, one can reducethatriskdowntonear-zerobysplittingthefileintomanypiecesvia                      \nsecret sharing, andwatchingthecontractstoseeeachpieceisstill insomenode'spossession. Ifacontractis                    \nstill paying out money, that provides a cryptographic proof that someone out there is still storing the file. \n\u00a0\nDecentralized Autonomous Organizations \nThe general concept of a \"decentralized organization\" is that of a virtual entity that has a certain set of                   \nmembers or shareholders which, perhaps with a 67%majority, have the right to spend theentity'sfundsand                  \nmodify its code. The members would collectively decide on howthe organization should allocate its funds.                \nMethods for allocating a DAO's funds could range frombounties, salaries to even more exotic mechanisms                \nsuch as an internal currency to reward work. This essentially replicates the legal trappings of a traditional                 \ncompany or nonprofit but using only cryptographic blockchaintechnologyforenforcement. Sofarmuchofthe                \ntalk around DAOs has been around the \"capitalist\" model of a \"decentralizedautonomouscorporation\"(DAC)               \nwith dividend-receiving shareholders and tradable shares; an alternative, perhaps described as a            \n\"decentralized autonomous community\", would have all members have an equal share in the decision              \nmaking and require 67%of existing memberstoagreetoaddorremoveamember. Therequirementthatone                   \nperson can only have one membership would then need to be enforced collectively by the group. \nA general outline for howto code a DOis as follows. The simplest design is simply a piece of self-modifying                     \ncode thatchangesiftwothirdsofmembersagreeonachange. Althoughcodeistheoreticallyimmutable, one                  \ncan easily get around this and have de-facto mutability by having chunksofthecodeinseparatecontracts,                  \nand having the address of which contracts to call stored in the modifiable storage. In a simple                 \nimplementation of such a DAO contract, there would be three transaction types, distinguished by the data                \nprovided in the transaction: \n\u25cf [ 0 , i , K , V ] to register a proposal with index i to change the addressatstorageindexKto                 \nvalue V \n\u25cf [ 0 , i ]  to register a vote in favor of proposal i \n\u25cf [ 2 , i ]  to finalize proposal i if enough votes have been made \nThe contract would then have clauses for each of these. It would maintain a record of all open storage                   \nchanges, along with a list of who voted for them. It would also have a list of all members. Whenanystorage                      \n \nPage 23 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3447, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8ad7f3eb-9e9a-44b7-aa75-02b65930d4df": {"__data__": {"id_": "8ad7f3eb-9e9a-44b7-aa75-02b65930d4df", "embedding": null, "metadata": {"page_label": "24", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1479dae3-51d9-4e87-a0ff-a24abd10eea6", "node_type": "4", "metadata": {"page_label": "24", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "773627a59952d3d1c3caf72d8abc8a11cc458b0b26091b4003690452b2307bcd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "change gets to two thirds of members voting for it, afinalizingtransactioncouldexecutethechange. Amore                   \nsophisticated skeleton would also have built-in voting ability for features like sending a transaction, adding               \nmembers and removing members, and may even provide for Liquid Democracy-style vote delegation (ie.              \nanyone can assign someone to vote for them, andassignmentistransitivesoifAassignsBandBassignsC                     \nthen C determines A's vote). This design would allow the DO to grow organically as a decentralized                 \ncommunity, allowing people to eventually delegate the task of filtering out who is a member to specialists,                 \nalthough unlike in the \"current system\" specialists can easily pop in and out of existence over time as                  \nindividual community members change their alignments. \nAn alternative model is for adecentralizedcorporation, whereanyaccountcanhavezeroormoreshares, and                  \ntwo thirds of the shares are required to make a decision. A complete skeleton would involve asset                 \nmanagement functionality, the ability to make an offer to buy or sell shares, and the ability to accept offers                   \n(preferably with an order-matching mechanism inside the contract). Delegation would also exist Liquid             \nDemocracy-style, generalizing the concept of a \"board of directors\". \nIn the future, more advanced mechanisms for organizational governance may be implemented; it is at this                \npoint that a decentralized organization (DO) can start to be described as a decentralized autonomous               \norganization (DAO). The difference between a DOand a DAOis fuzzy, but the general dividinglineiswhether                   \nthe governance is generally carried out via a political-like processoran\u201cautomatic\u201dprocess; agoodintuitive                 \ntest is the \u201cno common language\u201d criterion: can the organization still function if no two members spoke the                  \nsame language? Clearly, a simple traditional shareholder-stylecorporationwouldfail, whereassomethinglike             \nthe Bitcoin protocol would be much more likely to succeed. Robin Hanson\u2019s futarchy, a mechanism for                \norganizational governance via prediction markets, isagoodexampleofwhattruly\u201cautonomous\u201dgovernance              \nmightlooklike. Notethatoneshouldnotnecessarilyassumethatall DAOsaresuperiortoall DOs; automation                   \nis simplyaparadigmthatislikelytohavehaveverylargebenefitsincertainparticularplacesandmaynotbe                     \npractical in others, and many semi-DAOs are also likely to exist. \nFurther Applications \n1. Savings wallets. Suppose that Alice wants to keep her funds safe, but is worried that she will lose or                    \nsomeone will hack her private key. She puts ether into a contract with Bob, a bank, as follows: \n\u25cf Alice alone can withdraw a maximum of 1% of the funds per day. \n\u25cf Bob alone can withdrawa maximumof1%ofthefundsperday, butAlicehastheabilitytomakea                     \ntransaction with her key shutting off this ability. \n\u25cf Alice and Bob together can withdraw anything. \nNormally, 1%per day is enough for Alice, and if Alice wants to withdrawmore she can contactBobforhelp. If                      \nAlice's key gets hacked, she runs to Bob to move the fundstoanewcontract. Ifshelosesherkey, Bobwill get                        \nthe funds out eventually. If Bob turns out to be malicious, then she can turn off his ability to withdraw. \n \nPage 24 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3600, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f54c930-e030-40de-8c33-5161831ef28a": {"__data__": {"id_": "2f54c930-e030-40de-8c33-5161831ef28a", "embedding": null, "metadata": {"page_label": "25", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a20b9deb-8930-4b39-9d98-3a9e4f1515e6", "node_type": "4", "metadata": {"page_label": "25", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "6792910216a77f20639f0fde4ca1fbef4b27860057c6ccfd578d28ff5ef8d53d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2. Crop insurance. One can easily make afinancial derivativescontractbutusingadatafeedoftheweather                   \ninstead of any price index. If a farmer in Iowa purchases a derivative that pays out inversely based on the                    \nprecipitation in Iowa, then if there is a drought, the farmer will automatically receive money and if there is                   \nenough rain the farmer will be happy because their crops would do well. \n3. Adecentralizeddatafeed. Forfinancial contractsfordifference, itmayactuallybepossibletodecentralize                 \nthe data feed via a protocol called \"SchellingCoin\". SchellingCoin basically works as follows: Npartiesall put                 \ninto the systemthe value of a given datum(eg. the ETH/USD price), the values are sorted, and everyone                   \nbetween the 25th and 75th percentile gets one token as a reward. Everyone has the incentive to provide the                   \nanswer that everyone else will provide, and the only value that a large number of players can realistically                  \nagree on is the obvious default: the truth. This creates adecentralizedprotocol thatcantheoreticallyprovide                 \nany number of values, including theETH/USDprice, thetemperatureinBerlinoreventheresultofaparticular                   \nhard computation. \n4. Smart multi-signature escrow. Bitcoin allows multisignature transaction contracts where, for example,            \nthree out of a given five keys canspendthefunds. Ethereumallowsformoregranularity; forexample, fourout                    \nof five can spend everything, three out of fivecanspendupto10%perday, andtwooutoffivecanspendupto                         \n0.5% per day. Additionally, Ethereummultisig is asynchronous - two parties can register their signatures on                \nthe blockchain at different times and the last signature will automatically send the transaction. \n5. Cloud computing. The EVMtechnology can also be used to create a verifiable computing environment,                \nallowing users toaskotherstocarryoutcomputationsandthenoptionallyaskforproofsthatcomputationsat                  \ncertain randomly selected checkpoints were done correctly. This allows for the creationofacloudcomputing                \nmarket where any user can participate with their desktop, laptop or specialized server, and spot-checking               \ntogether with security deposits can be used to ensure that the system is trustworthy (ie. nodes cannot                 \nprofitably cheat). Although such a systemmay not be suitable for all tasks; tasksthatrequireahighlevel of                    \ninter-process communication, for example, cannot easily be done on a large cloud of nodes. Other tasks,                \nhowever, are much easier to parallelize; projects like SETI@home, folding@home andgeneticalgorithmscan              \neasily be implemented on top of such a platform. \n6. Peer-to-peer gambling. Any number of peer-to-peer gambling protocols, such as Frank Stajano and              \nRichard Clayton's Cyberdice, can be implemented on the Ethereum blockchain. The simplest gambling             \nprotocol is actually simply a contract for difference on thenextblockhash, andmoreadvancedprotocolscan                  \nbe built up from there, creating gambling services with near-zero fees that have no ability to cheat. \n7. Prediction markets. Provided an oracle or SchellingCoin, prediction markets are also easy to implement,               \nand prediction markets together with SchellingCoin may prove to be the first mainstreamapplication of               \nfutarchy as a governance protocol for decentralized organizations. \n8. On-chain decentralized marketplaces, using the identity and reputation system as a base. \n \nPage 25 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3795, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4cb42c95-ede5-48ef-9abb-6203c22b3621": {"__data__": {"id_": "4cb42c95-ede5-48ef-9abb-6203c22b3621", "embedding": null, "metadata": {"page_label": "26", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca1003df-6230-496f-8ebd-88bd9aa2bd28", "node_type": "4", "metadata": {"page_label": "26", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "79eba33d7f69d70afa6a536005b845fb4a9ad00961be2bf28bd37e9da935f087", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Miscellanea And Concerns \nModified GHOST Implementation \nThe \"Greedy Heaviest Observed Subtree\" (GHOST) protocol is an innovation first introduced by Yonatan              \nSompolinsky and Aviv Zohar in December 2013. The motivation behind GHOST is that blockchains withfast                \nconfirmation times currently suffer fromreduced security due to a high stale rate - because blocks take a                  \ncertain time to propagate through the network, if miner Amines a block and then miner Bhappens to mine                    \nanother block before miner A'sblockpropagatestoB, minerB'sblockwill endupwastedandwill notcontribute                    \nto network security. Furthermore, there is a centralization issue: if miner A is a mining pool with 30%                  \nhashpower and Bhas 10%hashpower, Awill have a risk of producing a staleblock70%ofthetime(sincethe                      \nother 30%of the time Aproduced thelastblockandsowill getminingdataimmediately)whereasBwill have                     \na risk of producing a stale block90%ofthetime. Thus, iftheblockinterval isshortenoughforthestalerateto                        \nbe high, A will be substantially more efficient simply by virtue of its size. With these two effects combined,                   \nblockchains which produce blocks quickly are very likely to lead to one mining pool having a large enough                  \npercentage of the network hashpower to have de facto control over the mining process. \nAs described by Sompolinsky and Zohar, GHOST solves the first issue of network security loss by including                 \nstale blocks in the calculation of which chain is the \"longest\"; that is to say, not just the parent and further                     \nancestors of a block, but also the stale children of the block's ancestors (in Ethereumjargon, \"uncles\") are                  \nadded to thecalculationofwhichblockhasthelargesttotal proofofworkbackingit. Tosolvethesecondissue                     \nof centralization bias, wegobeyondtheprotocol describedbySompolinskyandZohar, andalsoallowstalesto                  \nbe registered into the main chain to receive a block reward: a stale block receives 93.75%of its basereward,                    \nand the nephewthatincludesthestaleblockreceivestheremaining6.25%. Transactionfees, however, arenot                 \nawarded to uncles. \nEthereumimplements a simplified version of GHOST which only goes down five levels. Specifically, a stale                \nblock can only be included asanunclebythe2ndto5thgenerationchildofitsparent, andnotanyblockwith                       \na more distant relation (eg. 6th generation child of a parent, or 3rd generation child of a grandparent). This                   \nwas done for several reasons. First, unlimited GHOST would include too many complications into the               \ncalculation of which uncles for a given block arevalid. Second, unlimitedGHOSTwithcompensationasused                 \nin Ethereumremoves the incentive for a miner to mine on the main chain and not the chain of a public                     \nattacker. Finally, calculations showthat five-level GHOSTwithincentivizationisover95%efficientevenwitha                \n15s block time, and miners with 25% hashpower show centralization gains of less than 3%. \n \nPage 26 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 3331, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7a305b30-07e9-4aa2-b9ed-2dd30339c0eb": {"__data__": {"id_": "7a305b30-07e9-4aa2-b9ed-2dd30339c0eb", "embedding": null, "metadata": {"page_label": "27", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e9297ae-dbf3-406c-8e73-d302bd7908ec", "node_type": "4", "metadata": {"page_label": "27", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "4adc578868ee792a14c024dfe5be9bff45d4f776f760ec05bd79e782b400c203", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Fees \nBecause every transaction published into the blockchain imposes on the network the cost of needing to                \ndownload and verify it, there is aneedforsomeregulatorymechanism, typicallyinvolvingtransactionfees, to                 \nprevent abuse. The default approach, used in Bitcoin, istohavepurelyvoluntaryfees, relyingonminerstoact                   \nas the gatekeepers and set dynamic minimums. This approach has been received very favorably in the                \nBitcoin community particularly because it is \"market-based\", allowing supply and demand between miners             \nand transaction senders determine the price. The problem with this line of reasoning is, however, that                \ntransaction processing is not a market; althoughitisintuitivelyattractivetoconstruetransactionprocessing               \nasaservicethattheminerisofferingtothesender, inrealityeverytransactionthataminerincludeswill need                     \ntobeprocessedbyeverynodeinthenetwork, sothevastmajorityofthecostoftransactionprocessingisborne                     \nby third parties and not the miner that is making the decision of whether or not to include it. Hence,                    \ntragedy-of-the-commons problems are very likely to occur. \nHowever, as it turns out this flaw in the market-based mechanism, when given a particular inaccurate                \nsimplifying assumption, magically cancels itself out. The argument is as follows. Suppose that: \n1. Atransaction leads to k operations, offering the reward kRtoanyminerthatincludesitwhereRis                   \nset by the sender and k and R are (roughly) visible to the miner beforehand. \n2. An operation has a processing cost of C to any node (ie. all nodes have equal efficiency) \n3. There are N mining nodes, each with exactly equal processing power (ie. 1/N of total) \n4. No non-mining full nodes exist. \nA miner would be willing to process a transaction if the expected reward is greater than the cost. Thus, the                    \nexpected reward is kR/Nsince the miner has a 1/Nchance of processing the next block, and theprocessing                   \ncost for the miner issimplykC. Hence, minerswill includetransactionswherekR/N>kC, orR>NC. NotethatR                       \nistheper-operationfeeprovidedbythesender, andisthusalowerboundonthebenefitthatthesenderderives                     \nfromthe transaction, and NC is the cost to the entire network together of processing an operation. Hence,                  \nminers have the incentive to includeonlythosetransactionsforwhichthetotal utilitarianbenefitexceedsthe                 \ncost. \nHowever, there are several important deviations from those assumptions in reality: \n1. The miner does pay a higher cost to process the transactionthantheotherverifyingnodes, since                 \nthe extra verification time delays block propagation and thus increases the chance the block will               \nbecome a stale. \n2. There do exist non-mining full nodes. \n \nPage 27 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 3017, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "555b0d04-7dfd-4afd-92f4-91c24668286e": {"__data__": {"id_": "555b0d04-7dfd-4afd-92f4-91c24668286e", "embedding": null, "metadata": {"page_label": "28", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8919d45-2ba5-42f4-a033-0a9e434f7f96", "node_type": "4", "metadata": {"page_label": "28", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "897b6f55bcc9e338d86d9208abc09d58f6701c92926cecb14056a3abde71ca8f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3. The mining power distribution may end up radically inegalitarian in practice. \n4. Speculators, political enemies and crazies whose utility function includes causing harmto the             \nnetwork do exist, and they can cleverly set up contracts whose cost is much lower than the cost                  \npaid by other verifying nodes. \n \nPoint 1 above provides a tendency for the miner to include fewer transactions, and point 2 increases NC;                  \nhence, these two effects at least partially cancel each other out. Points 3 and 4 are the major issue; tosolve                     \nthemwesimplyinstituteafloatingcap: noblockcanhavemoreoperationsthanBLK_LIMIT_FACTORtimesthe                 \nlong-term exponential moving average. Specifically: \nblk.oplimit = floor((blk.parent.oplimit * (EMAFACTOR - 1) + floor(parent.opcount * BLK_LIMIT_FACTOR)) /            \nEMA_FACTOR) \nBLK_LIMIT_FACTOR and EMA_FACTORare constants that will be set to 65536 and 1.5 for the time being, but                  \nwill likely be changed after further analysis. \nComputation And Turing-Completeness \nAn important note is that the Ethereumvirtual machine is Turing-complete; this means that EVMcode can                 \nencode any computation thatcanbeconceivablycarriedout, includinginfiniteloops. EVMcodeallowslooping                \nin two ways. First, there is a JUMPinstruction that allows the programtojumpbacktoapreviousspotinthe                      \ncode, and a JUMPI instruction to do conditional jumping, allowing for statements like while x < 27: x =x*2.                      \nSecond, contracts can call other contracts, potentially allowing for looping through recursion. This naturally              \nleads to a problem: can malicious usersessentiallyshutminersandfull nodesdownbyforcingthemtoenter                   \ninto aninfiniteloop?Theissuearisesbecauseofaproblemincomputerscienceknownasthehaltingproblem:                   \nthere is no way to tell, in the general case, whether or not a given program will ever halt. \nAs described in the state transition section, our solution works by requiring a transaction tosetamaximum                  \nnumber of computational stepsthatitisallowedtotake, andifexecutiontakeslongercomputationisreverted                  \nbut fees are still paid. Messages work in the same way. Toshowthemotivationbehindoursolution, consider                   \nthe following examples: \n\u25cf An attacker creates a contract which runs an infinite loop, and then sends a transaction               \nactivating that loop to the miner. The miner will process the transaction, running the infinite loop,                \nand wait for it to run out of gas. Even though the execution runs out of gas and stops halfway                    \nthrough, the transaction is still valid and the miner still claims the fee fromthe attacker for each                  \ncomputational step. \n\u25cf An attacker creates a very long infinite loop with the intent of forcing the miner to keep                 \ncomputing for such a long time that by the time computation finishes a fewmore blocks will have                  \ncome out and it will notbepossiblefortheminertoincludethetransactiontoclaimthefee. However,                    \n \nPage 28 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3255, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fad95b83-3427-4071-b424-637a3bdd7ba0": {"__data__": {"id_": "fad95b83-3427-4071-b424-637a3bdd7ba0", "embedding": null, "metadata": {"page_label": "29", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "270973d9-3e62-4bfc-8fc9-c085f71278a0", "node_type": "4", "metadata": {"page_label": "29", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "c84c6126c27c3f14a23043e1063764340eb3880f94cf9a33eb5b2a57658217d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "the attacker will be required to submit a value for STARTGASlimiting the numberofcomputational                \nsteps thatexecutioncantake, sotheminerwill knowaheadoftimethatthecomputationwill takean                   \nexcessively large number of steps. \n\u25cf An attacker sees a contract with code of some form like send(A,contract.storage[A]);            \ncontract.storage[A] = 0, andsendsatransactionwithjustenoughgastorunthefirststepbutnotthe                   \nsecond (ie. making a withdrawal but not letting thebalancegodown). Thecontractauthordoesnot                 \nneed to worry about protecting againstsuchattacks, becauseifexecutionstopshalfwaythroughthe               \nchanges get reverted. \n\u25cf A financial contract works by taking the median of nine proprietary data feeds in order to                \nminimize risk. An attacker takes over one of the data feeds, which is designed to be modifiable via                  \nthe variable-address-call mechanismdescribed in the section on DAOs, and converts it to run an               \ninfinite loop, thereby attempting to force any attempts to claimfunds fromthe financial contract to                \nrun out of gas. However, the financial contract can set a gas limit on the message to prevent this                   \nproblem. \nThe alternative to Turing-completeness is Turing-incompleteness, where JUMPand JUMPI do not exist and              \nonly one copy of each contract is allowedtoexistinthecall stackatanygiventime. Withthissystem, thefee                       \nsystemdescribed and the uncertainties around the effectiveness of our solution might not be necessary, as                \nthecostofexecutingacontractwouldbeboundedabovebyitssize. Additionally, Turing-incompletenessisnot                 \neven that big a limitation; out of all the contract examples we have conceived internally, so far only one                   \nrequired a loop, and even that loop could be removed by making 26 repetitions of a one-line piece of code.                    \nGiven the serious implications of Turing-completeness, and the limited benefit, why not simply have a               \nTuring-incomplete language? In reality, however, Turing-incompleteness is far froma neat solution to the              \nproblem. To see why, consider the following contracts: \nC 0 : \u00a0 c a l l ( C 1 ) \u037e \u00a0 c a l l ( C 1 ) \u037e \u00a0\nC 1 : \u00a0 c a l l ( C 2 ) \u037e \u00a0 c a l l ( C 2 ) \u037e \u00a0\nC 2 : \u00a0 c a l l ( C 3 ) \u037e \u00a0 c a l l ( C 3 ) \u037e \u00a0\n. . . \u00a0\nC 4 9 : \u00a0 c a l l ( C 5 0 ) \u037e \u00a0 c a l l ( C 5 0 ) \u037e \u00a0\nC 5 0 : \u00a0 (run one step of a program and record the change in storage) \n \nNow, send a transaction to A. Thus, in 51 transactions, we have a contract that takes up 250 computational                   \nsteps. Miners could try to detect such logic bombs ahead of time by maintaining a value alongside each                  \ncontract specifying the maximumnumber of computational steps that it can take, and calculating this for                \ncontracts calling other contracts recursively, but that would require miners to forbid contracts that create               \nother contracts (since the creation and execution of all 50contractsabovecouldeasilyberolledintoasingle                   \ncontract). Another problematic point is that the address field of a message isavariable, soingeneral itmay                    \nnot even be possible to tell which other contracts a given contract will call aheadoftime. Hence, all inall, we                      \nhave a surprising conclusion: Turing-completeness is surprisingly easy to manage, and the lack of              \n \nPage 29 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3594, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "695ea630-8da4-43a5-8fdb-b1413e183f95": {"__data__": {"id_": "695ea630-8da4-43a5-8fdb-b1413e183f95", "embedding": null, "metadata": {"page_label": "30", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4acccff3-2abd-40cd-9ec2-42f61846c412", "node_type": "4", "metadata": {"page_label": "30", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "d2b67fd72badf92611fb707bf620fd0b65c478ed91ebd3a9a4f730c80eeac788", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Turing-completeness is equally surprisingly difficult to manage unless the exactsamecontrolsareinplace-                \nbut in that case why not just let the protocol be Turing-complete? \n\u00a0\nCurrency And Issuance \nThe Ethereumnetwork includes its own built-in currency, ether, which serves the dual purpose of providing a                 \nprimary liquidity layer to allow for efficient exchange between various types of digital assets and, more                \nimportantly, of providing a mechanism for paying transaction fees. For convenience and to avoid future               \nargument (see the current mBTC/uBTC/satoshi debate in Bitcoin), the denominations will be pre-labelled: \n\u25cf 1: wei \n\u25cf 10^12: szabo \n\u25cf 10^15: finney \n\u25cf 10^18: ether \nThisshouldbetakenasanexpandedversionoftheconceptof\"dollars\"and\"cents\"or\"BTC\"and\"satoshi\".Inthenearfuture,weexpect\"ether\"tobe                            \nused for ordinary transactions, \"finney\" for microtransactions and \"szabo\" and \"wei\" for technical discussions around fees and protocol                  \nimplementation. \nThe issuance model will be as follows: \n\u25cf Ether will be released in a currency sale at the price of 1337-2000 ether per BTC, a                 \nmechanismintended to fund the Ethereumorganization and pay for development that has been              \nusedwithsuccessbyanumberofothercryptographicplatforms. Earlierbuyerswill benefitfromlarger                \ndiscounts. The BTC received from the sale will be used entirely to pay salaries and bounties to                 \ndevelopers, researchers and projects in the cryptocurrency ecosystem. \n\u25cf 0.099x the total amount sold will be allocated to early contributors who participated in              \ndevelopment before BTC funding or certainty of funding was available, and another 0.099x will be               \nallocated to long-term research projects. \n\u25cf 0.26x the total amount sold will be allocated to miners per year forever after that point. \n \n \n \n \n \nPage 30 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1989, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "640ad04b-581e-4a6d-ade6-8b9a5ca7f3f1": {"__data__": {"id_": "640ad04b-581e-4a6d-ade6-8b9a5ca7f3f1", "embedding": null, "metadata": {"page_label": "31", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8544df16-80ce-4271-ae4d-7bd7e8c46103", "node_type": "4", "metadata": {"page_label": "31", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "8cc0188a8f4b13e6c445679e7a9fbfca93dec5e14d33a7ea5822dc0f2fc001ba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Issuance Breakdown \nThe permanent linear supply growth model reduces the risk of what some see as excessive wealth                \nconcentration in Bitcoin, and gives individuals living in present and future eras a fair chance to acquire                 \ncurrency units, while at thesametimediscouragingdepreciationofetherbecausethe\"supplygrowthrate\"as                 \na percentagestill tendstozeroovertime. Wealsotheorizethatbecausecoinsarealwayslostovertimedueto                     \ncarelessness, death, etc, and coin loss can be modeled as a percentage of the total supply peryear, thatthe                    \ntotal currency supply in circulation will in fact eventually stabilize at a value equal to the annual issuance                  \ndivided by the loss rate (eg. at a loss rate of 1%, once the supply reaches 26Xthen 0.26Xwill be mined and                       \n0.26X lost every year, creating an equilibrium). \n\u00a0\nGroup At launch After 1 year After 5 years \nCurrency units 1.198X 1.458X 2.498X \nPurchasers 83.5% 68.6% 40.0% \nEarly contributor distribution 8.26% 6.79% 3.96% \nLong-term endowment 8.26% 6.79% 3.96% \nMiners 0% 17.8% 52.0% \n \nDespite the linear currency issuance, justlikewithBitcoinovertimethesupplygrowthrateneverthelesstends                 \nto zero. \n \n \nPage 31 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1307, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0ce9ccad-5bb5-4c51-8c42-33bd5f1959da": {"__data__": {"id_": "0ce9ccad-5bb5-4c51-8c42-33bd5f1959da", "embedding": null, "metadata": {"page_label": "32", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c21dbe4-13e4-4805-9e38-812931e1aa36", "node_type": "4", "metadata": {"page_label": "32", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "48c439a4a7a42a7fabcaec48f211890210ce2428b1e12acbb4c2b2274253a0d5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Mining Centralization \nThe Bitcoin mining algorithm basically works by having miners compute SHA256 on slightly modified              \nversions of the block header millions of times over andoveragain, until eventuallyonenodecomesupwitha                    \nversion whose hash is less than the target (currently around 2190). However, this mining algorithm is                \nvulnerable to two forms of centralization. First, the mining ecosystemhas come to be dominated by ASICs                 \n(application-specific integrated circuits), computer chips designed for, and thereforethousandsoftimesmore             \nefficient at, the specific task of Bitcoin mining. This means that Bitcoin mining is no longer a highly                  \ndecentralized and egalitarian pursuit, requiring millions of dollars of capital to effectively participate in.              \nSecond, most Bitcoin miners do not actually perform block validation locally; instead, they rely on a                \ncentralized mining pool to provide the block headers. This problemis arguably worse: as of the time of this                   \nwriting, the top two mining pools indirectly control roughly 50% of processing power in the Bitcoin network,                 \nalthough this is mitigated by the fact that miners can switch to other mining pools if a pool or coalition                    \nattempts a 51% attack. \nThe current intent at Ethereumis to use a mining algorithmbased on randomly generating a unique hash                  \nfunction for every 1000 nonces, using a sufficiently broad range of computation to remove the benefit of                 \nspecialized hardware. Such a strategy will certainly not reduce the gain of centralization to zero, but itdoes                  \nnot needto. Notethateachindividual user, ontheirprivatelaptopordesktop, canperformacertainquantityof                    \nmining activity almost for free, paying only electricity costs, but afterthepointof100%CPUutilizationoftheir                   \ncomputeradditional miningwill requirethemtopayforbothelectricityandhardware. ASICminingcompanies                \nneed to pay for electricity and hardware starting fromthe first hash. Hence, if the centralization gaincanbe                   \nkept to below this ratio, (E + H) / E, then even if ASICs are made there will still be room for ordinary miners. \nAdditionally, we intend to design the mining algorithm so that mining requires access to the entire                \nblockchain, forcing miners tostoretheentireblockchainandatleastbecapableofverifyingeverytransaction.                 \nThis removes the need for centralized mining pools; although mining pools canstill servethelegitimaterole                 \nof evening out the randomness of reward distribution, this function can be servedequallywell bypeer-to-peer                 \npools withnocentral control. Itadditionallyhelpsfightcentralization, byincreasingthenumberoffull nodesin                  \nthe network so that the network remains reasonably decentralized even if most ordinary users prefer light                \nclients. \n \n \n \n\u00a0\n \nPage 32 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3127, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55905983-f154-4a88-b1cb-c935fae12565": {"__data__": {"id_": "55905983-f154-4a88-b1cb-c935fae12565", "embedding": null, "metadata": {"page_label": "33", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c90accd1-f915-4121-90a2-1d81660b90bc", "node_type": "4", "metadata": {"page_label": "33", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "50222d0f9e0afa8e46da9c57e53f3439bb7a8f5d1cc5c34b4fda5dca4a4844f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Scalability \nOne common concern about Ethereumis the issue of scalability. Like Bitcoin, Ethereumsuffers fromtheflaw                 \nthat every transaction needs tobeprocessedbyeverynodeinthenetwork. WithBitcoin, thesizeofthecurrent                    \nblockchain rests at about 20 GB, growing by about 1 MBperhour. IftheBitcoinnetworkweretoprocessVisa's                     \n2000 transactions per second, it would grow by 1 MB per three seconds (1 GB per hour, 8 TB per year).                     \nEthereumis likely to suffer a similar growth pattern, worsenedbythefactthattherewill bemanyapplications                   \non topoftheEthereumblockchaininsteadofjustacurrencyasisthecasewithBitcoin, butamelioratedbythe                     \nfact that Ethereum full nodes need to store just the state instead of the entire blockchain history. \nThe problemwith such a large blockchain size is centralization risk. If the blockchain size increases to, say,                  \n100 TB, then the likely scenario would be that only a very small number of large businesses would run full                    \nnodes, withall regularusersusinglightSPVnodes. Insuchasituation, therearisesthepotential concernthat                   \nthe full nodes could band together and all agree to cheat in some profitable fashion (eg. change the block                   \nreward, give themselves BTC). Light nodes would have no way of detecting this immediately. Of course, at                 \nleastonehonestfull nodewouldlikelyexist, andafterafewhoursinformationaboutthefraudwouldtrickleout                    \nthrough channels like Reddit, but at that point it would be too late: it would be up to the ordinary users to                      \norganize an effort to blacklist the given blocks, a massive and likely infeasible coordination problemon a                 \nsimilar scale as that of pulling off a successful 51%attack. In the case of Bitcoin, thisiscurrentlyaproblem,                     \nbut there exists a blockchain modification suggested by Peter Todd which will alleviate this issue. \nIn the near term, Ethereumwill use two additional strategies to cope with this problem. First, because of the                   \nblockchain-based mining algorithms, at least every miner will be forced to be a full node, creating a lower                  \nbound on the number of full nodes. Second and more importantly, however, we will include an intermediate                 \nstate tree root in the blockchain after processing each transaction. Even if block validation is centralized, as                 \nlong as one honest verifying node exists, the centralization problemcan be circumvented via a verification                \nprotocol. If a miner publishes an invalid block, that block must either be badly formatted, or the state S[n] is                    \nincorrect. Since S[0] is known to be correct, there must be some first state S[i] thatisincorrectwhereS[i-1] is                     \ncorrect. The verifying node would provide the index i, along witha\"proofofinvalidity\"consistingofthesubset                   \nof Patricia tree nodes needing to process APPLY(S[i-1],TX[i]) -> S[i]. Nodes wouldbeabletousethosenodesto                   \nrun that part of the computation, and see that the S[i] generated does not match the S[i] provided. \nAnother, more sophisticated, attack would involve the malicious miners publishing incomplete blocks, so the              \nfull information does not even exist to determine whether or not blocks are valid. The solution to this is a                    \nchallenge-response protocol: verification nodes issue \"challenges\" in the formof target transaction indices,             \nand upon receiving a node alightnodetreatstheblockasuntrusteduntil anothernode, whetherthemineror                    \nanother verifier, provides a subset of Patricia nodes as a proof of validity. \n \nPage 33 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3912, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bce3c9bd-5f52-4125-9c36-7a883ed24bce": {"__data__": {"id_": "bce3c9bd-5f52-4125-9c36-7a883ed24bce", "embedding": null, "metadata": {"page_label": "34", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91c33dfd-512f-4248-9030-94a40fc90fcc", "node_type": "4", "metadata": {"page_label": "34", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "8904e748e9f3a6205323a2420896d3edf4e563d726b96f0d847f870500dbcb2f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Putting It All Together: Decentralized Applications \nThe contract mechanism described above allows anyone to build what is essentially a command line               \napplication run on a virtual machine that is executed by consensus across the entire network, allowing it to                  \nmodify a globally accessible state as its \u201chard drive\u201d. However, for most people, the command line interface                 \nthat is the transaction sending mechanism is not sufficiently user-friendly to make decentralization an              \nattractive mainstreamalternative. Tothisend, acomplete\u201cdecentralizedapplication\u201d shouldconsistofboth              \nlow-level business-logic components, whether implemented entirely on Ethereum, using a combination of            \nEthereumand other systems (eg. a P2Pmessaging layer, oneofwhichiscurrentlyplannedtobeputintothe                    \nEthereum clients) or other systems entirely, and high-level graphical user interface components. The             \nEthereumclient\u2019s design is to serve as a web browser, but include support for a \u201ceth\u201d Javascript API object,                   \nwhich specialized web pages viewed in the client will be able tousetointeractwiththeEthereumblockchain.                   \nFromthepointofviewofthe\u201ctraditional\u201dweb, thesewebpagesareentirelystaticcontent, sincetheblockchain                   \nand other decentralized protocols will serve as a complete replacement for the server for the purpose of                 \nhandling user-initiated requests. Eventually, decentralized protocols, hopefully themselves in some fashion           \nusing Ethereum, may be used to store the web pages themselves. \nConclusion \nThe Ethereum protocol was originally conceived as an upgraded version of a cryptocurrency, providing              \nadvanced features such as on-blockchain escrow, withdrawal limits and financial contracts, gambling            \nmarkets and the like via a highly generalized programming language. The Ethereumprotocol would not               \n\"support\" any of the applications directly, but the existence of a Turing-complete programming language              \nmeans that arbitrary contracts can theoretically be created for any transaction type or application. What is                \nmore interesting about Ethereum, however, is that the Ethereumprotocol moves far beyond just currency.               \nProtocols and decentralized applications around decentralized file storage, decentralized computation and           \ndecentralized prediction markets, among dozens of other such concepts, have the potential to substantially              \nincrease the efficiency of the computational industry, and provide a massive boost to other peer-to-peer               \nprotocols by adding for the first time an economic layer. Finally, there is also a substantial array of                  \napplications that have nothing to do with money at all. \nThe concept of an arbitrary state transition function as implemented by the Ethereumprotocol providesfora                 \nplatform with unique potential; rather than being a closed-ended, single-purpose protocol intended for a              \nspecific array of applications in data storage, gamblingorfinance, Ethereumisopen-endedbydesign, andwe                 \nbelieve that it is extremely well-suited to serving as a foundational layer for a very large number of both                   \nfinancial and non-financial protocols in the years to come. \n \nPage 34 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3493, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bd942ac1-c8d3-4079-b067-bc458726fd4d": {"__data__": {"id_": "bd942ac1-c8d3-4079-b067-bc458726fd4d", "embedding": null, "metadata": {"page_label": "35", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "893687c5-580c-49ad-90bb-0ff3d9c4fd8c", "node_type": "4", "metadata": {"page_label": "35", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "4f5e277494f36ac30436ed275c4e5bde0c6bb34dad2ac2124cfba0004503f9ec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Notes and Further Reading \nNotes \n1. A sophisticated reader may notice that in fact a Bitcoin address is the hash of the elliptic curve                  \npublic key, and not the public key itself. However, it is infactperfectlylegitimatecryptographicterminologyto                  \nrefer tothepubkeyhashasapublickeyitself. ThisisbecauseBitcoin'scryptographycanbeconsideredtobea                     \ncustomdigital signature algorithm, wherethepublickeyconsistsofthehashoftheECCpubkey, thesignature                  \nconsists of the ECC pubkey concatenated with the ECC signature, and the verification algorithminvolves               \nchecking the ECC pubkey in the signature against the ECCpubkey hash provided as a public key and then                   \nverifying the ECC signature against the ECC pubkey. \n2. Technically, the median of the 11 previous blocks. \n3. Internally, 2 and \"CHARLIE\" are both numbers, with the latter being in big-endian base 256               \nrepresentation. Numbers can be at least 0 and at most 2^256-1. \n          Further Reading \n1. Intrinsic value: https://tinyurl.com/BitcoinMag-IntrinsicValue \n2. Smart property: https://en.bitcoin.it/wiki/Smart_Property \n3. Smart contracts: https://en.bitcoin.it/wiki/Contracts \n4. B-money: http://www.weidai.com/bmoney.txt \n5. Reusable proofs of work: http://www.finney.org/~hal/rpow/ \n6. Secure property titles with owner authority: http://szabo.best.vwh.net/securetitle.html \n7. Bitcoin whitepaper: http://bitcoin.org/bitcoin.pdf \n8. Namecoin: https://namecoin.org/ \n9. Zooko's triangle: http://en.wikipedia.org/wiki/Zooko's_triangle \n10. Colored coins whitepaper: https://tinyurl.com/coloredcoin-whitepaper \n11. Mastercoin whitepaper: https://github.com/mastercoin-MSC/spec \n12. Decentralized autonomous corporations, Bitcoin Magazine: https://tinyurl.com/Bootstrapping-DACs \n13. Simplified payment verification:https://en.bitcoin.it/wiki/Scalability#Simplifiedpaymentverification \n14. Merkle trees: http://en.wikipedia.org/wiki/Merkle_tree \n15. Patricia trees: http://en.wikipedia.org/wiki/Patricia_tree \n16. GHOST: http://www.cs.huji.ac.il/~avivz/pubs/13/btc_scalability_full.pdf \n17. StorJ and Autonomous Agents, Jeff Garzik: https://tinyurl.com/storj-agents \n18. Mike Hearn on Smart Property at Turing Festival: http://www.youtube.com/watch?v=Pu4PAMFPo5Y \n \nPage 35 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 10, "end_char_idx": 2367, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ccfcbfee-6997-4e2b-988a-25ec13c783de": {"__data__": {"id_": "ccfcbfee-6997-4e2b-988a-25ec13c783de", "embedding": null, "metadata": {"page_label": "36", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c87bf89-b4f3-4c3f-b455-c865f90f8239", "node_type": "4", "metadata": {"page_label": "36", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "478e77c2656257ec12c111fe78d274840047beb242db656d93139660a7a9ba38", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "19. Ethereum RLP: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP \n20. Ethereum Merkle Patricia trees: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-Patricia-Tree \n21. Peter Todd on Merkle sum trees:http://sourceforge.net/p/bitcoin/mailman/message/31709140/ \n \nPage 36 \nethereum.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 296, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7255651e-02e5-4cb0-b51e-9c010b975b21": {"__data__": {"id_": "7255651e-02e5-4cb0-b51e-9c010b975b21", "embedding": null, "metadata": {"page_label": "1", "file_name": "RESUME -LATEST-.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\RESUME -LATEST-.pdf", "file_type": "application/pdf", "file_size": 141443, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e1425a2d-2cdc-4544-8a21-ca69d7eb1cd5", "node_type": "4", "metadata": {"page_label": "1", "file_name": "RESUME -LATEST-.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\RESUME -LATEST-.pdf", "file_type": "application/pdf", "file_size": 141443, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "f4a52fa03ab5374756a29f93fea50a7ea683e8fb9ab72e5bd6b5ee805d4a6947", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "PARTHIV RAWAT\n/gtbgithub.com/Hack-Mav | linkedin.com/in/parthiv-rawat | alpha.parthiv05@gmail.com |/ne+91-9589883958\nGFG Profile | LeetCode Profile | HackerRank Profile | CodeChef Profile\nEducation\nPDPM Indian Institute of Information Technology Design and Manufacturing Jabalpur, India (Jul 2018 - Aug 2022)\nBachelors of Technology in Mechanical Engineering (GPA: 7.8/10.0)\nThe Coding School (Jul 2020 - Aug 2021)\nQuantum Computing\nKiddy\u2019s Corner Public School (Apr 2016 - Jun 2018)\nHigh School Education\nExperience\nFlyhigh EduTech Solutions (May 2023 - Aug 2024)\nBackend Developer Noida, India\n\u2022 Developed adecentralized identity application backend from scratch to issueverifiable credentials.\n\u2022 Designed and implemented secureAPI endpoints for credentialissuance, verification, and revocation.\n\u2022 Integrated cryptographic functions to ensure theintegrity and authenticity of credentials.\n\u2022 Collaborated with frontend developers to provide aseamless user experience.\nGao Tek Inc. (Jan 2022 - Apr 2023)\nSoftware Development Intern, Internship Bangalore, India\n\u2022 Understanding demands and requests from clients and points discussion with senior developers and other interns.\n\u2022 Doing research on different requirements or modules using different environments and IDEs which best suits our needs.\n\u2022 Debugging existing code base and integrating APIs, Buffer, Hardware Driver, and Modem together in a library.\nSolar Secure Solutions (Dec 2022 - Jan 2023)\nData Science Intern, Internship Bangalore, India\n\u2022 Commissioning and decommissioning of data sets and managingmaster dataincluding creation, updates, and deletion.\n\u2022 Assessing tests, implementing new orupgraded software, and assisting withstrategic decisionson new systems.\n\u2022 ML algorithmto create the model and providing technical expertise indata storage, data mining, anddata cleansing.\nProjects\nQR Code Generator Application (Jul 2022 - Aug 2022)\nUdemy Learning Github\n\u2022 Create QR Code on fly with URLGET Requestwhich can store up to4296 alphanumeric charactersof arbitrary text.\n\u2022 Uses Google Chart APIand requires three query parameters i.eQR Code Specifier, Image Size, Information to store.\n\u2022 Application in contactless payments, banners and advertising, ordering at restaurants, product packaging, etc.\nBasic Arithmetic Calculator (Apr 2022 - May 2022)\nYoutube Learning Github\n\u2022 Application which solvesArithmetic Expression just like a regular calculator and displays results using theevalmethod.\n\u2022 Uses Web Technologies likeHTML, CSSfor creatingDOM, andJavaScript for creating events and applying logics.\n\u2022 Application in solving day-to-day tasks involving numbers, limited resource calculator usage like in competitive exams.\nHeart Disease Monitoring System (Jan 2021 - Apr 2021)\nProf. Kusum Kumar Bharti, IIITDM Jabalpur Github\n\u2022 Analyze real-life data and parse for useful information and applying differentMachine Learning Algorithms.\n\u2022 MLalgorithmsusedare LogisticRegression, NaiveBayes, SVM,K-NN,DecisionTree, RandomForest, NeuralNetworks .\n\u2022 Application in finding most relevant heart disease associated with existing symptoms with maximum efficiency.\nTechnical Skills\nProgramming languages: C++, C, Python, Java IDE: Visual Studio Code, IntelliJ, PyCharm\nFront-End Technologies:HTML, CSS, JavaScript, ReactJS Back-End Technologies:NodeJS, ExpressJS\nDatabases: MySQL, Oracle, MongoDB APIs: RESTful\nML/AI: Numpy, Pandas, Matplotlib, Scikit-learn Miscellaneous: Git, Shell Scripting, LaTeX\nSoft Skills\nInterpersonal: Communication, Decision Making, Team Work Personal: Responsibility, Punctuality, Innovation\nSituational: Adaptability, Problem Solving, Negotiation\nRelevant Coursework\nComputer Science: Machine Learning, Data Structures and Algorithms, Databases, Operating Systems, Computer Networks\nMathematics: Optimization, Probability and Random Processes, Calculus, Linear Algebra, Differential Equations\nAchievements\nCoding Problems Solved more than 1000problems at different coding platforms. (2022-2024)\nHackerRank Badges Earned 7 badges(4 4-star)in HackerRank Platform. (2022-2024)\nBachelor Thesis Project Completed thesis project inThermal Analysis of Single Point Cutting Tool (2022)\nGATE 2022 Secured 7384th Rankamong 126979 candidates. (2021-2022)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4228, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31c9ba57-da88-44ae-95b0-d2557dfeb0c0": {"__data__": {"id_": "31c9ba57-da88-44ae-95b0-d2557dfeb0c0", "embedding": null, "metadata": {"page_label": "Cover", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcf158e7-a7bb-41bd-8f04-3cded112e909", "node_type": "4", "metadata": {"page_label": "Cover", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "4d93819cedc1c3e3f5d60809b6cdeb761e5069d236c5abcb36a6e7d9da9ef2db", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c33b5ee5-a06a-4e42-9752-15499a34af95": {"__data__": {"id_": "c33b5ee5-a06a-4e42-9752-15499a34af95", "embedding": null, "metadata": {"page_label": "i", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e9a04748-e20d-4777-85b7-56b8c6b1a2ba", "node_type": "4", "metadata": {"page_label": "i", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "2cf4fe83d9e5f4f33834a15597d8fdd5de7a8c25fd5fa7af23503c5c53fece24", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Mark Richards\nSoftware Architecture\nPatterns\nUnderstanding Common Architecture\nPatterns and When to Use Them", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 108, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8d34ab33-0bfa-4001-bc87-50794772e57e": {"__data__": {"id_": "8d34ab33-0bfa-4001-bc87-50794772e57e", "embedding": null, "metadata": {"page_label": "ii", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e86f5ca-c655-4ecc-ac4f-e27e411d2cb1", "node_type": "4", "metadata": {"page_label": "ii", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "f0156bf2c5cb876eeed1a8b3134b2e7effff53bffa91ccced324a0162106baea", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "978-1-491-92424-2\n[LSI]\nSoftware Architecture Patterns\nby Mark Richards\nCopyright \u00a9 2015 O\u2019Reilly Media, Inc. All rights reserved.\nPrinted in the United States of America.\nPublished by O\u2019Reilly Media, Inc., 1005 Gravenstein Highway North, Sebastopol, CA\n95472.\nO\u2019Reilly books may be purchased for educational, business, or sales promotional use.\nOnline editions are also available for most titles ( http://oreilly.com/safari). For more\ninformation, contact our corporate/institutional sales department: 800-998-9938 or\ncorporate@oreilly.com.\nEditor: Heather Scherer\nProduction Editor: Colleen Lobner\nCopyeditor: Amanda Kersey\nInterior Designer: David Futato\nCover Designer: Ellie Volckhausen\nIllustrator: Rebecca Demarest\nFebruary 2015:  First Edition\nRevision History for the First Edition\n2015-02-24: First Release\n2015-03-30: Second Release\n2017-06-22: Third Release\n \nThe O\u2019Reilly logo is a registered trademark of O\u2019Reilly Media, Inc. Software Architec\u2010\nture Patterns, the cover image, and related trade dress are trademarks of O\u2019Reilly\nMedia, Inc.\nWhile the publisher and the author have used good faith efforts to ensure that the\ninformation and instructions contained in this work are accurate, the publisher and\nthe author disclaim all responsibility for errors or omissions, including without limi\u2010\ntation responsibility for damages resulting from the use of or reliance on this work.\nUse of the information and instructions contained in this work is at your own risk. If\nany code samples or other technology this work contains or describes is subject to\nopen source licenses or the intellectual property rights of others, it is your responsi\u2010\nbility to ensure that your use thereof complies with such licenses and/or rights.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1735, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42687f89-9d6d-45ea-936d-f3ff8310053c": {"__data__": {"id_": "42687f89-9d6d-45ea-936d-f3ff8310053c", "embedding": null, "metadata": {"page_label": "iii", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ac4e317-614b-4bcf-91a4-acaa179ebe49", "node_type": "4", "metadata": {"page_label": "iii", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "b9467889cc74db697f2adf12621d1f4f13aac7fa6ffb5340d208e7cf5d80aa91", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Table of Contents\nIntroduction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  v\n1. Layered Architecture. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1\nPattern Description                                                                             1\nKey Concepts                                                                                        3\nPattern Example                                                                                   5\nConsiderations                                                                                     7\nPattern Analysis                                                                                   8\n2. Event-Driven Architecture. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11\nMediator Topology                                                                            11\nBroker Topology                                                                                14\nConsiderations                                                                                   17\nPattern Analysis                                                                                 18\n3. Microkernel Architecture. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  21\nPattern Description                                                                           21\nPattern Examples                                                                               23\nConsiderations                                                                                   24\nPattern Analysis                                                                                 25\n4. Microservices Architecture Pattern. . . . . . . . . . . . . . . . . . . . . . . . . . . .  27\nPattern Description                                                                           27\nPattern Topologies                                                                             29\nAvoid Dependencies and Orchestration                                        32\nConsiderations                                                                                   33\nPattern Analysis                                                                                 34\niii", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2313, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "26e893e5-93c7-42c7-8113-56cbda90f287": {"__data__": {"id_": "26e893e5-93c7-42c7-8113-56cbda90f287", "embedding": null, "metadata": {"page_label": "iv", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cdee0d00-5589-471c-a3c4-84e51f986f99", "node_type": "4", "metadata": {"page_label": "iv", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "4efeb0fd79277b47fb17f2175577e5ffd11a8c12c69d506bebae8ff35c719702", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5. Space-Based Architecture. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  37\nPattern Description                                                                           38\nPattern Dynamics                                                                              39\nConsiderations                                                                                   42\nPattern Analysis                                                                                 43\nA. Pattern Analysis Summary. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  45\niv | Table of Contents", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 620, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d68e1e14-655e-403e-98b0-3b1568dce68b": {"__data__": {"id_": "d68e1e14-655e-403e-98b0-3b1568dce68b", "embedding": null, "metadata": {"page_label": "v", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "118fe40f-44f2-43ec-84c3-8be09c1bcf0f", "node_type": "4", "metadata": {"page_label": "v", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "34513c94056cf41c7d9a1f6659e23e64ad898c80e257a755eea275549762b963", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction\nIt\u2019s all too common for developers to start coding an application\nwithout a formal architecture in place. Without a clear and well-\ndefined architecture, most developers and architects will resort to\nthe de facto standard traditional layered architecture pattern (also\ncalled the n-tier architecture), creating implicit layers by separating\nsource-code modules into packages. Unfortunately, what often\nresults from this practice is a collection of unorganized source-code\nmodules that lack clear roles, responsibilities, and relationships to\none another. This is commonly referred to as the big ball of mud\narchitecture anti-pattern. \nApplications lacking a formal architecture are generally tightly cou\u2010\npled, brittle, difficult to change, and without a clear vision or direc\u2010\ntion. As a result, it is very difficult to determine the architectural\ncharacteristics of the application without fully understanding the\ninner-workings of every component and module in the system.\nBasic questions about deployment and maintenance are hard to\nanswer: Does the architecture scale? What are the performance\ncharacteristics of the application? How easily does the application\nrespond to change? What are the deployment characteristics of the\napplication? How responsive is the architecture? \nArchitecture patterns help define the basic characteristics and\nbehavior of an application. For example, some architecture patterns\nnaturally lend themselves toward highly scalable applications,\nwhereas other architecture patterns naturally lend themselves\ntoward applications that are highly agile. Knowing the characteris\u2010\ntics, strengths, and weaknesses of each architecture pattern is neces\u2010\nv", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1693, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0c211020-a7f3-43a7-b6ad-5d2f7876f15a": {"__data__": {"id_": "0c211020-a7f3-43a7-b6ad-5d2f7876f15a", "embedding": null, "metadata": {"page_label": "vi", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf5854cd-492b-4572-a601-899c3ac244c9", "node_type": "4", "metadata": {"page_label": "vi", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "7aedef574de199367b51d2a0e775f85eb4735fa3b1171722a21f080df1f4f9f3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "sary in order to choose the one that meets your specific business\nneeds and goals. \nAs an architect, you must always justify your architecture decisions,\nparticularly when it comes to choosing a particular architecture pat\u2010\ntern or approach. The goal of this report is to give you enough infor\u2010\nmation to make and justify that decision.\nvi | Introduction", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 354, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "26b9d5f2-6fa5-4a23-8d36-185c55877b1c": {"__data__": {"id_": "26b9d5f2-6fa5-4a23-8d36-185c55877b1c", "embedding": null, "metadata": {"page_label": "1", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "425d2916-e313-4f69-89bd-7aa20bf0cb9c", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "c933ccfe5a60d9a14db41c316e0264b83b9cf2ccb039b2068c33ac52465c7e7d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CHAPTER 1\nLayered Architecture\nThe most common architecture pattern is the layered architecture\npattern, otherwise known as the n-tier architecture pattern. This\npattern is the de facto standard for most Java EE applications and\ntherefore is widely known by most architects, designers, and devel\u2010\nopers. The layered architecture pattern closely matches the tradi\u2010\ntional IT communication and organizational structures found in\nmost companies, making it a natural choice for most business appli\u2010\ncation development efforts. \nPattern Description\nComponents within the layered architecture pattern are organized\ninto horizontal layers, each layer performing a specific role within\nthe application (e.g., presentation logic or business logic). Although\nthe layered architecture pattern does not specify the number and\ntypes of layers that must exist in the pattern, most layered architec\u2010\ntures consist of four standard layers: presentation, business, persis\u2010\ntence, and database ( Figure 1-1 ). In some cases, the business layer\nand persistence layer are combined into a single business layer, par\u2010\nticularly when the persistence logic (e.g., SQL or HSQL) is embed\u2010\nded within the business layer components. Thus, smaller\napplications may have only three layers, whereas larger and more\ncomplex business applications may contain five or more layers. \nEach layer of the layered architecture pattern has a specific role and\nresponsibility within the application. For example, a presentation\nlayer would be responsible for handling all user interface and\n1", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1550, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "41f7fe7e-454a-4c76-b461-c23d941c73ed": {"__data__": {"id_": "41f7fe7e-454a-4c76-b461-c23d941c73ed", "embedding": null, "metadata": {"page_label": "2", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dbdb6873-5000-4135-a110-26db79227446", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "89d8eca94fd1f0c767eca15bb30b5e59ba85519fac228f1b2bef369263d63d33", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "browser communication logic, whereas a business layer would be\nresponsible for executing specific business rules associated with the\nrequest. Each layer in the architecture forms an abstraction around\nthe work that needs to be done to satisfy a particular business\nrequest. For example, the presentation layer doesn\u2019t need to know\nor worry about how to get customer data; it only needs to display\nthat information on a screen in particular format. Similarly, the\nbusiness layer doesn\u2019t need to be concerned about how to format\ncustomer data for display on a screen or even where the customer\ndata is coming from; it only needs to get the data from the persis\u2010\ntence layer, perform business logic against the data (e.g., calculate\nvalues or aggregate data), and pass that information up to the pre\u2010\nsentation layer.  \nFigure 1-1. Layered architecture pattern\nOne of the powerful features of the layered architecture pattern is\nthe separation of concerns among components. Components within\na specific layer deal only with logic that pertains to that layer. For\nexample, components in the presentation layer deal only with pre\u2010\nsentation logic, whereas components residing in the business layer\ndeal only with business logic. This type of component classification\nmakes it easy to build effective roles and responsibility models into\nyour architecture, and also makes it easy to develop, test, govern,\nand maintain applications using this architecture pattern due to\nwell-defined component interfaces and limited component scope.\n2 | Chapter 1: Layered Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1563, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5dea4450-2f46-408e-909d-83d0aabfc8a3": {"__data__": {"id_": "5dea4450-2f46-408e-909d-83d0aabfc8a3", "embedding": null, "metadata": {"page_label": "3", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a05793ba-216a-4e4c-8536-56644448f3cb", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "55d00439ae5a343548980e4fc7c70f7a13f137079d51a03cfc9e5a290e0dc706", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Key Concepts\nNotice in Figure 1-2  that each of the layers in the architecture is\nmarked as being closed. This is a very important concept in the lay\u2010\nered architecture pattern. A closed layer means that as a request\nmoves from layer to layer, it must go through the layer right below it\nto get to the next layer below that one. For example, a request origi\u2010\nnating from the presentation layer must first go through the busi\u2010\nness layer and then to the persistence layer before finally hitting the\ndatabase layer. \nFigure 1-2. Closed layers and request access\nSo why not allow the presentation layer direct access to either the\npersistence layer or database layer? After all, direct database access\nfrom the presentation layer is much faster than going through a\nbunch of unnecessary layers just to retrieve or save database infor\u2010\nmation. The answer to this question lies in a key concept known\nas layers of isolation. \nThe layers of isolation concept means that changes made in one\nlayer of the architecture generally don\u2019t impact or affect components\nin other layers: the change is isolated to the components within that\nlayer, and possibly another associated layer (such as a persistence\nlayer containing SQL). If you allow the presentation layer direct\naccess to the persistence layer, then changes made to SQL within the\nKey Concepts | 3", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1343, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6017467d-d056-45a3-8587-0e0a0ce9d8cd": {"__data__": {"id_": "6017467d-d056-45a3-8587-0e0a0ce9d8cd", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccfc5e28-57a6-4d83-8047-0f26408f3690", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "2e908bcee1b7b6ff9a6d30aa44da2c5a9a79408ad5177547598079d5d070884c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "persistence layer would impact both the business layer and the pre\u2010\nsentation layer, thereby producing a very tightly coupled application\nwith lots of interdependencies between components. This type of\narchitecture then becomes very hard and expensive to change.  \nThe layers of isolation concept also means that each layer is inde\u2010\npendent of the other layers, thereby having little or no knowledge of\nthe inner workings of other layers in the architecture. To understand\nthe power and importance of this concept, consider a large refactor\u2010\ning effort to convert the presentation framework from JSP (Java\nServer Pages) to JSF (Java Server Faces). Assuming that the contracts\n(e.g., model) used between the presentation layer and the business\nlayer remain the same, the business layer is not affected by the refac\u2010\ntoring and remains completely independent of the type of user-\ninterface framework used by the presentation layer.  \nWhile closed layers facilitate layers of isolation and therefore help\nisolate change within the architecture, there are times when it makes\nsense for certain layers to be open. For example, suppose you want\nto add a shared-services layer to an architecture containing com\u2010\nmon service components accessed by components within the busi\u2010\nness layer (e.g., data and string utility classes or auditing and logging\nclasses). Creating a services layer is usually a good idea in this case\nbecause architecturally it restricts access to the shared services to the\nbusiness layer (and not the presentation layer). Without a separate\nlayer, there is nothing architecturally that restricts the presentation\nlayer from accessing these common services, making it difficult to\ngovern this access restriction.  \nIn this example, the new services layer would likely reside below the\nbusiness layer to indicate that components in this services layer are\nnot accessible from the presentation layer. However, this presents a\nproblem in that the business layer is now required to go through the\nservices layer to get to the persistence layer, which makes no sense at\nall. This is an age-old problem with the layered architecture, and is\nsolved by creating open layers within the architecture.  \nAs illustrated in Figure 1-3, the services layer in this case is marked\nas open,  meaning requests are allowed to bypass this open layer and\ngo directly to the layer below it. In the following example, since the\nservices layer is open, the business layer is now allowed to bypass it\nand go directly to the persistence layer, which makes perfect sense.  \n4 | Chapter 1: Layered Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2596, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ede1a952-ed6e-40f2-a79a-bdbcff39a9b4": {"__data__": {"id_": "ede1a952-ed6e-40f2-a79a-bdbcff39a9b4", "embedding": null, "metadata": {"page_label": "5", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a464ed99-9f5b-4b1e-8647-cddd1967eb90", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "cad820aeec27904577a42028dfaf640363247157a94f018ba29b0184a7a7efbb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Figure 1-3. Open layers and request flow\nLeveraging the concept of open and closed layers helps define the\nrelationship between architecture layers and request flows and also\nprovides designers and developers with the necessary information to\nunderstand the various layer access restrictions within the architec\u2010\nture. Failure to document or properly communicate which layers in\nthe architecture are open and closed (and why) usually results in\ntightly coupled and brittle architectures that are very difficult to test,\nmaintain, and deploy.\nPattern Example\nTo illustrate how the layered architecture works, consider a request\nfrom a business user to retrieve customer information for a particu\u2010\nlar individual as illustrated in Figure 1-4 . The black arrows show\nthe request flowing down to the database to retrieve the customer\ndata, and the red arrows show the response flowing back up to the\nscreen to display the data. In this example, the customer informa\u2010\ntion consists of both customer data and order data (orders placed by\nthe customer).  \nPattern Example | 5", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1068, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7826f417-112b-4bca-9649-c05730c957ee": {"__data__": {"id_": "7826f417-112b-4bca-9649-c05730c957ee", "embedding": null, "metadata": {"page_label": "6", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1a47164-ab27-4155-9168-3c808525a41a", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "3aaa298d82b6e629d2299a7182208ee9939f3b41983cf90923393c364dbff737", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The customer screen is responsible for accepting the request and dis\u2010\nplaying the customer information. It does not know where the data\nis, how it is retrieved, or how many database tables must be queries\nto get the data. Once the customer screen receives a request to get\ncustomer information for a particular individual, it then forwards\nthat request onto the customer delegate  module. This module is\nresponsible for knowing which modules in the business layer can\nprocess that request and also how to get to that module and what\ndata it needs (the contract). The customer object in the business layer\nis responsible for aggregating all of the information needed by the\nbusiness request (in this case to get customer information). This\nmodule calls out to the customer dao (data access object) module in\nthe persistence layer to get customer data, and also the order dao\nmodule to get order information. These modules in turn execute\nSQL statements to retrieve the corresponding data and pass it back\nup to the customer object in the business layer. Once the customer\nobject receives the data, it aggregates the data and passes that infor\u2010\nmation back up to the customer delegate, which then passes that\ndata to the customer screen to be presented to the user.      \nFigure 1-4. Layered architecture example\nFrom a technology perspective, there are literally dozens of ways\nthese modules can be implemented. For example, in the Java plat\u2010\nform, the customer screen can be a (JSF) Java Server Faces screen\n6 | Chapter 1: Layered Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1543, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e3400e93-51c7-450a-b301-4a41ab533dcd": {"__data__": {"id_": "e3400e93-51c7-450a-b301-4a41ab533dcd", "embedding": null, "metadata": {"page_label": "7", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a53e4fa-419d-43fc-afcc-491ed6df5601", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "3d2bf5552694680c262ad192beb6b2c5eda6262539ce79d1afd6a5268ee534a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "coupled with the customer delegate as the managed bean compo\u2010\nnent. The customer object in the business layer can be a local Spring\nbean or a remote EJB3 bean. The data access objects illustrated in\nthe previous example can be implemented as simple POJO\u2019s (Plain\nOld Java Objects), MyBatis XML Mapper files, or even objects\nencapsulating raw JDBC calls or Hibernate queries. From a Micro\u2010\nsoft platform perspective, the customer screen can be an ASP (active\nserver pages) module using the .NET framework to access C# mod\u2010\nules in the business layer, with the customer and order data access\nmodules implemented as ADO (ActiveX Data Objects). \nConsiderations\nThe layered architecture pattern is a solid general-purpose pattern,\nmaking it a good starting point for most applications, particularly\nwhen you are not sure what architecture pattern is best suited for\nyour application. However, there are a couple of things to consider\nfrom an architecture standpoint when choosing this pattern.\nThe first thing to watch out for is what is known as the architecture\nsinkhole anti-pattern. This anti-pattern describes the situation where\nrequests flow through multiple layers of the architecture as simple\npass-through processing with little or no logic performed within\neach layer. For example, assume the presentation layer responds to a\nrequest from the user to retrieve customer data. The presentation\nlayer passes the request to the business layer, which simply passes\nthe request to the persistence layer, which then makes a simple SQL\ncall to the database layer to retrieve the customer data. The data is\nthen passed all the way back up the stack with no additional pro\u2010\ncessing or logic to aggregate, calculate, or transform the data. \nEvery layered architecture will have at least some scenarios that fall\ninto the architecture sinkhole anti-pattern. The key, however, is to\nanalyze the percentage of requests that fall into this category. The\n80-20 rule is usually a good practice to follow to determine whether\nor not you are experiencing the architecture sinkhole anti-pattern. It\nis typical to have around 20 percent of the requests as simple pass-\nthrough processing and 80 percent of the requests having some\nbusiness logic associated with the request. However, if you find that\nthis ratio is reversed and a majority of your requests are simple pass-\nthrough processing, you might want to consider making some of the\nConsiderations | 7", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2442, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b483e8c8-eec1-4288-a735-80c5347b3f9d": {"__data__": {"id_": "b483e8c8-eec1-4288-a735-80c5347b3f9d", "embedding": null, "metadata": {"page_label": "8", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc93fe18-0c66-4c5d-8e38-92bf914b6146", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "b2f46ca713ba49f2b1543499459885c97223969289eb497e9b2f7d06d1035eb1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "architecture layers open, keeping in mind that it will be more diffi\u2010\ncult to control change due to the lack of layer isolation. \nAnother consideration with the layered architecture pattern is that it\ntends to lend itself toward monolithic applications, even if you split\nthe presentation layer and business layers into separate deployable\nunits. While this may not be a concern for some applications, it does\npose some potential issues in terms of deployment, general robust\u2010\nness and reliability, performance, and scalability.   \nPattern Analysis\nThe following table contains a rating and analysis of the common\narchitecture characteristics for the layered architecture pattern. The\nrating for each characteristic is based on the natural tendency\nfor that characteristic as a capability based on a typical implementa\u2010\ntion of the pattern, as well as what the pattern is generally known\nfor. For a side-by-side comparison of how this pattern relates to\nother patterns in this report, please refer to Appendix A at the end\nof this report.\nOverall agility\nRating: Low\nAnalysis: Overall agility is the ability to respond quickly to a\nconstantly changing environment. While change can be isolated\nthrough the layers of isolation feature of this pattern, it is still\ncumbersome and time-consuming to make changes in this\narchitecture pattern because of the monolithic nature of most\nimplementations as well as the tight coupling of components\nusually found with this pattern.\nEase of deployment\nRating: Low\nAnalysis: Depending on how you implement this pattern,\ndeployment can become an issue, particularly for larger applica\u2010\ntions. One small change to a component can require a\nredeployment of the entire application (or a large portion of the\napplication), resulting in deployments that need to be planned,\nscheduled, and executed during off-hours or on weekends.\nAs such, this pattern does not easily lend itself toward a contin\u2010\nuous delivery pipeline, further reducing the overall rating for\ndeployment.\n8 | Chapter 1: Layered Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2041, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "56276afa-bb1c-4ebb-9f33-900d442d2afa": {"__data__": {"id_": "56276afa-bb1c-4ebb-9f33-900d442d2afa", "embedding": null, "metadata": {"page_label": "9", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff7c64ea-384e-4884-bd37-67573fc9ee79", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "11bf88d175c338695e20ea9a65b3b6554c037bebdd5aba7b960e74b40fc02eb3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Testability\nRating: High\nAnalysis: Because components belong to specific layers in the\narchitecture, other layers can be mocked or stubbed, making\nthis pattern is relatively easy to test. A developer can mock a\npresentation component or screen to isolate testing within a\nbusiness component, as well as mock the business layer to test\ncertain screen functionality.\nPerformance\nRating: Low\nAnalysis: While it is true some layered architectures can per\u2010\nform well, the pattern does not lend itself to high-performance\napplications due to the inefficiencies of having to go through\nmultiple layers of the architecture to fulfill a business request.\nScalability\nRating: Low\nAnalysis: Because of the trend toward tightly coupled and mon\u2010\nolithic implementations of this pattern, applications build using\nthis architecture pattern are generally difficult to scale. Y ou can\nscale a layered architecture by splitting the layers into separate\nphysical deployments or replicating the entire application into\nmultiple nodes, but overall the granularity is too broad, making\nit expensive to scale.\nEase of development\nRating: High\nAnalysis: Ease of development gets a relatively high score,\nmostly because this pattern is so well known and is not overly\ncomplex to implement. Because most companies develop appli\u2010\ncations by separating skill sets by layers (presentation, business,\ndatabase), this pattern becomes a natural choice for most\nbusiness-application development. The connection between a\ncompany\u2019s communication and organization structure and the\nway it develops software is outlined is what is called Conway\u2019s\nlaw. Y ou can Google \u201cConway\u2019s law\" to get more information\nabout this fascinating correlation.\nPattern Analysis | 9", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1727, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "faaa9fd6-80f3-461c-8d65-d2ad28129872": {"__data__": {"id_": "faaa9fd6-80f3-461c-8d65-d2ad28129872", "embedding": null, "metadata": {"page_label": "10", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7dc4cce-2b53-4c6e-94eb-e8ec1eb00931", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "89bcdda5a8f2ad539364a1df0194892807e10e51ea090f9cdc114e483fa39ee7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "92ad7149-5706-41bf-8f79-f983b733d9d1": {"__data__": {"id_": "92ad7149-5706-41bf-8f79-f983b733d9d1", "embedding": null, "metadata": {"page_label": "11", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8d6fd736-f3be-45cf-9d39-d54a9d9c039b", "node_type": "4", "metadata": {"page_label": "11", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "87840f38ab6df3d0f10687b8819b33ec55100f9daecd7ade0bc81bd25abe94c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CHAPTER 2\nEvent-Driven Architecture\nThe event-driven architecture pattern is a popular distributed\nasynchronous architecture pattern used to produce highly scalable\napplications. It is also highly adaptable and can be used for small\napplications and as well as large, complex ones. The event-driven\narchitecture is made up of highly decoupled, single-purpose event\nprocessing components that asynchronously receive and process\nevents. \nThe event-driven architecture pattern consists of two main topolo\u2010\ngies, the mediator and the broker. The mediator topology is com\u2010\nmonly used when you need to orchestrate multiple steps within an\nevent through a central mediator, whereas the broker topology is\nused when you want to chain events together without the use of a\ncentral mediator. Because the architecture characteristics and imple\u2010\nmentation strategies differ between these two topologies, it is impor\u2010\ntant to understand each one to know which is best suited for your\nparticular situation.\nMediator Topology\nThe mediator topology is useful for events that have multiple steps\nand require some level of orchestration to process the event. For\nexample, a single event to place a stock trade might require you to\nfirst validate the trade, then check the compliance of that stock trade\nagainst various compliance rules, assign the trade to a broker, calcu\u2010\nlate the commission, and finally place the trade with that broker. All\nof these steps would require some level of orchestration to deter\u2010\n11", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1495, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7d1bc1de-7088-4fb1-9c57-2c3f40815862": {"__data__": {"id_": "7d1bc1de-7088-4fb1-9c57-2c3f40815862", "embedding": null, "metadata": {"page_label": "12", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d72dfa1a-3556-4c28-84bd-4772d4928d98", "node_type": "4", "metadata": {"page_label": "12", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "e77b219dfea11eb4a231fb5b8d61cb3d408feb73c38be6b40f12aab2dce74282", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "mine the order of the steps and which ones can be done serially and\nin parallel.  \nThere are four main types of architecture components within the\nmediator topology: event queues, an event mediator, event channels,\nand event processors. The event flow starts with a client sending an\nevent to an event queue, which is used to transport the event to the\nevent mediator. The event mediator receives the initial event and\norchestrates that event by sending additional asynchronous events\nto event channels to execute each step of the process. Event process\u2010\nors, which listen on the event channels, receive the event from the\nevent mediator and execute specific business logic to process the\nevent. Figure 2-1  illustrates the general mediator topology of the\nevent-driven architecture pattern. \nFigure 2-1. Event-driven architecture mediator topology\nIt is common to have anywhere from a dozen to several hundred\nevent queues in an event-driven architecture. The pattern does\nnot specify the implementation of the event queue component; it\ncan be a message queue, a web service endpoint, or any combination\nthereof.\nThere are two types of events within this pattern: an initial event and\na processing event. The initial event is the original event received by\n12 | Chapter 2: Event-Driven Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1299, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "679c7592-d7cd-4744-8dc6-ac1a34709358": {"__data__": {"id_": "679c7592-d7cd-4744-8dc6-ac1a34709358", "embedding": null, "metadata": {"page_label": "13", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6166d8c-523c-4f09-829d-a1fd54992cf1", "node_type": "4", "metadata": {"page_label": "13", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "b66a426e8b8705dd9731e8f96e621c1c8de8f8443c674e15a36069f1f4c30da7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "the mediator, whereas the processing events are ones that\nare generated by the mediator and received by the event-processing\ncomponents. \nThe event-mediator component is responsible for orchestrating\nthe steps contained within the initial event. For each step in the ini\u2010\ntial event, the event mediator sends out a specific processing event\nto an event channel, which is then received and processed by the\nevent processor. It is important to note that the event mediator\ndoesn\u2019t actually perform the business logic necessary to process the\ninitial event; rather, it knows of the steps required to process the ini\u2010\ntial event. \nEvent channels are used by the event mediator to asynchronously\npass specific processing events related to each step in the initial\nevent to the event processors. The event channels can be either mes\u2010\nsage queues or message topics, although message topics are most\nwidely used with the mediator topology so that processing events\ncan be processed by multiple event processors (each performing a\ndifferent task based on the processing event received). \nThe event processor components contain the application business\nlogic necessary to process the processing event. Event processors are\nself-contained, independent, highly decoupled architecture compo\u2010\nnents that perform a specific task in the application or system.\nWhile the granularity of the event-processor component can vary\nfrom fine-grained (e.g., calculate sales tax on an order) to coarse-\ngrained (e.g., process an insurance claim), it is important to keep in\nmind that in general, each event-processor component should per\u2010\nform a single business task and not rely on other event processors to\ncomplete its specific task.\nThe event mediator can be implemented in a variety of ways. As an\narchitect, you should understand each of these implementation\noptions to ensure that the solution you choose for the event media\u2010\ntor matches your needs and requirements. \nThe simplest and most common implementation of the event medi\u2010\nator is through open source integration hubs such as Spring Integra\u2010\ntion, Apache Camel, or Mule ESB. Event flows in these open source\nintegration hubs are typically implemented through Java code or a\nDSL (domain-specific language). For more sophisticated mediation\nand orchestration, you can use BPEL (business process execution\nlanguage) coupled with a BPEL engine such as the open source\nMediator Topology | 13", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2425, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8bf6555-cd7d-496c-bbc9-12f7a9c8062e": {"__data__": {"id_": "e8bf6555-cd7d-496c-bbc9-12f7a9c8062e", "embedding": null, "metadata": {"page_label": "14", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fe39b1f-7a9e-4b65-b7ba-806017e296f6", "node_type": "4", "metadata": {"page_label": "14", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "5ac33ec289421494fe90a87b0779bc4c450a0fa7883c77b6849c2048fa0e5d4a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Apache ODE. BPEL is a standard XML-like language that describes\nthe data and steps required for processing an initial event. For very\nlarge applications requiring much more sophisticated orchestration\n(including steps involving human interactions), you can implement\nthe event mediator using a business process manager (BPM) such\nas jBPM.\nUnderstanding your needs and matching them to the correct event\nmediator implementation is critical to the success of any event-\ndriven architecture using this topology. Using an open source inte\u2010\ngration hub to do very complex business process management\norchestration is a recipe for failure, just as is implementing a BPM\nsolution to perform simple routing logic. \nTo illustrate how the mediator topology works, suppose you are\ninsured through an insurance company and you decide to move. In\nthis case, the initial event might be called something like relocation\nevent. The steps involved in processing a relocation event are con\u2010\ntained within the event mediator as shown in Figure 2-2. For each\ninitial event step, the event mediator creates a processing event (e.g.,\nchange address, recalc quote, etc.), sends that processing event to the\nevent channel and waits for the processing event to be processed by\nthe corresponding event processor (e.g., customer process, quote\nprocess, etc.). This process continues until all of the steps in the ini\u2010\ntial event have been processed. The single bar over the recalc quote\nand update claims steps in the event mediator indicates that these\nsteps can be run at the same time. \nBroker Topology\nThe broker topology differs from the mediator topology in that\nthere is no central event mediator; rather, the message flow is dis\u2010\ntributed across the event processor components in a chain-like\nfashion through a lightweight message broker (e.g., ActiveMQ,\nHornetQ, etc.). This topology is useful when you have a relatively\nsimple event processing flow and you do not want (or need) central\nevent orchestration.\nThere are two main types of architecture components within the\nbroker topology: a broker component and an event processor compo\u2010\nnent. The broker component can be centralized or federated and\ncontains all of the event channels that are used within the event flow.\n14 | Chapter 2: Event-Driven Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2296, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0e1aed08-dbc0-41e1-a573-9d36609f50be": {"__data__": {"id_": "0e1aed08-dbc0-41e1-a573-9d36609f50be", "embedding": null, "metadata": {"page_label": "15", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68545007-09d2-4a6a-91da-b9046b763d45", "node_type": "4", "metadata": {"page_label": "15", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "713c33c6f5076059057a2e1f5dd58ea436e8747ff9917ec25b77eb30fd41899a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The event channels contained within the broker component can be\nmessage queues, message topics, or a combination of both.\nFigure 2-2. Mediator topology example\nThis topology is illustrated in Figure 2-3. As you can see from the\ndiagram, there is no central event-mediator component controlling\nand orchestrating the initial event; rather, each event-processor\ncomponent is responsible for processing an event and publishing a\nnew event indicating the action it just performed. For example, an\nevent processor that balances a portfolio of stocks may receive an\ninitial event called stock split. Based on that initial event, the event\nprocessor may do some portfolio rebalancing, and then publish a\nnew event to the broker called rebalance portfolio, which would then\nbe picked up by a different event processor. Note that there may be\ntimes when an event is published by an event processor but not\npicked up by any another event processor. This is common when\nyou are evolving an application or providing for future functionality\nand extensions.    \nBroker Topology | 15", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1069, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a55ccf5-fdfb-4745-86f9-255a103f086d": {"__data__": {"id_": "1a55ccf5-fdfb-4745-86f9-255a103f086d", "embedding": null, "metadata": {"page_label": "16", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "acb8cdac-f58c-4b23-b37e-f744a5a28c1f", "node_type": "4", "metadata": {"page_label": "16", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "dfa09258e2591411f6499b50855f7bd4bc601f3cc3b36398883ab0475b301faa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Figure 2-3. Event-driven architecture broker topology\nTo illustrate how the broker topology works, we\u2019ll use the same\nexample as in the mediator topology (an insured person moves).\nSince there is no central event mediator to receive the initial event in\nthe broker topology, the customer-process component receives the\nevent directly, changes the customer address, and sends out an event\nsaying it changed a customer\u2019s address (e.g., change address event).\nIn this example, there are two event processors that are interested in\nthe change address event: the quote process and the claims process.\nThe quote processor component recalculates the new auto-\ninsurance rates based on the address change and publishes an event\nto the rest of the system indicating what it did (e.g., recalc quote\nevent). The claims processing component, on the other hand,\nreceives the same change address event, but in this case, it updates an\noutstanding insurance claim and publishes an event to the system as\nan update claim event. These new events are then picked up by other\nevent processor components, and the event chain continues through\nthe system until there are no more events are published for that par\u2010\nticular initiating event.    \n16 | Chapter 2: Event-Driven Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1264, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "153392bc-1210-4817-be3b-7b9befe14aab": {"__data__": {"id_": "153392bc-1210-4817-be3b-7b9befe14aab", "embedding": null, "metadata": {"page_label": "17", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "943b4b0e-fb80-4b4c-849b-0d0ed6d08e19", "node_type": "4", "metadata": {"page_label": "17", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "b46a44530e1bbddfbca28aae21aa0df2520c3d9398fef8b33bd2fe53f14c5af6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Figure 2-4. Broker topology example\nAs you can see from Figure 2-4, the broker topology is all about the\nchaining of events to perform a business function. The best way to\nunderstand the broker topology is to think about it as a relay race.\nIn a relay race, runners hold a baton and run for a certain distance,\nthen hand off the baton to the next runner, and so on down the\nchain until the last runner crosses the finish line. In relay races, once\na runner hands off the baton, she is done with the race. This is also\ntrue with the broker topology: once an event processor hands\noff the event, it is no longer involved with the processing of that spe\u2010\ncific event.\nConsiderations\nThe event-driven architecture pattern is a relatively complex pattern\nto implement, primarily due to its asynchronous distributed nature.\nWhen implementing this pattern, you must address various dis\u2010\ntributed architecture issues, such as remote process availability, lack\nof responsiveness, and broker reconnection logic in the event of a\nbroker or mediator failure.\nConsiderations | 17", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1066, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a6fa435f-91b5-4af7-83ec-b29d399eda17": {"__data__": {"id_": "a6fa435f-91b5-4af7-83ec-b29d399eda17", "embedding": null, "metadata": {"page_label": "18", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "164c62df-9828-405f-ba2c-1b4bbf3113ae", "node_type": "4", "metadata": {"page_label": "18", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "4ee5e17c2cc138231b0aa879beb6db6d5c8db2165d70e73c70f502c695729a3b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "One consideration to take into account when choosing this architec\u2010\nture pattern is the lack of atomic transactions for a single business\nprocess. Because event processor components are highly decoupled\nand distributed, it is very difficult to maintain a transactional\nunit of work across them. For this reason, when designing your\napplication using this pattern, you must continuously think about\nwhich events can and can\u2019t run independently and plan the granu\u2010\nlarity of your event processors accordingly. If you find that you need\nto split a single unit of work across event processors\u2014that is, if\nyou are using separate processors for something that should be an\nundivided transaction\u2014this is probably not the right pattern for\nyour application.\nPerhaps one of the most difficult aspects of the event-driven archi\u2010\ntecture pattern is the creation, maintenance, and governance of the\nevent-processor component contracts. Each event usually has a spe\u2010\ncific contract associated with it (e.g., the data values and data format\nbeing passed to the event processor). It is vitally important when\nusing this pattern to settle on a standard data format (e.g., XML,\nJSON, Java Object, etc.) and establish a contract versioning policy\nright from the start. \nPattern Analysis\nThe following table contains a rating and analysis of the common\narchitecture characteristics for the event-driven architecture pattern.\nThe rating for each characteristic is based on the natural tendency\nfor that characteristic as a capability based on a typical implementa\u2010\ntion of the pattern, as well as what the pattern is generally known\nfor. For a side-by-side comparison of how this pattern relates to\nother patterns in this report, please refer to Appendix A at the end\nof this report.\nOverall agility\nRating: High\nAnalysis: Overall agility is the ability to respond quickly to a\nconstantly changing environment. Since event-processor com\u2010\nponents are single-purpose and completely decoupled from\nother event processor components, changes are generally iso\u2010\nlated to one or a few event processors and can be made quickly\nwithout impacting other components.\n18 | Chapter 2: Event-Driven Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2176, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5cea8cc6-15b8-4f14-8ab0-fe95346b4d92": {"__data__": {"id_": "5cea8cc6-15b8-4f14-8ab0-fe95346b4d92", "embedding": null, "metadata": {"page_label": "19", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "64a2015c-a7e4-48b4-9b8f-df022c47a765", "node_type": "4", "metadata": {"page_label": "19", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "d84d81e6cec1a6873e04a9a86cf01bb410078a855a1421301b7903c9e0281243", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Ease of deployment\nRating: High\nAnalysis: Overall this pattern is relatively easy to deploy due to\nthe decoupled nature of the event-processor components. The\nbroker topology tends to be easier to deploy than the\nmediator topology, primarily because the event mediator com\u2010\nponent is somewhat tightly coupled to the event processors: a\nchange in an event processor component might also require a\nchange in the event mediator, requiring both to be deployed for\nany given change.\nTestability\nRating: Low\nAnalysis: While individual unit testing is not overly difficult, it\ndoes require some sort of specialized testing client or testing\ntool to generate events. Testing is also complicated by the asyn\u2010\nchronous nature of this pattern.\nPerformance\nRating: High\nAnalysis: While it is certainly possible to implement an event-\ndriven architecture that does not perform well due to all the\nmessaging infrastructure involved, in general, the pattern ach\u2010\nieves high performance through its asynchronous capabili\u2010\nties; in other words, the ability to perform decoupled, parallel\nasynchronous operations outweighs the cost of queuing and\ndequeuing messages.\nScalability\nRating: High\nAnalysis: Scalability is naturally achieved in this pattern through\nhighly independent and decoupled event processors. Each event\nprocessor can be scaled separately, allowing for fine-grained\nscalability.\nEase of development\nRating: Low\nAnalysis: Development can be somewhat complicated due to\nthe asynchronous nature of the pattern as well as contract cre\u2010\nation and the need for more advanced error handling condi\u2010\ntions within the code for unresponsive event processors and\nfailed brokers.\nPattern Analysis | 19", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1688, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "290b91a4-682b-4224-8691-2c3c4f6fc20c": {"__data__": {"id_": "290b91a4-682b-4224-8691-2c3c4f6fc20c", "embedding": null, "metadata": {"page_label": "20", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "138c20ad-d539-4462-9922-aa62a7380ae1", "node_type": "4", "metadata": {"page_label": "20", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "d8395b36defa420c3cd15e1d1215f899f755f70bd126159f2188d8c375da1043", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "80e7459d-f7fc-4e37-aae3-5b19f1ece2da": {"__data__": {"id_": "80e7459d-f7fc-4e37-aae3-5b19f1ece2da", "embedding": null, "metadata": {"page_label": "21", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a7cbe19-8e11-4eed-b807-b1bc8101b988", "node_type": "4", "metadata": {"page_label": "21", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "2e39728c3e63e446d4efeaae917dbbb58706322064058a0ce7e5c695d8a8db2c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CHAPTER 3\nMicrokernel Architecture\nThe microkernel architecture pattern (sometimes referred to as the\nplug-in architecture pattern) is a natural pattern for implementing\nproduct-based applications. A product-based application is one that\nis packaged and made available for download in versions as a typical\nthird-party product. However, many companies also develop and\nrelease their internal business applications like software products,\ncomplete with versions, release notes, and pluggable features. These\nare also a natural fit for this pattern. The microkernel architecture\npattern allows you to add additional application features as plug-ins\nto the core application, providing extensibility as well as feature sep\u2010\naration and isolation.\nPattern Description\nThe microkernel architecture pattern consists of two types of archi\u2010\ntecture components: a core system and plug-in modules. Application\nlogic is divided between independent plug-in modules and the basic\ncore system, providing extensibility, flexibility, and isolation of\napplication features and custom processing logic. Figure 3-1  illus\u2010\ntrates the basic microkernel architecture pattern.\nThe core system of the microkernel architecture pattern tradition\u2010\nally contains only the minimal functionality required to make the\nsystem operational. Many operating systems implement the micro\u2010\nkernel architecture pattern, hence the origin of this pattern\u2019s name.\nFrom a business-application perspective, the core system is often\n21", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1489, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "beb4acf9-29c7-4ef3-bbbe-38385e1f7167": {"__data__": {"id_": "beb4acf9-29c7-4ef3-bbbe-38385e1f7167", "embedding": null, "metadata": {"page_label": "22", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5e3b1ec-55f6-4c97-a2c0-3c4fd1f79804", "node_type": "4", "metadata": {"page_label": "22", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "57fd265e2da969defa1037d87182770274c256fc881a83baedb0143eb12d3c1e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "defined as the general business logic sans custom code for special\ncases, special rules, or complex conditional processing.\nFigure 3-1. Microkernel architecture pattern\nThe plug-in modules are stand-alone, independent components that\ncontain specialized processing, additional features, and custom code\nthat is meant to enhance or extend the core system to produce addi\u2010\ntional business capabilities. Generally, plug-in modules should be\nindependent of other plug-in modules, but you can certainly design\nplug-ins that require other plug-ins to be present. Either way, it is\nimportant to keep the communication between plug-ins to a mini\u2010\nmum to avoid dependency issues.  \nThe core system needs to know about which plug-in modules are\navailable and how to get to them. One common way of implement\u2010\ning this is through some sort of plug-in registry. This registry con\u2010\ntains information about each plug-in module, including things like\nits name, data contract, and remote access protocol details (depend\u2010\ning on how the plug-in is connected to the core system). For exam\u2010\nple, a plug-in for tax software that flags high-risk tax audit items\nmight have a registry entry that contains the name of the\nservice (AuditChecker), the data contract (input data and output\ndata), and the contract format (XML). It might also contain a WSDL\n(Web Services Definition Language) if the plug-in is accessed\nthrough SOAP .  \nPlug-in modules can be connected to the core system through a\nvariety of ways, including OSGi (open service gateway initiative),\nmessaging, web services, or even direct point-to-point binding (i.e.,\nobject instantiation). The type of connection you use depends on\nthe type of application you are building (small product or large busi\u2010\nness application) and your specific needs (e.g., single deploy or dis\u2010\n22 | Chapter 3: Microkernel Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1855, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "280b632a-ae3a-4f78-abef-d93d56c00cc2": {"__data__": {"id_": "280b632a-ae3a-4f78-abef-d93d56c00cc2", "embedding": null, "metadata": {"page_label": "23", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd9ec442-0bf5-4f1d-a0e0-85efb1a826e9", "node_type": "4", "metadata": {"page_label": "23", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "4114557fa05f0764b23524926e30550d03494d35dfbb03bc628024bc9ffdcb80", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "tributed deployment). The architecture pattern itself does not\nspecify any of these implementation details, only that the plug-in\nmodules must remain independent from one another.\nThe contracts between the plug-in modules and the core system can\nrange anywhere from standard contracts to custom ones. Custom\ncontracts are typically found in situations where plug-in compo\u2010\nnents are developed by a third party where you have no control over\nthe contract used by the plug-in. In such cases, it is common to cre\u2010\nate an adapter between the plug-in contact and your standard con\u2010\ntract so that the core system doesn\u2019t need specialized code for each\nplug-in. When creating standard contracts (usually implemented\nthrough XML or a Java Map), it is important to remember to create\na versioning strategy right from the start. \nPattern Examples\nPerhaps the best example of the microkernel architecture is the\nEclipse IDE. Downloading the basic Eclipse product provides you\nlittle more than a fancy editor. However, once you start adding\nplug-ins, it becomes a highly customizable and useful product.\nInternet browsers are another common product example using the\nmicrokernel architecture: viewers and other plug-ins add additional\ncapabilities that are not otherwise found in the basic browser (i.e.,\ncore system).\nThe examples are endless for product-based software, but what\nabout large business applications? The microkernel architecture\napplies to these situations as well. To illustrate this point, let\u2019s use\nanother insurance company example, but this time one involving\ninsurance claims processing.\nClaims processing is a very complicated process. Each state has dif\u2010\nferent rules and regulations for what is and isn\u2019t allowed in an insur\u2010\nance claim. For example, some states allow free windshield\nreplacement if your windshield is damaged by a rock, whereas other\nstates do not. This creates an almost infinite set of conditions for a\nstandard claims process. \nNot surprisingly, most insurance claims applications leverage large\nand complex  rules engines to handle much of this complexity. How\u2010\never, these rules engines can grow into a complex big ball of mud\nwhere changing one rule impacts other rules, or making a\nPattern Examples | 23", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2241, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a0043f41-92dc-410b-a815-5c937da7597e": {"__data__": {"id_": "a0043f41-92dc-410b-a815-5c937da7597e", "embedding": null, "metadata": {"page_label": "24", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ad28a3d1-5ca4-41f6-b039-c3530f17a35d", "node_type": "4", "metadata": {"page_label": "24", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "0ed865792a6c98a491f37505a8b35e18262e9e438b5687a393d031a8cf98964b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "simple rule change requires an army of analysts, developers, and\ntesters. Using the microkernel architecture pattern can solve many\nof these issues.\nThe stack of folders you see in Figure 3-2 represents the core system\nfor claims processing. It contains the basic business logic required\nby the insurance company to process a claim, except without any\ncustom processing. Each plug-in module contains the specific rules\nfor that state. In this example, the plug-in modules can be imple\u2010\nmented using custom source code or separate rules engine instances.\nRegardless of the implementation, the key point is that state-specific\nrules and processing is separate from the core claims system and can\nbe added, removed, and changed with little or no effect on the rest\nof the core system or other plug-in modules.\nFigure 3-2. Microkernel architecture example\nConsiderations\nOne great thing about the microkernel architecture pattern is that it\ncan be embedded or used as part of another architecture pattern.\nFor example, if this pattern solves a particular problem you have\nwith a specific volatile area of the application, you might find that\nyou can\u2019t implement the entire architecture using this pattern. In this\ncase, you can embed the microservices architecture pattern in\nanother pattern you are using (e.g., layered architecture). Similarly,\nthe event-processor components described in the previous section\non event-driven architecture could be implemented using the\nmicroservices architecture pattern.\nThe microservices architecture pattern provides great support for\nevolutionary design and incremental development. Y ou can first\nproduce a solid core system, and as the application evolves incre\u2010\n24 | Chapter 3: Microkernel Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1741, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a6d1afff-cb9c-4423-ab25-627a925067b8": {"__data__": {"id_": "a6d1afff-cb9c-4423-ab25-627a925067b8", "embedding": null, "metadata": {"page_label": "25", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94dae536-6c09-4f7b-92a8-0ee077f40832", "node_type": "4", "metadata": {"page_label": "25", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "11fe64c18b3c9df84432acebbdf29b19023ec839c4b3f74c6f65dcef788af141", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "mentally, add features and functionality without having to make sig\u2010\nnificant changes to the core system. \nFor product-based applications, the microkernel architecture pat\u2010\ntern should always be your first choice as a starting architecture,\nparticularly for those products where you will be releasing addi\u2010\ntional features over time and want control over which users\nget which features. If you find over time that the pattern doesn\u2019t sat\u2010\nisfy all of your requirements, you can always refactor your applica\u2010\ntion to another architecture pattern better suited for your specific\nrequirements.\nPattern Analysis\nThe following table contains a rating and analysis of the common\narchitecture characteristics for the microkernel architecture pattern.\nThe rating for each characteristic is based on the natural tendency\nfor that characteristic as a capability based on a typical implementa\u2010\ntion of the pattern, as well as what the pattern is generally known\nfor. For a side-by-side comparison of how this pattern relates to\nother patterns in this report, please refer to Appendix A at the end\nof this report.\nOverall agility\nRating: High\nAnalysis: Overall agility is the ability to respond quickly to a\nconstantly changing environment. Changes can largely be iso\u2010\nlated and implemented quickly through loosely coupled plug-in\nmodules. In general, the core system of most microkernel archi\u2010\ntectures tends to become stable quickly, and as such is fairly\nrobust and requires few changes over time.\nEase of deployment\nRating: High\nAnalysis: Depending on how the pattern is implemented,\nthe plug-in modules can be dynamically added to the core sys\u2010\ntem at runtime (e.g., hot-deployed), minimizing downtime dur\u2010\ning deployment.\nPattern Analysis | 25", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1737, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ff32a069-2bd7-45b9-b624-9e9eabb9bb9f": {"__data__": {"id_": "ff32a069-2bd7-45b9-b624-9e9eabb9bb9f", "embedding": null, "metadata": {"page_label": "26", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b112aff-f61a-4d51-a586-9c392b92a8da", "node_type": "4", "metadata": {"page_label": "26", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "f4e5173d1adc808c0d9ef5114d59ff58f7ff21b2368d532cb8ac61e57ac5b1d5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Testability\nRating: High\nAnalysis: Plug-in modules can be tested in isolation and can be\neasily mocked by the core system to demonstrate or prototype a\nparticular feature with little or no change to the core system.\nPerformance\nRating: High\nAnalysis: While the microkernel pattern does not naturally lend\nitself to high-performance applications, in general, most appli\u2010\ncations built using the microkernel architecture pattern perform\nwell because you can customize and streamline applications to\nonly include those features you need. The JBoss Application\nServer is a good example of this: with its plug-in architecture,\nyou can trim down the application server to only those features\nyou need, removing expensive non-used features such as\nremote access, messaging, and caching that consume memory,\nCPU, and threads and slow down the app server.\nScalability\nRating: Low\nAnalysis: Because most microkernel architecture implementa\u2010\ntions are product based and are generally smaller in size, they\nare implemented as single units and hence not highly scalable.\nDepending on how you implement the plug-in modules, you\ncan sometimes provide scalability at the plug-in feature level,\nbut overall this pattern is not known for producing highly scala\u2010\nble applications.\nEase of development\nRating: Low\nAnalysis: The microkernel architecture requires thoughtful\ndesign and contract governance, making it rather complex to\nimplement. Contract versioning, internal plug-in registries,\nplug-in granularity, and the wide choices available for plug-in\nconnectivity all contribute to the complexity involved with\nimplementing this pattern.\n26 | Chapter 3: Microkernel Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1665, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "761b56cc-f4f0-4613-9abb-cf877c814a16": {"__data__": {"id_": "761b56cc-f4f0-4613-9abb-cf877c814a16", "embedding": null, "metadata": {"page_label": "27", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90c14fcd-f49a-40eb-890d-34325027c9a0", "node_type": "4", "metadata": {"page_label": "27", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "ee9a5bdc65115c8392f224d8c5d6673ca2be33869472a0252ccb7298c4074c9a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CHAPTER 4\nMicroservices Architecture Pattern\nThe microservices architecture pattern is quickly gaining ground in\nthe industry as a viable alternative to monolithic applications and\nservice-oriented architectures. Because this architecture pattern is\nstill evolving, there\u2019s a lot of confusion in the industry about what\nthis pattern is all about and how it is implemented. This section of\nthe report will provide you with the key concepts and foundational\nknowledge necessary to understand the benefits (and trade-offs) of\nthis important architecture pattern and whether it is the right pat\u2010\ntern for your application.     \nPattern Description\nRegardless of the topology or implementation style you chose, there\nare several common core concepts that apply to the general architec\u2010\nture pattern. The first of these concepts is the notion of separately\ndeployed units. As illustrated in Figure 4-1, each component of the\nmicroservices architecture is deployed as a separate unit, allowing\nfor easier deployment through an effective and streamlined delivery\npipeline, increased scalability, and a high degree of application and\ncomponent decoupling within your application. \nPerhaps the most important concept to understand with this pattern\nis the notion of a service component. Rather than think about serv\u2010\nices within a microservices architecture, it is better to think about\nservice components, which can vary in granularity from a single\nmodule to a large portion of the application. Service components\ncontain one or more modules (e.g., Java classes) that represent either\n27", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1579, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "049855c8-0ea6-4fba-a9e6-74b0db6a56ed": {"__data__": {"id_": "049855c8-0ea6-4fba-a9e6-74b0db6a56ed", "embedding": null, "metadata": {"page_label": "28", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ceeb0b26-2145-46b5-97d2-4400bef60d5d", "node_type": "4", "metadata": {"page_label": "28", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "5d9f931ce47efcb914da184de96d52c97027233dc1e175be17b40911af433b3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "a single-purpose function (e.g., providing the weather for a specific\ncity or town) or an independent portion of a large business applica\u2010\ntion (e.g., stock trade placement or determining auto-insurance\nrates). Designing the right level of service component granularity is\none of the biggest challenges within a microservices architecture.\nThis challenge is discussed in more detail in the following service-\ncomponent orchestration subsection. \nFigure 4-1. Basic Microservices architecture pattern\nAnother key concept within the microservices architecture pattern\nis that it is a distributed architecture, meaning that all the compo\u2010\nnents within the architecture are fully decoupled from one other\nand accessed through some sort of remote access protocol (e.g.,\nJMS, AMQP , REST, SOAP , RMI, etc.). The distributed nature of this\narchitecture pattern is how it achieves some of its superior scalabil\u2010\nity and deployment characteristics. \nOne of the exciting things about the microservices architecture is\nthat it evolved from issues associated with other common architec\u2010\nture patterns, rather than being created as a solution waiting for a\nproblem to occur. The microservices architecture style naturally\nevolved from two main sources: monolithic applications developed\nusing the layered architecture pattern and distributed applications\ndeveloped through the service-oriented architecture pattern. \nThe evolutionary path from monolithic applications to a microser\u2010\nvices architecture style was prompted primarily through the devel\u2010\nopment of continuous delivery, the notion of a continuous\n28 | Chapter 4: Microservices Architecture Pattern", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1644, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84adf935-24f6-4e10-82b0-7d8dbcd4f0c4": {"__data__": {"id_": "84adf935-24f6-4e10-82b0-7d8dbcd4f0c4", "embedding": null, "metadata": {"page_label": "29", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d510e54-9c2c-4e3e-a851-e7bd101b69b3", "node_type": "4", "metadata": {"page_label": "29", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "03e7e5e43517d05d26bdbd9c12ec051aab18842c871686d90c6a1476c5850344", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "deployment pipeline from development to production which\nstreamlines the deployment of applications. Monolithic applications\ntypically consist of tightly coupled components that are part of a sin\u2010\ngle deployable unit, making it cumbersome and difficult to change,\ntest, and deploy the application (hence the rise of the common\n\u201cmonthly deployment\u201d cycles typically found in most large IT\nshops). These factors commonly lead to brittle applications that\nbreak every time something new is deployed. The microservices\narchitecture pattern addresses these issues by separating the applica\u2010\ntion into multiple deployable units (service components) that can be\nindividually developed, tested, and deployed independent of other\nservice components.\nThe other evolutionary path that lead to the microservices architec\u2010\nture pattern is from issues found with applications implementing\nthe service-oriented architecture pattern (SOA). While the SOA pat\u2010\ntern is very powerful and offers unparalleled levels of abstraction,\nheterogeneous connectivity, service orchestration, and the promise\nof aligning business goals with IT capabilities, it is nevertheless com\u2010\nplex, expensive, ubiquitous, difficult to understand and implement,\nand is usually overkill for most applications. The microservices\narchitecture style addresses this complexity by simplifying the\nnotion of a service, eliminating orchestration needs, and simplifying\nconnectivity and access to service components.  \nPattern Topologies\nWhile there are literally dozens of ways to implement a microservi\u2010\nces architecture pattern, three main topologies stand out as the most\ncommon and popular: the API REST-based  topology, application\nREST-based topology, and the centralized messaging topology. \nThe API REST-based  topology is useful for websites that expose\nsmall, self-contained individual services through some sort of\nAPI (application programming interface). This topology, which is\nillustrated in Figure 4-2, consists of very fine-grained service com\u2010\nponents (hence the name microservices) that contain one or two\nmodules that perform specific business functions independent from\nthe rest of the services. In this topology, these fine-grained service\ncomponents are typically accessed using a REST-based interface\nimplemented through a separately deployed web-based API layer.\nExamples of this topology include some of the common single-\nPattern Topologies | 29", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2421, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d1baa26a-cba7-4b47-a3ab-6a255c9afc6d": {"__data__": {"id_": "d1baa26a-cba7-4b47-a3ab-6a255c9afc6d", "embedding": null, "metadata": {"page_label": "30", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee544ce3-f80b-4517-82be-65a850d8985c", "node_type": "4", "metadata": {"page_label": "30", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "851056e320999d570af0781d17d867b4a49d55a6fe3585c78692aa945433f631", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "purpose cloud-based RESTful web services found by Y ahoo, Google,\nand Amazon.\nFigure 4-2. API REST-based topology\nThe application REST-based topology differs from the API REST-\nbased approach in that client requests are received through tradi\u2010\ntional web-based or fat-client business application screens rather\nthan through a simple API layer. As illustrated in Figure 4-3 , the\nuser-interface layer of the application is deployed as a separate web\napplication that remotely accesses separately deployed service com\u2010\nponents (business functionality) through simple REST-based inter\u2010\nfaces. The service components in this topology differ from those in\nthe API-REST-based topology in that these service components tend\nto be larger, more coarse-grained, and represent a small portion of\nthe overall business application rather than fine-grained, single-\naction services. This topology is common for small to medium-sized\nbusiness applications that have a relatively low degree of complexity.\n30 | Chapter 4: Microservices Architecture Pattern", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1040, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3de89c52-ece8-44bd-9083-166ce1d845a6": {"__data__": {"id_": "3de89c52-ece8-44bd-9083-166ce1d845a6", "embedding": null, "metadata": {"page_label": "31", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca7926e5-8b75-4ef7-9787-af053acae655", "node_type": "4", "metadata": {"page_label": "31", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "a865b0cdd0b06b9f2a22292827d58de050947aa72935f2603265e4935130ea07", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Figure 4-3. Application REST-based topology\nAnother common approach within the microservices architecture\npattern is the centralized messaging topology. This topology (illus\u2010\ntrated in Figure 4-4 ) is similar to the previous application REST-\nbased topology except that instead of using REST for remote access,\nthis topology uses a lightweight centralized message broker (e.g.,\nActiveMQ, HornetQ, etc.). It is vitally important when looking at\nthis topology not to confuse it with the service-oriented architecture\npattern or consider it \u201cSOA-Lite.\" The lightweight message broker\nfound in this topology does not perform any orchestration, transfor\u2010\nmation, or complex routing; rather, it is just a lightweight transport\nto access remote service components.\nThe centralized messaging topology is typically found in larger busi\u2010\nness applications or applications requiring more sophisticated con\u2010\ntrol over the transport layer between the user interface and the\nservice components. The benefits of this topology over the simple\nREST-based topology discussed previously are advanced queuing\nmechanisms, asynchronous messaging, monitoring, error handling,\nand better overall load balancing and scalability. The single point of\nfailure and architectural bottleneck issues usually associated with a\ncentralized broker are addressed through broker clustering and\nbroker federation (splitting a single broker instance into multiple\nbroker instances to divide the message throughput load based on\nfunctional areas of the system).  \nPattern Topologies | 31", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1547, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4149fdb7-cc71-423c-93d1-2a7f36e3f9f8": {"__data__": {"id_": "4149fdb7-cc71-423c-93d1-2a7f36e3f9f8", "embedding": null, "metadata": {"page_label": "32", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a043ad3-11bd-4796-b770-9d1ccb82132b", "node_type": "4", "metadata": {"page_label": "32", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "69832432812c9b65206d4ff7dbe15ec7c847ff38543320ac29fe9f1112ed1a17", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Figure 4-4. Centralized messaging topology\nAvoid Dependencies and Orchestration\nOne of the main challenges of the microservices architecture pattern\nis determining the correct level of granularity for the service compo\u2010\nnents. If service components are too coarse-grained you may not\nrealize the benefits that come with this architecture pattern (deploy\u2010\nment, scalability, testability, and loose coupling). However, service\ncomponents that are too fine-grained will lead to service orchestra\u2010\ntion requirements, which will quickly turn your lean microservices\narchitecture into a heavyweight service-oriented architecture, com\u2010\nplete with all the complexity, confusion, expense, and fluff typically\nfound with SOA-based applications. \nIf you find you need to orchestrate your service components from\nwithin the user interface or API layer of the application, then chan\u2010\nces are your service components are too fine-grained. Similarly, if\nyou find you need to perform inter-service communication between\nservice components to process a single request, chances are your\nservice components are either too fine-grained or they are not parti\u2010\ntioned correctly from a business functionality standpoint.\nInter-service communication, which could force undesired cou\u2010\nplings between components, can be handled instead through a\n32 | Chapter 4: Microservices Architecture Pattern", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1370, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fc6005ce-a204-42d3-a672-52205c2503bb": {"__data__": {"id_": "fc6005ce-a204-42d3-a672-52205c2503bb", "embedding": null, "metadata": {"page_label": "33", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b53e9f65-4a5b-4c44-975e-a41dd3265708", "node_type": "4", "metadata": {"page_label": "33", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "c9909f61c5fdf645b5627b1518440877263f80742a3fee7c3558d99d30bd0606", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "shared database. For example, if a service component handing Inter\u2010\nnet orders needs customer information, it can go to the database to\nretrieve the necessary data as opposed to invoking functionality\nwithin the customer-service component. \nThe shared database can handle information needs, but what about\nshared functionality? If a service component needs functionality\ncontained within another service component or common to all ser\u2010\nvice components, you can sometimes copy the shared functionality\nacross service components (thereby violating the DRY princi\u2010\nple: don\u2019t repeat yourself). This is a fairly common practice in most\nbusiness applications implementing the microservices architecture\npattern, trading off the redundancy of repeating small portions of\nbusiness logic for the sake of keeping service components independ\u2010\nent and separating their deployment. Small utility classes might fall\ninto this category of repeated code. \nIf you find that regardless of the level of service component granu\u2010\nlarity you still cannot avoid service-component orchestration, then\nit\u2019s a good sign that this might not be the right architecture pattern\nfor your application. Because of the distributed nature of this pat\u2010\ntern, it is very difficult to maintain a single transactional unit of\nwork across (and between) service components. Such a practice\nwould require some sort of transaction compensation framework\nfor rolling back transactions, which adds significant complexity to\nthis relatively simple and elegant architecture pattern.       \nConsiderations\nThe microservices architecture pattern solves many of the common\nissues found in both monolithic applications as well as service-\noriented architectures. Since major application components are\nsplit up into smaller, separately deployed units, applications built\nusing the microservices architecture pattern are generally more\nrobust, provide better scalability, and can more easily support con\u2010\ntinuous delivery.\nAnother advantage of this pattern is that it provides the capability to\ndo real-time production deployments, thereby significantly reducing\nthe need for the traditional monthly or weekend \u201cbig bang\u201d produc\u2010\ntion deployments. Since change is generally isolated to specific ser\u2010\nvice components, only the service components that change need\nto be deployed. If you only have a single instance of a service com\u2010\nConsiderations | 33", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "95c1e54c-5403-4e2e-a561-9b69d647d3ec": {"__data__": {"id_": "95c1e54c-5403-4e2e-a561-9b69d647d3ec", "embedding": null, "metadata": {"page_label": "34", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6597ce1-5a67-4a51-b2be-b5a6391985d7", "node_type": "4", "metadata": {"page_label": "34", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "7fb1621c9a12931e01d7021abfd83547426e26aa6133607e743d5aee6c7efdf2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ponent, you can write specialized code in the user interface applica\u2010\ntion to detect an active hot-deployment and redirect users to an\nerror page or waiting page. Alternatively, you can swap multiple\ninstances of a service component in and out during a real-time\ndeployment, allowing for continuous availability during deployment\ncycles (something that is very difficult to do with the layered archi\u2010\ntecture pattern).  \nOne final consideration to take into account is that since the micro\u2010\nservices architecture pattern is a distributed architecture, it shares\nsome of the same complex issues found in the event-driven architec\u2010\nture pattern, including contract creation, maintenance, and govern\u2010\nment, remote system availability, and remote access authentication\nand authorization. \nPattern Analysis\nThe following table contains a rating and analysis of the common\narchitecture characteristics for the microservices architecture pat\u2010\ntern. The rating for each characteristic is based on the natural ten\u2010\ndency for that characteristic as a capability based on a typical\nimplementation of the pattern, as well as what the pattern is gener\u2010\nally known for. For a side-by-side comparison of how this pattern\nrelates to other patterns in this report, please refer to Appendix A at\nthe end of this report.\nOverall agility\nRating: High\nAnalysis: Overall agility is the ability to respond quickly to a\nconstantly changing environment. Due to the notion of sepa\u2010\nrately deployed units, change is generally isolated to individual\nservice components, which allows for fast and easy deployment.\nAlso, applications build using this pattern tend to be very\nloosely coupled, which also helps facilitate change.\nEase of deployment\nRating: High\nAnalysis: The deployment characteristics of the microservices\npattern rate very high due to the fine-grained and independent\nnature of the remote services. Services are generally deployed as\nseparate units of software, resulting in the ability to do \u201chot\ndeployments\u201d any time during the day or night. Overall deploy\u2010\nment risk is also significantly reduced, in that failed deploy\u2010\n34 | Chapter 4: Microservices Architecture Pattern", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2162, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10f3a8b3-0c70-47bc-968d-8e10b10c3626": {"__data__": {"id_": "10f3a8b3-0c70-47bc-968d-8e10b10c3626", "embedding": null, "metadata": {"page_label": "35", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bce5b62c-27ef-43f3-9dba-e943026af709", "node_type": "4", "metadata": {"page_label": "35", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "64d1b1e86ad2c50782f6edbaebd6bf7a6252d5310dee33bccbc88fe05614a9c4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ments are able to be restored more quickly and only impact the\noperations on the service being deployed, resulting in continued\noperations for all other operations.\nTestability\nRating: High\nAnalysis: Due to the separation and isolation of business func\u2010\ntionality into independent applications, testing can be scoped,\nallowing for more targeted testing efforts. Regression testing for\na particular service component is much easier and more feasible\nthan regression testing for an entire monolithic application.\nAlso, since the service components in this pattern are loosely\ncoupled, there is much less of a chance from a development per\u2010\nspective of making a change that breaks another part of the\napplication, easing the testing burden of having to test the entire\napplication for one small change.\nPerformance\nRating: Low\nAnalysis: While you can create applications implemented from\nthis pattern that perform very well, overall this pattern does not\nnaturally lend itself to high-performance applications due to the\ndistributed nature of the microservices architecture pattern.\nScalability\nRating: High\nAnalysis: Because the application is split into separately\ndeployed units, each service component can be individually\nscaled, allowing for fine-tuned scaling of the application. For\nexample, the admin area of a stock-trading application may not\nneed to scale due to the low user volumes for that functionality,\nbut the trade-placement service component may need to scale\ndue to the high throughput needed by most trading applications\nfor this functionality.\nEase of development\nRating: High\nAnalysis: Because functionality is isolated into separate and dis\u2010\ntinct service components, development becomes easier due to\nthe smaller and isolated scope. There is much less chance a\ndeveloper will make a change in one service component that\nwould affect other service components, thereby reducing the\ncoordination needed among developers or development teams.\nPattern Analysis | 35", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1982, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d20f52f-ef1f-4c41-ad78-8026a05e34bb": {"__data__": {"id_": "9d20f52f-ef1f-4c41-ad78-8026a05e34bb", "embedding": null, "metadata": {"page_label": "36", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3495ed92-9cf2-459a-bc2a-3db01a857182", "node_type": "4", "metadata": {"page_label": "36", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "85875f9cc1fd4ca637f303e07759223ac3102d61c0795f09c4a0e1c71272eb18", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5126055-ec88-4a7e-b3a7-9e919a483100": {"__data__": {"id_": "e5126055-ec88-4a7e-b3a7-9e919a483100", "embedding": null, "metadata": {"page_label": "37", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09263dc7-5ba0-475e-9c61-1e8f9a9c9254", "node_type": "4", "metadata": {"page_label": "37", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "312182ace0ed779ad46b0c8f670182bea7efa001779c960702a69abbd5c03dd3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CHAPTER 5\nSpace-Based Architecture\nMost web-based business applications follow the same general\nrequest flow: a request from a browser hits the web server, then an\napplication server, then finally the database server. While this pat\u2010\ntern works great for a small set of users, bottlenecks start appearing\nas the user load increases, first at the web-server layer, then at the\napplication-server layer, and finally at the database-server layer. The\nusual response to bottlenecks based on an increase in user load is to\nscale out the web servers. This is relatively easy and inexpensive, and\nsometimes works to address the bottleneck issues. However, in most\ncases of high user load, scaling out the web-server layer just moves\nthe bottleneck down to the application server. Scaling application\nservers can be more complex and expensive than web servers and\nusually just moves the bottleneck down to the database server,\nwhich is even more difficult and expensive to scale. Even if you can\nscale the database, what you eventually end up with is a triangle-\nshaped topology, with the widest part of the triangle being the web\nservers (easiest to scale) and the smallest part being the database\n(hardest to scale). \nIn any high-volume application with an extremely large concurrent\nuser load, the database will usually be the final limiting factor in\nhow many transactions you can process concurrently. While various\ncaching technologies and database scaling products help to address\nthese issues, the fact remains that scaling out a normal application\nfor extreme loads is a very difficult proposition.\n37", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1602, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1b0fd20e-5724-4427-b677-dd9f43e06532": {"__data__": {"id_": "1b0fd20e-5724-4427-b677-dd9f43e06532", "embedding": null, "metadata": {"page_label": "38", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b786c870-3c46-4460-a525-cc11b549529b", "node_type": "4", "metadata": {"page_label": "38", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "89e2aafac62afa185a0170771ed025a6a8bc32c8df4a73d659a3b036123e95dc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The space-based architecture pattern is specifically designed to\naddress and solve scalability and concurrency issues. It is also a use\u2010\nful architecture pattern for applications that have variable and\nunpredictable concurrent user volumes. Solving the extreme and\nvariable scalability issue architecturally is often a better approach\nthan trying to scale out a database or retrofit caching technologies\ninto a non-scalable architecture.   \nPattern Description\nThe space-based pattern (also sometimes referred to as the cloud\narchitecture pattern) minimizes the factors that limit application\nscaling. This pattern gets its name from the concept of tuple\nspace, the idea of distributed shared memory. High scalability is\nachieved by removing the central database constraint and using\nreplicated in-memory data grids instead. Application data is kept in-\nmemory and replicated among all the active processing units. Pro\u2010\ncessing units can be dynamically started up and shut down as user\nload increases and decreases, thereby addressing variable scalabil\u2010\nity. Because there is no central database, the database bottleneck is\nremoved, providing near-infinite scalability within the application.\nMost applications that fit into this pattern are standard websites that\nreceive a request from a browser and perform some sort of action. A\nbidding auction site is a good example of this. The site continually\nreceives bids from internet users through a browser request. The\napplication would receive a bid for a particular item, record that bid\nwith a timestamp, and update the latest bid information for the item,\nand send the information back to the browser. \nThere are two primary components within this architecture pat\u2010\ntern: a processing unit and virtualized middleware. Figure 5-1  illus\u2010\ntrates the basic space-based architecture pattern and its primary\narchitecture components.\nThe processing-unit component contains the application compo\u2010\nnents (or portions of the application components). This includes\nweb-based components as well as backend business logic. The con\u2010\ntents of the processing unit varies based on the type of application\u2014\nsmaller web-based applications would likely be deployed into a sin\u2010\ngle processing unit, whereas larger applications may split the appli\u2010\ncation functionality into multiple processing units based on the\nfunctional areas of the application. The processing unit typically\n38 | Chapter 5: Space-Based Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2452, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f79e526a-cfd9-4758-9a20-b36455c6822a": {"__data__": {"id_": "f79e526a-cfd9-4758-9a20-b36455c6822a", "embedding": null, "metadata": {"page_label": "39", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb9edd9d-fb6d-4f41-9e37-aceed259062a", "node_type": "4", "metadata": {"page_label": "39", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "60970278477bee45510f2d22c9f31ac3ea06de95a0bbf46a62073c5f267cdb55", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "contains the application modules, along with an in-memory data\ngrid and an optional asynchronous persistent store for failover. It\nalso contains a replication engine that is used by the virtualized mid\u2010\ndleware to replicate data changes made by one processing unit to\nother active processing units. \nFigure 5-1. Space-based architecture pattern\nThe virtualized-middleware component handles housekeeping and\ncommunications. It contains components that control various\naspects of data synchronization and request handling. Included in\nthe virtualized middleware are the messaging grid, data grid, pro\u2010\ncessing grid, and deployment manager. These components, which\nare described in detail in the next section, can be custom written or\npurchased as third-party products.   \nPattern Dynamics\nThe magic of the space-based architecture pattern lies in the virtual\u2010\nized middleware components and the in-memory data grid con\u2010\ntained within each processing unit. Figure 5-2  shows the typical\nprocessing unit architecture containing the application modules, in-\nmemory data grid, optional asynchronous persistence store for fail\u2010\nover, and the data-replication engine. \nThe virtualized middleware is essentially the controller for the archi\u2010\ntecture and manages requests, sessions, data replication, distributed\nrequest processing, and process-unit deployment. There are four\nmain architecture components in the virtualized middleware: the\nPattern Dynamics | 39", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1452, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9babfb0a-7d1a-47da-81c2-f0d18ee99915": {"__data__": {"id_": "9babfb0a-7d1a-47da-81c2-f0d18ee99915", "embedding": null, "metadata": {"page_label": "40", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d3548e4-19ff-4b85-bc27-769c0b36bbcb", "node_type": "4", "metadata": {"page_label": "40", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "a8dee650d2630f7aee584570613ee706fd591b8b5eeb9ace74e14b3f0669b329", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "messaging grid, the data grid, the processing grid, and the deploy\u2010\nment manager. \nFigure 5-2. Processing-unit component\nMessaging Grid\nThe messaging grid, shown in Figure 5-3 , manages input request\nand session information. When a request comes into the virtualized-\nmiddleware component, the messaging-grid component determines\nwhich active processing components are available to receive the\nrequest and forwards the request to one of those processing\nunits. The complexity of the messaging grid can range from a simple\nround-robin algorithm to a more complex next-available algorithm\nthat keeps track of which request is being processed by which pro\u2010\ncessing unit.\nData Grid\nThe data-grid component is perhaps the most important and crucial\ncomponent in this pattern. The data grid interacts with the data-\nreplication engine in each processing unit to manage the data repli\u2010\ncation between processing units when data updates occur. Since the\nmessaging grid can forward a request to any of the processing units\navailable, it is essential that each processing unit contains exactly the\nsame data in its in-memory data grid. Although Figure 5-4 shows a\nsynchronous data replication between processing units, in reality\nthis is done in parallel asynchronously and very quickly, sometimes\ncompleting the data synchronization in a matter of microseconds\n(one millionth of a second).\n40 | Chapter 5: Space-Based Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1421, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b79d263a-4cff-4f78-81da-74fefa41874a": {"__data__": {"id_": "b79d263a-4cff-4f78-81da-74fefa41874a", "embedding": null, "metadata": {"page_label": "41", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f6054698-1ad2-47ac-aeac-2ad85681647f", "node_type": "4", "metadata": {"page_label": "41", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "d49c56f4d25d66d3e307abd99b88e60d5625ed1e6f6c6dcda242e9358dbf3fb5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Figure 5-3. Messaging-grid component\nFigure 5-4. Data-grid component\nProcessing Grid\nThe processing grid, illustrated in Figure 5-5, is an optional compo\u2010\nnent within the virtualized middleware that manages distributed\nrequest processing when there are multiple processing units, each\nhandling a portion of the application. If a request comes in that\nrequires coordination between processing unit types (e.g., an order\nprocessing unit and a customer processing unit), it is the processing\nPattern Dynamics | 41", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 510, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "22bff443-9e44-4ee2-a0a6-c03e47daa047": {"__data__": {"id_": "22bff443-9e44-4ee2-a0a6-c03e47daa047", "embedding": null, "metadata": {"page_label": "42", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09557c22-6cf2-4523-a70a-c2fa72f2021b", "node_type": "4", "metadata": {"page_label": "42", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "13d51d540bdc2f539a9e04b3d25b3fd454c4967fbb2e4114392428dc7f724ab0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "grid that mediates and orchestrates the request between those two\nprocessing units.\nFigure 5-5. Processing-grid component\nDeployment Manager\nThe deployment-manager component manages the dynamic startup\nand shutdown of processing units based on load conditions. This\ncomponent continually monitors response times and user loads, and\nstarts up new processing units when load increases, and shuts down\nprocessing units when the load decreases. It is a critical component\nto achieving variable scalability needs within an application.\nConsiderations\nThe space-based architecture pattern is a complex and expensive\npattern to implement. It is a good architecture choice for smaller\nweb-based applications with variable load (e.g., social media sites,\nbidding and auction sites). However, it is not well suited for tradi\u2010\ntional large-scale relational database applications with large amounts\nof operational data.\nAlthough the space-based architecture pattern does not require a\ncentralized datastore, one is commonly included to perform the ini\u2010\ntial in-memory data grid load and asynchronously persist data\nupdates made by the processing units. It is also a common practice\nto create separate partitions that isolate volatile and widely used\n42 | Chapter 5: Space-Based Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1278, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "91ff2c12-f59b-496f-a927-c9176e750838": {"__data__": {"id_": "91ff2c12-f59b-496f-a927-c9176e750838", "embedding": null, "metadata": {"page_label": "43", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87449457-f950-473e-ac17-529aec93ebd2", "node_type": "4", "metadata": {"page_label": "43", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "07439448c6f1f61b44959ee75cafece999ce40fc81052910c84d69cd15e6ee9e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "transactional data from non-active data, in order to reduce the\nmemory footprint of the in-memory data grid within each process\u2010\ning unit. \nIt is important to note that while the alternative name of this pattern\nis the cloud-based architecture, the processing units (as well as the\nvirtualized middleware) do not have to reside on cloud-based hos\u2010\nted services or PaaS (platform as a service). It can just as easily\nreside on local servers, which is one of the reasons I prefer the name\n\u201cspace-based architecture. \u201d\nFrom a product implementation perspective, you can implement\nmany of the architecture components in this pattern through third-\nparty products such as GemFire, JavaSpaces, GigaSpaces, IBM\nObject Grid, nCache, and Oracle Coherence. Because the imple\u2010\nmentation of this pattern varies greatly in terms of cost and capabili\u2010\nties (particularly data replication times), as an architect, you should\nfirst establish what your specific goals and needs are before making\nany product selections.  \nPattern Analysis\nThe following table contains a rating and analysis of the common\narchitecture characteristics for the space-based architecture pattern.\nThe rating for each characteristic is based on the natural tendency\nfor that characteristic as a capability based on a typical implementa\u2010\ntion of the pattern, as well as what the pattern is generally known\nfor. For a side-by-side comparison of how this pattern relates to\nother patterns in this report, please refer to Appendix A at the end\nof this report.\nOverall agility\nRating: High\nAnalysis: Overall agility is the ability to respond quickly to a\nconstantly changing environment. Because processing units\n(deployed instances of the application) can be brought up and\ndown quickly, applications respond well to changes related to an\nincrease or decrease in user load (environment changes).\n Architectures created using this pattern generally respond well\nto coding changes due to the small application size and dynamic\nnature of the pattern.\nPattern Analysis | 43", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2025, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d17e1ae1-4ecf-4ac9-8963-e8054bb874d2": {"__data__": {"id_": "d17e1ae1-4ecf-4ac9-8963-e8054bb874d2", "embedding": null, "metadata": {"page_label": "44", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e82fa91e-e5e7-4f88-a148-14c5a0a21954", "node_type": "4", "metadata": {"page_label": "44", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "8742a1552e09bd7f32e7e2316c956f447914399259272ec766bb8eedb51abe05", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Ease of deployment\nRating: High\nAnalysis: Although space-based architectures are generally not\ndecoupled and distributed, they are dynamic, and sophisticated\ncloud-based tools allow for applications to easily be \u201cpushed\u201d\nout to servers, simplifying deployment.\nTestability\nRating: Low\nAnalysis: Achieving very high user loads in a test environment is\nboth expensive and time consuming, making it difficult to test\nthe scalability aspects of the application.\nPerformance\nRating: High\nAnalysis: High performance is achieved through the in-memory\ndata access and caching mechanisms build into this pattern.\nScalability\nRating: High\nAnalysis: High scalability come from the fact that there is little\nor no dependency on a centralized database, therefore essen\u2010\ntially removing this limiting bottleneck from the scalability\nequation.\nEase of development\nRating: Low\nAnalysis: Sophisticated caching and in-memory data grid prod\u2010\nucts make this pattern relatively complex to develop, mostly\nbecause of the lack of familiarity with the tools and products\nused to create this type of architecture. Furthermore, special\ncare must be taken while developing these types of architectures\nto make sure nothing in the source code impacts performance\nand scalability.\n44 | Chapter 0: Space-Based Architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1292, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "969a4d17-7fbe-475f-9e58-c2c6b497074c": {"__data__": {"id_": "969a4d17-7fbe-475f-9e58-c2c6b497074c", "embedding": null, "metadata": {"page_label": "45", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e1f6fb0e-ab72-44d5-8845-96e792f3ab75", "node_type": "4", "metadata": {"page_label": "45", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "05653ccaaae7f7e9f0ffb35332d6d2c5912e538b42075b4c072d20a51fa99e34", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "APPENDIX A\nPattern Analysis Summary\nFigure A-1 summarizes the pattern-analysis scoring for each of the\narchitecture patterns described in this report. This summary will\nhelp you determine which pattern might be best for your situation.\nFor example, if your primary architectural concern is scalability, you\ncan look across this chart and see that the event-driven pattern,\nmicroservices pattern, and space-based pattern are probably good\narchitecture pattern choices. Similarly, if you choose the layered\narchitecture pattern for your application, you can refer to the chart\nto see that deployment, performance, and scalability might be risk\nareas in your architecture.  \n45", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 674, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5d88f41b-c16e-4f6b-879f-6c18eb4c3daf": {"__data__": {"id_": "5d88f41b-c16e-4f6b-879f-6c18eb4c3daf", "embedding": null, "metadata": {"page_label": "46", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "693daa0d-a887-4a47-861e-c94ce92ee5e1", "node_type": "4", "metadata": {"page_label": "46", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "0ac0f6f84f504fbe878083a53addd7e6709564d661b34f394a48d0d510e0a07b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Figure A-1. Pattern-analysis summary\nWhile this chart will help guide you in choosing the right pattern,\nthere is much more to consider when choosing an architecture pat\u2010\ntern. Y ou must analyze all aspects of your environment, including\ninfrastructure support, developer skill set, project budget, project\ndeadlines, and application size (to name a few). Choosing the right\narchitecture pattern is critical, because once an architecture is in\nplace, it is very hard (and expensive) to change.\n46 | Appendix A: Pattern Analysis Summary", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 535, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e63fd2a1-f085-4c26-a679-27ebae1ee705": {"__data__": {"id_": "e63fd2a1-f085-4c26-a679-27ebae1ee705", "embedding": null, "metadata": {"page_label": "47", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d564e61-8af5-4b60-900c-6781dd7929a4", "node_type": "4", "metadata": {"page_label": "47", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}, "hash": "c66f5c92764817ecde20a04543b5fd4c97c2f2ec1c63cf6f66c316d97ebe8f91", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "About the Author\nMark Richards  is an experienced, hands-on software architect\ninvolved in the architecture, design, and implementation of micro\u2010\nservices architectures, service-oriented architectures, and dis\u2010\ntributed systems in J2EE and other technologies. He has been in the\nsoftware industry since 1983 and has significant experience and\nexpertise in application, integration, and enterprise architecture.\nMark served as the president of the New England Java Users Group\nfrom 1999 through 2003. He is the author of numerous technical\nbooks and videos, including Software Architecture Fundamen\u2010\ntals (O\u2019Reilly video), Enterprise Messaging  (O\u2019Reilly video), Java\nMessage Service, 2nd Edition (O\u2019Reilly), and a contributing  author\nto 97 Things Every Software Architect Should Know (O\u2019Reilly).\nMark has a master\u2019s degree in computer science and numerous\narchitect and developer certifications  from IBM, Sun, The Open\nGroup, and BEA. He is a regular conference speaker at the No\nFluff Just Stuff (NFJS) Symposium Series and has spoken at more\nthan 100 conferences and user groups around the world on a vari\u2010\nety of enterprise-related  technical topics. When he is not working,\nMark can usually be found hiking in the White Mountains or\nalong the Appalachian Trail.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1267, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"9d61c6f2-8604-4b41-ac0f-ee2ef6df8592": {"node_ids": ["8892c222-0ede-4923-a847-0a5187b1144f"], "metadata": {"page_label": "1", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ce251b4c-9df7-44c9-bb5a-374e063d508f": {"node_ids": ["4640516e-fc93-439f-91f3-3d610bb01c29"], "metadata": {"page_label": "2", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "e363273c-3e87-473b-9543-1aa7d22404a3": {"node_ids": ["3923c634-5ce3-40eb-9243-e97835f47535"], "metadata": {"page_label": "3", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "24f0a26d-8aef-4ccd-9072-731a413c8c1e": {"node_ids": ["55a0df7b-368f-4565-b2db-00e2918329b0"], "metadata": {"page_label": "4", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "0449a3ab-6989-4e9b-bac3-04ff9d7f20dc": {"node_ids": ["aa04c992-6a59-4a6e-aea9-d38bcd2c3e02"], "metadata": {"page_label": "5", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "4391ba2a-7344-4a90-848d-24c5f9fdf94f": {"node_ids": ["cc35a92f-238b-442b-8caa-b0c3c27eeeaf"], "metadata": {"page_label": "6", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "e8266447-b777-4cf4-ab77-9db8de52e865": {"node_ids": ["9b267661-08b9-4fc2-97f8-e5f66ff21a6b"], "metadata": {"page_label": "7", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "2ddcf355-d117-458f-bbfa-42c3408c9900": {"node_ids": ["0fb4eec6-d85d-468a-82ae-6c70da3c12e0"], "metadata": {"page_label": "8", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "45630aed-a817-4c93-8016-4ecf4c219311": {"node_ids": ["e123e9bf-8026-481d-b6eb-6acf94e4b6e5"], "metadata": {"page_label": "9", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "d973e909-34db-44d2-a76c-b68aa8f072e4": {"node_ids": ["8bf0f6f6-28f4-491f-aea2-d93a1d69bd67"], "metadata": {"page_label": "10", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "966c39b3-6255-4d7c-8529-5bd5234b5f7a": {"node_ids": ["2af4299b-af4b-4b6d-9ab7-5c701c63f8dd"], "metadata": {"page_label": "11", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ae172c38-cd30-4d87-9362-7013e9102bcc": {"node_ids": ["0c381873-e3b9-491b-8683-9c8864728916"], "metadata": {"page_label": "12", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "877c10a8-d1bd-4f76-9342-d3347f1bdf49": {"node_ids": ["204274a2-335f-4644-9f7e-c996d2e0bf0f"], "metadata": {"page_label": "13", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "1090ab77-5150-4f66-bfd6-598a862fc82c": {"node_ids": ["4e34d45f-6aad-4c1b-9317-d0ba6c05f3c2"], "metadata": {"page_label": "14", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "97f38d65-7ad4-4b7c-babc-590f860d3600": {"node_ids": ["81e53a90-7a64-40a7-af17-ba681498800b"], "metadata": {"page_label": "15", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "fecbe22f-2e0c-4881-a059-98d97d0055ac": {"node_ids": ["c059563f-1aa8-4a88-9e30-fc3d02536765"], "metadata": {"page_label": "16", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "9e47fe1e-a426-4948-a421-7b16fa109d5d": {"node_ids": ["0492a0df-8138-4a3d-a928-32f085e80c6f"], "metadata": {"page_label": "17", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "6d5f5988-6a1e-4904-b423-83fb43da8140": {"node_ids": ["826d7af2-c959-4f9e-a9af-2d9a065d6172"], "metadata": {"page_label": "18", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "55533469-873e-4d87-82f7-dd42ac7a5525": {"node_ids": ["45e64969-21fc-4387-9d22-57df1a341392"], "metadata": {"page_label": "19", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "a292dd57-dc04-4fd5-b0fc-9bedcbb0ab69": {"node_ids": ["3e83ab50-7284-4ddf-8f09-2f54955da6e8"], "metadata": {"page_label": "20", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "9232b0c6-73cd-42f2-b657-4ebc385b9be1": {"node_ids": ["d820f5aa-8ffb-4fcb-a8d7-4c0fced9e176"], "metadata": {"page_label": "21", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "7a98d8c6-98e4-41dd-8ddc-a65c23b3b72f": {"node_ids": ["03cd0d72-d93f-4f18-8613-10c7c964d673"], "metadata": {"page_label": "22", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "85634b0b-cd30-4b69-9f76-f6fbe503a9d7": {"node_ids": ["002785a6-78d8-4aac-bea0-450359a1fffe"], "metadata": {"page_label": "23", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "1479dae3-51d9-4e87-a0ff-a24abd10eea6": {"node_ids": ["8ad7f3eb-9e9a-44b7-aa75-02b65930d4df"], "metadata": {"page_label": "24", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "a20b9deb-8930-4b39-9d98-3a9e4f1515e6": {"node_ids": ["2f54c930-e030-40de-8c33-5161831ef28a"], "metadata": {"page_label": "25", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ca1003df-6230-496f-8ebd-88bd9aa2bd28": {"node_ids": ["4cb42c95-ede5-48ef-9abb-6203c22b3621"], "metadata": {"page_label": "26", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "2e9297ae-dbf3-406c-8e73-d302bd7908ec": {"node_ids": ["7a305b30-07e9-4aa2-b9ed-2dd30339c0eb"], "metadata": {"page_label": "27", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "c8919d45-2ba5-42f4-a033-0a9e434f7f96": {"node_ids": ["555b0d04-7dfd-4afd-92f4-91c24668286e"], "metadata": {"page_label": "28", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "270973d9-3e62-4bfc-8fc9-c085f71278a0": {"node_ids": ["fad95b83-3427-4071-b424-637a3bdd7ba0"], "metadata": {"page_label": "29", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "4acccff3-2abd-40cd-9ec2-42f61846c412": {"node_ids": ["695ea630-8da4-43a5-8fdb-b1413e183f95"], "metadata": {"page_label": "30", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "8544df16-80ce-4271-ae4d-7bd7e8c46103": {"node_ids": ["640ad04b-581e-4a6d-ade6-8b9a5ca7f3f1"], "metadata": {"page_label": "31", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "2c21dbe4-13e4-4805-9e38-812931e1aa36": {"node_ids": ["0ce9ccad-5bb5-4c51-8c42-33bd5f1959da"], "metadata": {"page_label": "32", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "c90accd1-f915-4121-90a2-1d81660b90bc": {"node_ids": ["55905983-f154-4a88-b1cb-c935fae12565"], "metadata": {"page_label": "33", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "91c33dfd-512f-4248-9030-94a40fc90fcc": {"node_ids": ["bce3c9bd-5f52-4125-9c36-7a883ed24bce"], "metadata": {"page_label": "34", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "893687c5-580c-49ad-90bb-0ff3d9c4fd8c": {"node_ids": ["bd942ac1-c8d3-4079-b067-bc458726fd4d"], "metadata": {"page_label": "35", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "1c87bf89-b4f3-4c3f-b455-c865f90f8239": {"node_ids": ["ccfcbfee-6997-4e2b-988a-25ec13c783de"], "metadata": {"page_label": "36", "file_name": "Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf", "file_type": "application/pdf", "file_size": 956232, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "e1425a2d-2cdc-4544-8a21-ca69d7eb1cd5": {"node_ids": ["7255651e-02e5-4cb0-b51e-9c010b975b21"], "metadata": {"page_label": "1", "file_name": "RESUME -LATEST-.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\RESUME -LATEST-.pdf", "file_type": "application/pdf", "file_size": 141443, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "dcf158e7-a7bb-41bd-8f04-3cded112e909": {"node_ids": ["31c9ba57-da88-44ae-95b0-d2557dfeb0c0"], "metadata": {"page_label": "Cover", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "e9a04748-e20d-4777-85b7-56b8c6b1a2ba": {"node_ids": ["c33b5ee5-a06a-4e42-9752-15499a34af95"], "metadata": {"page_label": "i", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "9e86f5ca-c655-4ecc-ac4f-e27e411d2cb1": {"node_ids": ["8d34ab33-0bfa-4001-bc87-50794772e57e"], "metadata": {"page_label": "ii", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "4ac4e317-614b-4bcf-91a4-acaa179ebe49": {"node_ids": ["42687f89-9d6d-45ea-936d-f3ff8310053c"], "metadata": {"page_label": "iii", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "cdee0d00-5589-471c-a3c4-84e51f986f99": {"node_ids": ["26e893e5-93c7-42c7-8113-56cbda90f287"], "metadata": {"page_label": "iv", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "118fe40f-44f2-43ec-84c3-8be09c1bcf0f": {"node_ids": ["d68e1e14-655e-403e-98b0-3b1568dce68b"], "metadata": {"page_label": "v", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "bf5854cd-492b-4572-a601-899c3ac244c9": {"node_ids": ["0c211020-a7f3-43a7-b6ad-5d2f7876f15a"], "metadata": {"page_label": "vi", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "425d2916-e313-4f69-89bd-7aa20bf0cb9c": {"node_ids": ["26b9d5f2-6fa5-4a23-8d36-185c55877b1c"], "metadata": {"page_label": "1", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "dbdb6873-5000-4135-a110-26db79227446": {"node_ids": ["41f7fe7e-454a-4c76-b461-c23d941c73ed"], "metadata": {"page_label": "2", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "a05793ba-216a-4e4c-8536-56644448f3cb": {"node_ids": ["5dea4450-2f46-408e-909d-83d0aabfc8a3"], "metadata": {"page_label": "3", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ccfc5e28-57a6-4d83-8047-0f26408f3690": {"node_ids": ["6017467d-d056-45a3-8587-0e0a0ce9d8cd"], "metadata": {"page_label": "4", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "a464ed99-9f5b-4b1e-8647-cddd1967eb90": {"node_ids": ["ede1a952-ed6e-40f2-a79a-bdbcff39a9b4"], "metadata": {"page_label": "5", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "b1a47164-ab27-4155-9168-3c808525a41a": {"node_ids": ["7826f417-112b-4bca-9649-c05730c957ee"], "metadata": {"page_label": "6", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "2a53e4fa-419d-43fc-afcc-491ed6df5601": {"node_ids": ["e3400e93-51c7-450a-b301-4a41ab533dcd"], "metadata": {"page_label": "7", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "dc93fe18-0c66-4c5d-8e38-92bf914b6146": {"node_ids": ["b483e8c8-eec1-4288-a735-80c5347b3f9d"], "metadata": {"page_label": "8", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ff7c64ea-384e-4884-bd37-67573fc9ee79": {"node_ids": ["56276afa-bb1c-4ebb-9f33-900d442d2afa"], "metadata": {"page_label": "9", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "f7dc4cce-2b53-4c6e-94eb-e8ec1eb00931": {"node_ids": ["faaa9fd6-80f3-461c-8d65-d2ad28129872"], "metadata": {"page_label": "10", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "8d6fd736-f3be-45cf-9d39-d54a9d9c039b": {"node_ids": ["92ad7149-5706-41bf-8f79-f983b733d9d1"], "metadata": {"page_label": "11", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "d72dfa1a-3556-4c28-84bd-4772d4928d98": {"node_ids": ["7d1bc1de-7088-4fb1-9c57-2c3f40815862"], "metadata": {"page_label": "12", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "a6166d8c-523c-4f09-829d-a1fd54992cf1": {"node_ids": ["679c7592-d7cd-4744-8dc6-ac1a34709358"], "metadata": {"page_label": "13", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "5fe39b1f-7a9e-4b65-b7ba-806017e296f6": {"node_ids": ["e8bf6555-cd7d-496c-bbc9-12f7a9c8062e"], "metadata": {"page_label": "14", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "68545007-09d2-4a6a-91da-b9046b763d45": {"node_ids": ["0e1aed08-dbc0-41e1-a573-9d36609f50be"], "metadata": {"page_label": "15", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "acb8cdac-f58c-4b23-b37e-f744a5a28c1f": {"node_ids": ["1a55ccf5-fdfb-4745-86f9-255a103f086d"], "metadata": {"page_label": "16", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "943b4b0e-fb80-4b4c-849b-0d0ed6d08e19": {"node_ids": ["153392bc-1210-4817-be3b-7b9befe14aab"], "metadata": {"page_label": "17", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "164c62df-9828-405f-ba2c-1b4bbf3113ae": {"node_ids": ["a6fa435f-91b5-4af7-83ec-b29d399eda17"], "metadata": {"page_label": "18", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "64a2015c-a7e4-48b4-9b8f-df022c47a765": {"node_ids": ["5cea8cc6-15b8-4f14-8ab0-fe95346b4d92"], "metadata": {"page_label": "19", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "138c20ad-d539-4462-9922-aa62a7380ae1": {"node_ids": ["290b91a4-682b-4224-8691-2c3c4f6fc20c"], "metadata": {"page_label": "20", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "4a7cbe19-8e11-4eed-b807-b1bc8101b988": {"node_ids": ["80e7459d-f7fc-4e37-aae3-5b19f1ece2da"], "metadata": {"page_label": "21", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "b5e3b1ec-55f6-4c97-a2c0-3c4fd1f79804": {"node_ids": ["beb4acf9-29c7-4ef3-bbbe-38385e1f7167"], "metadata": {"page_label": "22", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "fd9ec442-0bf5-4f1d-a0e0-85efb1a826e9": {"node_ids": ["280b632a-ae3a-4f78-abef-d93d56c00cc2"], "metadata": {"page_label": "23", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ad28a3d1-5ca4-41f6-b039-c3530f17a35d": {"node_ids": ["a0043f41-92dc-410b-a815-5c937da7597e"], "metadata": {"page_label": "24", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "94dae536-6c09-4f7b-92a8-0ee077f40832": {"node_ids": ["a6d1afff-cb9c-4423-ab25-627a925067b8"], "metadata": {"page_label": "25", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "4b112aff-f61a-4d51-a586-9c392b92a8da": {"node_ids": ["ff32a069-2bd7-45b9-b624-9e9eabb9bb9f"], "metadata": {"page_label": "26", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "90c14fcd-f49a-40eb-890d-34325027c9a0": {"node_ids": ["761b56cc-f4f0-4613-9abb-cf877c814a16"], "metadata": {"page_label": "27", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ceeb0b26-2145-46b5-97d2-4400bef60d5d": {"node_ids": ["049855c8-0ea6-4fba-a9e6-74b0db6a56ed"], "metadata": {"page_label": "28", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "1d510e54-9c2c-4e3e-a851-e7bd101b69b3": {"node_ids": ["84adf935-24f6-4e10-82b0-7d8dbcd4f0c4"], "metadata": {"page_label": "29", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ee544ce3-f80b-4517-82be-65a850d8985c": {"node_ids": ["d1baa26a-cba7-4b47-a3ab-6a255c9afc6d"], "metadata": {"page_label": "30", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "ca7926e5-8b75-4ef7-9787-af053acae655": {"node_ids": ["3de89c52-ece8-44bd-9083-166ce1d845a6"], "metadata": {"page_label": "31", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "2a043ad3-11bd-4796-b770-9d1ccb82132b": {"node_ids": ["4149fdb7-cc71-423c-93d1-2a7f36e3f9f8"], "metadata": {"page_label": "32", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "b53e9f65-4a5b-4c44-975e-a41dd3265708": {"node_ids": ["fc6005ce-a204-42d3-a672-52205c2503bb"], "metadata": {"page_label": "33", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "d6597ce1-5a67-4a51-b2be-b5a6391985d7": {"node_ids": ["95c1e54c-5403-4e2e-a561-9b69d647d3ec"], "metadata": {"page_label": "34", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "bce5b62c-27ef-43f3-9dba-e943026af709": {"node_ids": ["10f3a8b3-0c70-47bc-968d-8e10b10c3626"], "metadata": {"page_label": "35", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "3495ed92-9cf2-459a-bc2a-3db01a857182": {"node_ids": ["9d20f52f-ef1f-4c41-ad78-8026a05e34bb"], "metadata": {"page_label": "36", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "09263dc7-5ba0-475e-9c61-1e8f9a9c9254": {"node_ids": ["e5126055-ec88-4a7e-b3a7-9e919a483100"], "metadata": {"page_label": "37", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "b786c870-3c46-4460-a525-cc11b549529b": {"node_ids": ["1b0fd20e-5724-4427-b677-dd9f43e06532"], "metadata": {"page_label": "38", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "bb9edd9d-fb6d-4f41-9e37-aceed259062a": {"node_ids": ["f79e526a-cfd9-4758-9a20-b36455c6822a"], "metadata": {"page_label": "39", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "0d3548e4-19ff-4b85-bc27-769c0b36bbcb": {"node_ids": ["9babfb0a-7d1a-47da-81c2-f0d18ee99915"], "metadata": {"page_label": "40", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "f6054698-1ad2-47ac-aeac-2ad85681647f": {"node_ids": ["b79d263a-4cff-4f78-81da-74fefa41874a"], "metadata": {"page_label": "41", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "09557c22-6cf2-4523-a70a-c2fa72f2021b": {"node_ids": ["22bff443-9e44-4ee2-a0a6-c03e47daa047"], "metadata": {"page_label": "42", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "87449457-f950-473e-ac17-529aec93ebd2": {"node_ids": ["91ff2c12-f59b-496f-a927-c9176e750838"], "metadata": {"page_label": "43", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "e82fa91e-e5e7-4f88-a148-14c5a0a21954": {"node_ids": ["d17e1ae1-4ecf-4ac9-8963-e8054bb874d2"], "metadata": {"page_label": "44", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "e1f6fb0e-ab72-44d5-8845-96e792f3ab75": {"node_ids": ["969a4d17-7fbe-475f-9e58-c2c6b497074c"], "metadata": {"page_label": "45", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "693daa0d-a887-4a47-861e-c94ce92ee5e1": {"node_ids": ["5d88f41b-c16e-4f6b-879f-6c18eb4c3daf"], "metadata": {"page_label": "46", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}, "0d564e61-8af5-4b60-900c-6781dd7929a4": {"node_ids": ["e63fd2a1-f085-4c26-a679-27ebae1ee705"], "metadata": {"page_label": "47", "file_name": "Software Architecture Patterns.pdf", "file_path": "C:\\Programs\\Python\\chat-with-pdfs\\pdfs\\Software Architecture Patterns.pdf", "file_type": "application/pdf", "file_size": 5387695, "creation_date": "2025-04-23", "last_modified_date": "2025-04-23"}}}}